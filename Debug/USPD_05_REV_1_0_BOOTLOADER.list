
USPD_05_REV_1_0_BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f028  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800f1b8  0800f1b8  0001f1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f790  0800f790  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800f790  0800f790  0001f790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f798  0800f798  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f798  0800f798  0001f798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f79c  0800f79c  0001f79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800f7a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00009ec8  20000088  20000088  00020088  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20009f50  20009f50  00020088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000298ba  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005533  00000000  00000000  0004996e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  0004eea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001920  00000000  00000000  000509e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272fd  00000000  00000000  00052300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022666  00000000  00000000  000795fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0cf5  00000000  00000000  0009bc63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017c958  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007394  00000000  00000000  0017c9ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f1a0 	.word	0x0800f1a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800f1a0 	.word	0x0800f1a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	200000a4 	.word	0x200000a4
 80005a8:	20000158 	.word	0x20000158

080005ac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetTimerTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000358 	.word	0x20000358
 80005dc:	2000040c 	.word	0x2000040c

080005e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e4:	f3bf 8f4f 	dsb	sy
}
 80005e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__NVIC_SystemReset+0x24>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005f2:	4904      	ldr	r1, [pc, #16]	; (8000604 <__NVIC_SystemReset+0x24>)
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <__NVIC_SystemReset+0x28>)
 80005f6:	4313      	orrs	r3, r2
 80005f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fa:	f3bf 8f4f 	dsb	sy
}
 80005fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <__NVIC_SystemReset+0x20>
 8000604:	e000ed00 	.word	0xe000ed00
 8000608:	05fa0004 	.word	0x05fa0004

0800060c <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a05      	ldr	r2, [pc, #20]	; (8000630 <HAL_UART_TxCpltCallback+0x24>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d104      	bne.n	8000628 <HAL_UART_TxCpltCallback+0x1c>
	  {
		  osSemaphoreRelease(TransmissionStateHandle);
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <HAL_UART_TxCpltCallback+0x28>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f005 ffb4 	bl	8006590 <osSemaphoreRelease>
	  }
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40004800 	.word	0x40004800
 8000634:	200097e8 	.word	0x200097e8

08000638 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a10      	ldr	r2, [pc, #64]	; (8000688 <HAL_UART_RxCpltCallback+0x50>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d119      	bne.n	800067e <HAL_UART_RxCpltCallback+0x46>
	  {
		  modem_rx_buffer[modem_rx_number++] = modem_rx_data[0];
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <HAL_UART_RxCpltCallback+0x54>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	b2d1      	uxtb	r1, r2
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <HAL_UART_RxCpltCallback+0x54>)
 8000654:	7011      	strb	r1, [r2, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <HAL_UART_RxCpltCallback+0x58>)
 800065a:	7819      	ldrb	r1, [r3, #0]
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <HAL_UART_RxCpltCallback+0x5c>)
 800065e:	5499      	strb	r1, [r3, r2]
		  osMessagePut(ModbusQueueHandle, (uint32_t)modem_rx_data[0], 2000);
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <HAL_UART_RxCpltCallback+0x60>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <HAL_UART_RxCpltCallback+0x58>)
 8000666:	7812      	ldrb	r2, [r2, #0]
 8000668:	4611      	mov	r1, r2
 800066a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800066e:	4618      	mov	r0, r3
 8000670:	f005 ffec 	bl	800664c <osMessagePut>
		  HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8000674:	2201      	movs	r2, #1
 8000676:	4906      	ldr	r1, [pc, #24]	; (8000690 <HAL_UART_RxCpltCallback+0x58>)
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <HAL_UART_RxCpltCallback+0x64>)
 800067a:	f004 fcb5 	bl	8004fe8 <HAL_UART_Receive_DMA>
	  }
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40004800 	.word	0x40004800
 800068c:	2000080c 	.word	0x2000080c
 8000690:	200095dc 	.word	0x200095dc
 8000694:	200096dc 	.word	0x200096dc
 8000698:	200080c0 	.word	0x200080c0
 800069c:	2000806c 	.word	0x2000806c

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b0be      	sub	sp, #248	; 0xf8
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a6:	f001 f86b 	bl	8001780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006aa:	f000 fa79 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 fbff 	bl	8000eb0 <MX_GPIO_Init>
  MX_IWDG_Init();
 80006b2:	f000 fae3 	bl	8000c7c <MX_IWDG_Init>
  MX_RTC_Init();
 80006b6:	f000 faf7 	bl	8000ca8 <MX_RTC_Init>
  MX_DMA_Init();
 80006ba:	f000 fbd1 	bl	8000e60 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80006be:	f000 fba5 	bl	8000e0c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 80006c2:	f000 fb35 	bl	8000d30 <MX_SPI2_Init>
  MX_SPI3_Init();
 80006c6:	f000 fb69 	bl	8000d9c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  BUZ_ON(); // пикаем бузером
 80006ca:	f00a ffcf 	bl	800b66c <BUZ_ON>
  HAL_Delay(50);
 80006ce:	2032      	movs	r0, #50	; 0x32
 80006d0:	f001 f8cc 	bl	800186c <HAL_Delay>
  BUZ_OFF();
 80006d4:	f00a ffd6 	bl	800b684 <BUZ_OFF>


  if( ((RCC->BDCR)&0x02) != 0 ) // Проверяем, запустился ли часовой кварц, если запустился включаем светодиод
 80006d8:	4b98      	ldr	r3, [pc, #608]	; (800093c <main+0x29c>)
 80006da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	fm25v02_write(2*ID_LOW_REG+1, 0x00);
	*/



  	read_bootloader_registers_no_rtos(); // читаем ригистры бутлоадера до запуска операционной системы
 80006dc:	f00d fbbe 	bl	800de5c <read_bootloader_registers_no_rtos>


	start_address = ((((uint32_t)(bootloader_registers.start_address_firmware_high_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.start_address_firmware_2_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.start_address_firmware_3_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.start_address_firmware_low_reg))&0x000000FF);
 80006e0:	4b97      	ldr	r3, [pc, #604]	; (8000940 <main+0x2a0>)
 80006e2:	885b      	ldrh	r3, [r3, #2]
 80006e4:	061a      	lsls	r2, r3, #24
 80006e6:	4b96      	ldr	r3, [pc, #600]	; (8000940 <main+0x2a0>)
 80006e8:	889b      	ldrh	r3, [r3, #4]
 80006ea:	041b      	lsls	r3, r3, #16
 80006ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80006f0:	431a      	orrs	r2, r3
 80006f2:	4b93      	ldr	r3, [pc, #588]	; (8000940 <main+0x2a0>)
 80006f4:	88db      	ldrh	r3, [r3, #6]
 80006f6:	021b      	lsls	r3, r3, #8
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4b90      	ldr	r3, [pc, #576]	; (8000940 <main+0x2a0>)
 80006fe:	891b      	ldrh	r3, [r3, #8]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	4313      	orrs	r3, r2
 8000704:	4a8f      	ldr	r2, [pc, #572]	; (8000944 <main+0x2a4>)
 8000706:	6013      	str	r3, [r2, #0]

	end_address = ((((uint32_t)(bootloader_registers.end_address_firmware_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.end_address_firmware_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.end_address_firmware_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.end_address_firmware_low_reg))&0x000000FF);
 8000708:	4b8d      	ldr	r3, [pc, #564]	; (8000940 <main+0x2a0>)
 800070a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800070c:	061a      	lsls	r2, r3, #24
 800070e:	4b8c      	ldr	r3, [pc, #560]	; (8000940 <main+0x2a0>)
 8000710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000712:	041b      	lsls	r3, r3, #16
 8000714:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000718:	431a      	orrs	r2, r3
 800071a:	4b89      	ldr	r3, [pc, #548]	; (8000940 <main+0x2a0>)
 800071c:	895b      	ldrh	r3, [r3, #10]
 800071e:	021b      	lsls	r3, r3, #8
 8000720:	b29b      	uxth	r3, r3
 8000722:	431a      	orrs	r2, r3
 8000724:	4b86      	ldr	r3, [pc, #536]	; (8000940 <main+0x2a0>)
 8000726:	899b      	ldrh	r3, [r3, #12]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	4313      	orrs	r3, r2
 800072c:	4a86      	ldr	r2, [pc, #536]	; (8000948 <main+0x2a8>)
 800072e:	6013      	str	r3, [r2, #0]

	//end_address = 0x08029EEB;

	firmware_length = end_address - start_address + 1;
 8000730:	4b85      	ldr	r3, [pc, #532]	; (8000948 <main+0x2a8>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b83      	ldr	r3, [pc, #524]	; (8000944 <main+0x2a4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	3301      	adds	r3, #1
 800073c:	4a83      	ldr	r2, [pc, #524]	; (800094c <main+0x2ac>)
 800073e:	6013      	str	r3, [r2, #0]

	firmware_crc = (((bootloader_registers.crc_firmware_low_reg)<<8)&0xFF00) | ((bootloader_registers.crc_firmware_high_reg)&0x00FF);
 8000740:	4b7f      	ldr	r3, [pc, #508]	; (8000940 <main+0x2a0>)
 8000742:	8a1b      	ldrh	r3, [r3, #16]
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	b21a      	sxth	r2, r3
 8000748:	4b7d      	ldr	r3, [pc, #500]	; (8000940 <main+0x2a0>)
 800074a:	89db      	ldrh	r3, [r3, #14]
 800074c:	b21b      	sxth	r3, r3
 800074e:	b2db      	uxtb	r3, r3
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b7d      	ldr	r3, [pc, #500]	; (8000950 <main+0x2b0>)
 800075a:	801a      	strh	r2, [r3, #0]

	if( (start_address >= 0x08000000) && (start_address <= 0x080FFFFF) && ((start_address + firmware_length) <= 0x080FFFFF) && (firmware_length <= 0xFFFFF) ) // стартовый адресс для расчета контрольной суммы должен входить в диапазон основной памяти контроллера, длина прошивки не должна превышать длину памяти программ контроллера иначе при чтении будет хардфолт
 800075c:	4b79      	ldr	r3, [pc, #484]	; (8000944 <main+0x2a4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000764:	d31e      	bcc.n	80007a4 <main+0x104>
 8000766:	4b77      	ldr	r3, [pc, #476]	; (8000944 <main+0x2a4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800076e:	d219      	bcs.n	80007a4 <main+0x104>
 8000770:	4b74      	ldr	r3, [pc, #464]	; (8000944 <main+0x2a4>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b75      	ldr	r3, [pc, #468]	; (800094c <main+0x2ac>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4413      	add	r3, r2
 800077a:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800077e:	d211      	bcs.n	80007a4 <main+0x104>
 8000780:	4b72      	ldr	r3, [pc, #456]	; (800094c <main+0x2ac>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000788:	d20c      	bcs.n	80007a4 <main+0x104>
	{
		calculating_firmware_crc = CRC16((unsigned char*)start_address, firmware_length);
 800078a:	4b6e      	ldr	r3, [pc, #440]	; (8000944 <main+0x2a4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	4b6e      	ldr	r3, [pc, #440]	; (800094c <main+0x2ac>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	4610      	mov	r0, r2
 8000798:	f00d ffee 	bl	800e778 <CRC16>
 800079c:	4603      	mov	r3, r0
 800079e:	4a6d      	ldr	r2, [pc, #436]	; (8000954 <main+0x2b4>)
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e002      	b.n	80007aa <main+0x10a>
	}
	else
	{
		calculating_firmware_crc = 0;
 80007a4:	4b6b      	ldr	r3, [pc, #428]	; (8000954 <main+0x2b4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
	}



	if( (firmware_crc == calculating_firmware_crc) && (firmware_crc != 0) ) // если рассчетная контрольная сумма прошивки совпадает с указанной и не равна 0
 80007aa:	4b69      	ldr	r3, [pc, #420]	; (8000950 <main+0x2b0>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b68      	ldr	r3, [pc, #416]	; (8000954 <main+0x2b4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d111      	bne.n	80007dc <main+0x13c>
 80007b8:	4b65      	ldr	r3, [pc, #404]	; (8000950 <main+0x2b0>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00d      	beq.n	80007dc <main+0x13c>
	{


		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // записываем в регистры и переменную корректность прошивки
 80007c0:	2100      	movs	r1, #0
 80007c2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80007c6:	f00a fea3 	bl	800b510 <fm25v02_write>
		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x01);
 80007ca:	2101      	movs	r1, #1
 80007cc:	f240 201d 	movw	r0, #541	; 0x21d
 80007d0:	f00a fe9e 	bl	800b510 <fm25v02_write>
		bootloader_registers.firmware_correctness_reg = 0x0001;
 80007d4:	4b5a      	ldr	r3, [pc, #360]	; (8000940 <main+0x2a0>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	835a      	strh	r2, [r3, #26]
 80007da:	e00c      	b.n	80007f6 <main+0x156>

	else // если рассчетная контрольная сумма прошивки не совпадает с указанной
	{


		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // записываем в регистры и переменную ошибку контрольной суммы прошивки
 80007dc:	2100      	movs	r1, #0
 80007de:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80007e2:	f00a fe95 	bl	800b510 <fm25v02_write>
		fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x00);
 80007e6:	2100      	movs	r1, #0
 80007e8:	f240 201d 	movw	r0, #541	; 0x21d
 80007ec:	f00a fe90 	bl	800b510 <fm25v02_write>
		bootloader_registers.firmware_correctness_reg = 0x0000;
 80007f0:	4b53      	ldr	r3, [pc, #332]	; (8000940 <main+0x2a0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	835a      	strh	r2, [r3, #26]
	//fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x01);
	//bootloader_registers.firmware_correctness_reg = 0x0001;
	//-----------------------


  	if( bootloader_registers.working_mode_reg == 0 ) // если включен нормальный режим работы
 80007f6:	4b52      	ldr	r3, [pc, #328]	; (8000940 <main+0x2a0>)
 80007f8:	8b9b      	ldrh	r3, [r3, #28]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f040 80c5 	bne.w	800098a <main+0x2ea>
  	{
  		if(bootloader_registers.jump_attempt_reg < bootloader_registers.max_jump_attempt_reg)
 8000800:	4b4f      	ldr	r3, [pc, #316]	; (8000940 <main+0x2a0>)
 8000802:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8000804:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <main+0x2a0>)
 8000806:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000808:	429a      	cmp	r2, r3
 800080a:	f080 80bb 	bcs.w	8000984 <main+0x2e4>
  		{
  			if( bootloader_registers.firmware_correctness_reg == 1 ) // если прошивка корректна (контрольная сумма совпадает)
 800080e:	4b4c      	ldr	r3, [pc, #304]	; (8000940 <main+0x2a0>)
 8000810:	8b5b      	ldrh	r3, [r3, #26]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d14a      	bne.n	80008ac <main+0x20c>
  			{

  				fm25v02_write(2*FIRMWARE_CORRECTNESS_REG, 0x00); // обнуляем корректность прошивки
 8000816:	2100      	movs	r1, #0
 8000818:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800081c:	f00a fe78 	bl	800b510 <fm25v02_write>
  				fm25v02_write(2*FIRMWARE_CORRECTNESS_REG+1, 0x00);
 8000820:	2100      	movs	r1, #0
 8000822:	f240 201d 	movw	r0, #541	; 0x21d
 8000826:	f00a fe73 	bl	800b510 <fm25v02_write>
  				bootloader_registers.firmware_correctness_reg = 0x0000;
 800082a:	4b45      	ldr	r3, [pc, #276]	; (8000940 <main+0x2a0>)
 800082c:	2200      	movs	r2, #0
 800082e:	835a      	strh	r2, [r3, #26]

  				fm25v02_write(2*WORKING_MODE_REG, 0x00); // обнуляем корректность прошивки
 8000830:	2100      	movs	r1, #0
 8000832:	f240 201e 	movw	r0, #542	; 0x21e
 8000836:	f00a fe6b 	bl	800b510 <fm25v02_write>
  				fm25v02_write(2*WORKING_MODE_REG+1, 0x00);
 800083a:	2100      	movs	r1, #0
 800083c:	f240 201f 	movw	r0, #543	; 0x21f
 8000840:	f00a fe66 	bl	800b510 <fm25v02_write>
  				bootloader_registers.working_mode_reg = 0x0000;
 8000844:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <main+0x2a0>)
 8000846:	2200      	movs	r2, #0
 8000848:	839a      	strh	r2, [r3, #28]

  				fm25v02_read(271, &test_data1); // обнуляем регистр режима работы с номером 271 в fram памяти, нужно только для старой прошивки
 800084a:	4943      	ldr	r1, [pc, #268]	; (8000958 <main+0x2b8>)
 800084c:	f240 100f 	movw	r0, #271	; 0x10f
 8000850:	f00a fe24 	bl	800b49c <fm25v02_read>


  				HAL_UART_DeInit(&huart3);
 8000854:	4841      	ldr	r0, [pc, #260]	; (800095c <main+0x2bc>)
 8000856:	f004 fb1a 	bl	8004e8e <HAL_UART_DeInit>
  				HAL_SPI_DeInit(&hspi2);
 800085a:	4841      	ldr	r0, [pc, #260]	; (8000960 <main+0x2c0>)
 800085c:	f003 fad5 	bl	8003e0a <HAL_SPI_DeInit>
  				HAL_DMA_DeInit(&hdma_usart3_rx);
 8000860:	4840      	ldr	r0, [pc, #256]	; (8000964 <main+0x2c4>)
 8000862:	f001 f9e9 	bl	8001c38 <HAL_DMA_DeInit>
  				HAL_DMA_DeInit(&hdma_usart3_tx);
 8000866:	4840      	ldr	r0, [pc, #256]	; (8000968 <main+0x2c8>)
 8000868:	f001 f9e6 	bl	8001c38 <HAL_DMA_DeInit>

  				HAL_RCC_DeInit();
 800086c:	f003 f87c 	bl	8003968 <HAL_RCC_DeInit>

  				HAL_DeInit(); // деинициализируем HAL
 8000870:	f000 ffa8 	bl	80017c4 <HAL_DeInit>

  				JumpAddress = *(__IO uint32_t*) (ApplicationAddress2+4); // адрес перехода
 8000874:	4b3d      	ldr	r3, [pc, #244]	; (800096c <main+0x2cc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3304      	adds	r3, #4
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a3c      	ldr	r2, [pc, #240]	; (8000970 <main+0x2d0>)
 800087e:	6013      	str	r3, [r2, #0]
  				Jump_To_Application = (pFunction) JumpAddress; // приводим адрес к типу функции
 8000880:	4b3b      	ldr	r3, [pc, #236]	; (8000970 <main+0x2d0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <main+0x2d4>)
 8000888:	601a      	str	r2, [r3, #0]
  				__set_MSP (*(__IO uint32_t*) ApplicationAddress2);// устанавливаем указатель стека
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <main+0x2cc>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000894:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000898:	f383 8808 	msr	MSP, r3
}
 800089c:	bf00      	nop

  				SCB->VTOR = FLASH_BASE | 0x10000; // смещаем таблицу векторов прерываний
 800089e:	4b36      	ldr	r3, [pc, #216]	; (8000978 <main+0x2d8>)
 80008a0:	4a36      	ldr	r2, [pc, #216]	; (800097c <main+0x2dc>)
 80008a2:	609a      	str	r2, [r3, #8]

  				Jump_To_Application(); // переход к основной программе
 80008a4:	4b33      	ldr	r3, [pc, #204]	; (8000974 <main+0x2d4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4798      	blx	r3
 80008aa:	e06e      	b.n	800098a <main+0x2ea>

  			}
  			else if( bootloader_registers.firmware_correctness_reg == 0 )
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <main+0x2a0>)
 80008ae:	8b5b      	ldrh	r3, [r3, #26]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d16a      	bne.n	800098a <main+0x2ea>
  			{
  				fm25v02_read(2*JUMP_ATTEMPT_REG, &temp_h); // увеличиваем количество попыток перейти в основную программу
 80008b4:	f107 03ef 	add.w	r3, r7, #239	; 0xef
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 7009 	mov.w	r0, #548	; 0x224
 80008be:	f00a fded 	bl	800b49c <fm25v02_read>
  				fm25v02_read(2*JUMP_ATTEMPT_REG+1, &temp_l);
 80008c2:	f107 03ee 	add.w	r3, r7, #238	; 0xee
 80008c6:	4619      	mov	r1, r3
 80008c8:	f240 2025 	movw	r0, #549	; 0x225
 80008cc:	f00a fde6 	bl	800b49c <fm25v02_read>
  				temp_jump_attempt = (((uint16_t)temp_h)<<8)|((uint16_t)(temp_l));
 80008d0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 80008dc:	b21b      	sxth	r3, r3
 80008de:	4313      	orrs	r3, r2
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
  				temp_jump_attempt = temp_jump_attempt + 1;
 80008e6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80008ea:	3301      	adds	r3, #1
 80008ec:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
  				temp_h = (uint8_t)(temp_jump_attempt>>8);
 80008f0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80008f4:	0a1b      	lsrs	r3, r3, #8
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  				temp_l = (uint8_t)(temp_jump_attempt);
 80008fe:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
  				fm25v02_write(2*JUMP_ATTEMPT_REG, temp_h);
 8000908:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800090c:	4619      	mov	r1, r3
 800090e:	f44f 7009 	mov.w	r0, #548	; 0x224
 8000912:	f00a fdfd 	bl	800b510 <fm25v02_write>
  				fm25v02_write(2*JUMP_ATTEMPT_REG+1, temp_l);
 8000916:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800091a:	4619      	mov	r1, r3
 800091c:	f240 2025 	movw	r0, #549	; 0x225
 8000920:	f00a fdf6 	bl	800b510 <fm25v02_write>

  				HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f000 ffa1 	bl	800186c <HAL_Delay>

  				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <main+0x2e0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f04f 31ff 	mov.w	r1, #4294967295
 8000932:	4618      	mov	r0, r3
 8000934:	f005 fd1a 	bl	800636c <osMutexWait>
  				NVIC_SystemReset();
 8000938:	f7ff fe52 	bl	80005e0 <__NVIC_SystemReset>
 800093c:	40023800 	.word	0x40023800
 8000940:	20009db4 	.word	0x20009db4
 8000944:	200097e4 	.word	0x200097e4
 8000948:	200097f4 	.word	0x200097f4
 800094c:	200097f8 	.word	0x200097f8
 8000950:	200097de 	.word	0x200097de
 8000954:	200097ec 	.word	0x200097ec
 8000958:	200094c4 	.word	0x200094c4
 800095c:	2000806c 	.word	0x2000806c
 8000960:	20007fac 	.word	0x20007fac
 8000964:	2000800c 	.word	0x2000800c
 8000968:	200094dc 	.word	0x200094dc
 800096c:	20000000 	.word	0x20000000
 8000970:	200094c8 	.word	0x200094c8
 8000974:	20009544 	.word	0x20009544
 8000978:	e000ed00 	.word	0xe000ed00
 800097c:	08010000 	.word	0x08010000
 8000980:	200095d8 	.word	0x200095d8
  			}
  		}

  		else
  		{
  			start_default_task_delay = 100;
 8000984:	4b6f      	ldr	r3, [pc, #444]	; (8000b44 <main+0x4a4>)
 8000986:	2264      	movs	r2, #100	; 0x64
 8000988:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

    osMutexDef(UartMutex);
 800098a:	2300      	movs	r3, #0
 800098c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000990:	2300      	movs	r3, #0
 8000992:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8000996:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800099a:	4618      	mov	r0, r3
 800099c:	f005 fcce 	bl	800633c <osMutexCreate>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a69      	ldr	r2, [pc, #420]	; (8000b48 <main+0x4a8>)
 80009a4:	6013      	str	r3, [r2, #0]

    osMutexDef(Fm25v02Mutex);
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    Fm25v02MutexHandle = osMutexCreate(osMutex(Fm25v02Mutex));
 80009b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80009b6:	4618      	mov	r0, r3
 80009b8:	f005 fcc0 	bl	800633c <osMutexCreate>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a63      	ldr	r2, [pc, #396]	; (8000b4c <main+0x4ac>)
 80009c0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

    osSemaphoreDef(TransmissionState);
 80009c2:	2300      	movs	r3, #0
 80009c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    TransmissionStateHandle = osSemaphoreCreate(osSemaphore(TransmissionState), 1);
 80009ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009d2:	2101      	movs	r1, #1
 80009d4:	4618      	mov	r0, r3
 80009d6:	f005 fd4d 	bl	8006474 <osSemaphoreCreate>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a5c      	ldr	r2, [pc, #368]	; (8000b50 <main+0x4b0>)
 80009de:	6013      	str	r3, [r2, #0]

    osSemaphoreDef(ModbusPacketReceive);
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80009e6:	2300      	movs	r3, #0
 80009e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    ModbusPacketReceiveHandle = osSemaphoreCreate(osSemaphore(ModbusPacketReceive), 1);
 80009ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009f0:	2101      	movs	r1, #1
 80009f2:	4618      	mov	r0, r3
 80009f4:	f005 fd3e 	bl	8006474 <osSemaphoreCreate>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a56      	ldr	r2, [pc, #344]	; (8000b54 <main+0x4b4>)
 80009fc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

    osTimerDef(AT_Timer, Callback_AT_Timer);
 80009fe:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <main+0x4b8>)
 8000a00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000a04:	2300      	movs	r3, #0
 8000a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    AT_TimerHandle = osTimerCreate(osTimer(AT_Timer), osTimerOnce, NULL);
 8000a0a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 fbde 	bl	80061d4 <osTimerCreate>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a50      	ldr	r2, [pc, #320]	; (8000b5c <main+0x4bc>)
 8000a1c:	6013      	str	r3, [r2, #0]

    osTimerDef(Ring_Center_Timer, Callback_Ring_Center_Timer);
 8000a1e:	4b50      	ldr	r3, [pc, #320]	; (8000b60 <main+0x4c0>)
 8000a20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    Ring_Center_TimerHandle = osTimerCreate(osTimer(Ring_Center_Timer), osTimerOnce, NULL);
 8000a2a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f005 fbce 	bl	80061d4 <osTimerCreate>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a4a      	ldr	r2, [pc, #296]	; (8000b64 <main+0x4c4>)
 8000a3c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

    osMessageQDef(ModbusQueue, 256, uint8_t);
 8000a3e:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <main+0x4c8>)
 8000a40:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000a44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ModbusQueueHandle = osMessageCreate(osMessageQ(ModbusQueue), NULL);
 8000a4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f005 fdd3 	bl	80065fc <osMessageCreate>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4a44      	ldr	r2, [pc, #272]	; (8000b6c <main+0x4cc>)
 8000a5a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a5c:	4b44      	ldr	r3, [pc, #272]	; (8000b70 <main+0x4d0>)
 8000a5e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000a62:	461d      	mov	r5, r3
 8000a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a70:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f005 fb4b 	bl	8006112 <osThreadCreate>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a3d      	ldr	r2, [pc, #244]	; (8000b74 <main+0x4d4>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(M95Task, ThreadM95Task, osPriorityNormal, 0, 128);
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <main+0x4d8>)
 8000a84:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000a88:	461d      	mov	r5, r3
 8000a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  M95TaskHandle = osThreadCreate(osThread(M95Task), NULL);
 8000a96:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f005 fb38 	bl	8006112 <osThreadCreate>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4a35      	ldr	r2, [pc, #212]	; (8000b7c <main+0x4dc>)
 8000aa6:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusTask, ThreadModbusTask, osPriorityNormal, 0, 128);
 8000aa8:	4b35      	ldr	r3, [pc, #212]	; (8000b80 <main+0x4e0>)
 8000aaa:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000aae:	461d      	mov	r5, r3
 8000ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTaskHandle = osThreadCreate(osThread(ModbusTask), NULL);
 8000abc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f005 fb25 	bl	8006112 <osThreadCreate>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	4a2e      	ldr	r2, [pc, #184]	; (8000b84 <main+0x4e4>)
 8000acc:	6013      	str	r3, [r2, #0]

  osThreadDef(MainTask, ThreadMainTask, osPriorityNormal, 0, 128);
 8000ace:	4b2e      	ldr	r3, [pc, #184]	; (8000b88 <main+0x4e8>)
 8000ad0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000ad4:	461d      	mov	r5, r3
 8000ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ada:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ade:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8000ae2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f005 fb12 	bl	8006112 <osThreadCreate>
 8000aee:	4603      	mov	r3, r0
 8000af0:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <main+0x4ec>)
 8000af2:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusPacketTask, ThreadModbusPacketTask, osPriorityNormal, 0, 128);
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <main+0x4f0>)
 8000af6:	f107 0420 	add.w	r4, r7, #32
 8000afa:	461d      	mov	r5, r3
 8000afc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusPacketTaskHandle = osThreadCreate(osThread(ModbusPacketTask), NULL);
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f005 faff 	bl	8006112 <osThreadCreate>
 8000b14:	4603      	mov	r3, r0
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <main+0x4f4>)
 8000b18:	6013      	str	r3, [r2, #0]

  osThreadDef(ReadRegistersTask, ThreadReadRegistersTask, osPriorityNormal, 0, 128);
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <main+0x4f8>)
 8000b1c:	1d3c      	adds	r4, r7, #4
 8000b1e:	461d      	mov	r5, r3
 8000b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadRegistersTaskHandle = osThreadCreate(osThread(ReadRegistersTask), NULL);
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f005 faee 	bl	8006112 <osThreadCreate>
 8000b36:	4603      	mov	r3, r0
 8000b38:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <main+0x4fc>)
 8000b3a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b3c:	f005 fae2 	bl	8006104 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <main+0x4a0>
 8000b42:	bf00      	nop
 8000b44:	20000004 	.word	0x20000004
 8000b48:	200094d4 	.word	0x200094d4
 8000b4c:	200095d8 	.word	0x200095d8
 8000b50:	200097e8 	.word	0x200097e8
 8000b54:	200095b0 	.word	0x200095b0
 8000b58:	080010a9 	.word	0x080010a9
 8000b5c:	200094cc 	.word	0x200094cc
 8000b60:	080010c9 	.word	0x080010c9
 8000b64:	200094d8 	.word	0x200094d8
 8000b68:	0800f20c 	.word	0x0800f20c
 8000b6c:	200080c0 	.word	0x200080c0
 8000b70:	0800f21c 	.word	0x0800f21c
 8000b74:	20007fa8 	.word	0x20007fa8
 8000b78:	0800f238 	.word	0x0800f238
 8000b7c:	200095ac 	.word	0x200095ac
 8000b80:	0800f254 	.word	0x0800f254
 8000b84:	200095a8 	.word	0x200095a8
 8000b88:	0800f270 	.word	0x0800f270
 8000b8c:	200095a4 	.word	0x200095a4
 8000b90:	0800f28c 	.word	0x0800f28c
 8000b94:	20009540 	.word	0x20009540
 8000b98:	0800f2a8 	.word	0x0800f2a8
 8000b9c:	200080b0 	.word	0x200080b0

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	; 0x50
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2230      	movs	r2, #48	; 0x30
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00d fe4e 	bl	800e850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 030c 	add.w	r3, r7, #12
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <SystemClock_Config+0xd4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <SystemClock_Config+0xd4>)
 8000bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <SystemClock_Config+0xd4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <SystemClock_Config+0xd8>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a23      	ldr	r2, [pc, #140]	; (8000c78 <SystemClock_Config+0xd8>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <SystemClock_Config+0xd8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8000bfc:	230d      	movs	r3, #13
 8000bfe:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c06:	2301      	movs	r3, #1
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c18:	2319      	movs	r3, #25
 8000c1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c26:	2304      	movs	r3, #4
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2a:	f107 0320 	add.w	r3, r7, #32
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 f93e 	bl	8002eb0 <HAL_RCC_OscConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c3a:	f000 faa7 	bl	800118c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	230f      	movs	r3, #15
 8000c40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c42:	2302      	movs	r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c4a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2105      	movs	r1, #5
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 fb9f 	bl	80033a0 <HAL_RCC_ClockConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c68:	f000 fa90 	bl	800118c <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3750      	adds	r7, #80	; 0x50
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000

08000c7c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <MX_IWDG_Init+0x24>)
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <MX_IWDG_Init+0x28>)
 8000c84:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_IWDG_Init+0x24>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <MX_IWDG_Init+0x24>)
 8000c8e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c92:	609a      	str	r2, [r3, #8]
  //}
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200080b4 	.word	0x200080b4
 8000ca4:	40003000 	.word	0x40003000

08000ca8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_RTC_Init+0x80>)
 8000cc2:	4a1a      	ldr	r2, [pc, #104]	; (8000d2c <MX_RTC_Init+0x84>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_RTC_Init+0x80>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_RTC_Init+0x80>)
 8000cce:	227f      	movs	r2, #127	; 0x7f
 8000cd0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_RTC_Init+0x80>)
 8000cd4:	22ff      	movs	r2, #255	; 0xff
 8000cd6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_RTC_Init+0x80>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_RTC_Init+0x80>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MX_RTC_Init+0x80>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cea:	480f      	ldr	r0, [pc, #60]	; (8000d28 <MX_RTC_Init+0x80>)
 8000cec:	f002 ff0a 	bl	8003b04 <HAL_RTC_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000cf6:	f000 fa49 	bl	800118c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  //if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
  //{
    //Error_Handler();
  //}
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d12:	2301      	movs	r3, #1
 8000d14:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	70fb      	strb	r3, [r7, #3]
  //}
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200095b8 	.word	0x200095b8
 8000d2c:	40002800 	.word	0x40002800

08000d30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d36:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <MX_SPI2_Init+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d54:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d64:	2220      	movs	r2, #32
 8000d66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d68:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_SPI2_Init+0x64>)
 8000d82:	f002 ffb9 	bl	8003cf8 <HAL_SPI_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d8c:	f000 f9fe 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20007fac 	.word	0x20007fac
 8000d98:	40003800 	.word	0x40003800

08000d9c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000da2:	4a19      	ldr	r2, [pc, #100]	; (8000e08 <MX_SPI3_Init+0x6c>)
 8000da4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000da8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000db0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000db4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000dd2:	2220      	movs	r2, #32
 8000dd4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000dea:	220a      	movs	r2, #10
 8000dec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_SPI3_Init+0x68>)
 8000df0:	f002 ff82 	bl	8003cf8 <HAL_SPI_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000dfa:	f000 f9c7 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20009548 	.word	0x20009548
 8000e08:	40003c00 	.word	0x40003c00

08000e0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <MX_USART3_UART_Init+0x50>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_USART3_UART_Init+0x4c>)
 8000e44:	f003 ffd6 	bl	8004df4 <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e4e:	f000 f99d 	bl	800118c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2000806c 	.word	0x2000806c
 8000e5c:	40004800 	.word	0x40004800

08000e60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_DMA_Init+0x4c>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	; (8000eac <MX_DMA_Init+0x4c>)
 8000e70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MX_DMA_Init+0x4c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2105      	movs	r1, #5
 8000e86:	200c      	movs	r0, #12
 8000e88:	f000 fdf0 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e8c:	200c      	movs	r0, #12
 8000e8e:	f000 fe09 	bl	8001aa4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2105      	movs	r1, #5
 8000e96:	200e      	movs	r0, #14
 8000e98:	f000 fde8 	bl	8001a6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e9c:	200e      	movs	r0, #14
 8000e9e:	f000 fe01 	bl	8001aa4 <HAL_NVIC_EnableIRQ>

}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	4b71      	ldr	r3, [pc, #452]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a70      	ldr	r2, [pc, #448]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b6e      	ldr	r3, [pc, #440]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	4b6a      	ldr	r3, [pc, #424]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a69      	ldr	r2, [pc, #420]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b67      	ldr	r3, [pc, #412]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b63      	ldr	r3, [pc, #396]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a62      	ldr	r2, [pc, #392]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b60      	ldr	r3, [pc, #384]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b5c      	ldr	r3, [pc, #368]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a5b      	ldr	r2, [pc, #364]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b59      	ldr	r3, [pc, #356]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b55      	ldr	r3, [pc, #340]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a54      	ldr	r2, [pc, #336]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b52      	ldr	r3, [pc, #328]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b4e      	ldr	r3, [pc, #312]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a4d      	ldr	r2, [pc, #308]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b4b      	ldr	r3, [pc, #300]	; (8001090 <MX_GPIO_Init+0x1e0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f248 017e 	movw	r1, #32894	; 0x807e
 8000f74:	4847      	ldr	r0, [pc, #284]	; (8001094 <MX_GPIO_Init+0x1e4>)
 8000f76:	f001 ff81 	bl	8002e7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_15|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_1, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f242 0102 	movw	r1, #8194	; 0x2002
 8000f80:	4845      	ldr	r0, [pc, #276]	; (8001098 <MX_GPIO_Init+0x1e8>)
 8000f82:	f001 ff7b 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2103      	movs	r1, #3
 8000f8a:	4844      	ldr	r0, [pc, #272]	; (800109c <MX_GPIO_Init+0x1ec>)
 8000f8c:	f001 ff76 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f96:	4842      	ldr	r0, [pc, #264]	; (80010a0 <MX_GPIO_Init+0x1f0>)
 8000f98:	f001 ff70 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000fa2:	4840      	ldr	r0, [pc, #256]	; (80010a4 <MX_GPIO_Init+0x1f4>)
 8000fa4:	f001 ff6a 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fae:	483a      	ldr	r0, [pc, #232]	; (8001098 <MX_GPIO_Init+0x1e8>)
 8000fb0:	f001 ff64 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2120      	movs	r1, #32
 8000fb8:	4839      	ldr	r0, [pc, #228]	; (80010a0 <MX_GPIO_Init+0x1f0>)
 8000fba:	f001 ff5f 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000fbe:	237e      	movs	r3, #126	; 0x7e
 8000fc0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	482f      	ldr	r0, [pc, #188]	; (8001094 <MX_GPIO_Init+0x1e4>)
 8000fd6:	f001 fcb9 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC1 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_11;
 8000fda:	f642 0302 	movw	r3, #10242	; 0x2802
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4829      	ldr	r0, [pc, #164]	; (8001098 <MX_GPIO_Init+0x1e8>)
 8000ff4:	f001 fcaa 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	4823      	ldr	r0, [pc, #140]	; (800109c <MX_GPIO_Init+0x1ec>)
 8001010:	f001 fc9c 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800101e:	2302      	movs	r3, #2
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	4819      	ldr	r0, [pc, #100]	; (8001094 <MX_GPIO_Init+0x1e4>)
 800102e:	f001 fc8d 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_5;
 8001032:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	4815      	ldr	r0, [pc, #84]	; (80010a0 <MX_GPIO_Init+0x1f0>)
 800104c:	f001 fc7e 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001050:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800105a:	2302      	movs	r3, #2
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_GPIO_Init+0x1f4>)
 800106a:	f001 fc6f 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800106e:	2301      	movs	r3, #1
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_GPIO_Init+0x1e4>)
 8001082:	f001 fc63 	bl	800294c <HAL_GPIO_Init>

}
 8001086:	bf00      	nop
 8001088:	3730      	adds	r7, #48	; 0x30
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40021000 	.word	0x40021000
 8001098:	40020800 	.word	0x40020800
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400
 80010a4:	40020c00 	.word	0x40020c00

080010a8 <Callback_AT_Timer>:

/* USER CODE BEGIN 4 */

void Callback_AT_Timer(void const * argument)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]

	read_rx_state = NOT_ACTIVE;
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <Callback_AT_Timer+0x1c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]

}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	200095b4 	.word	0x200095b4

080010c8 <Callback_Ring_Center_Timer>:

void Callback_Ring_Center_Timer(void const * argument)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	modem_reset_state = 1;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <Callback_Ring_Center_Timer+0x1c>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2000080d 	.word	0x2000080d

080010e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  {
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	//HAL_IWDG_Refresh(&hiwdg);
	//LED_VD3_TOGGLE();

		spi_buf[0] = 0x07;
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <StartDefaultTask+0x70>)
 80010f2:	2207      	movs	r2, #7
 80010f4:	701a      	strb	r2, [r3, #0]
		spi_buf[1] = 0x40;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <StartDefaultTask+0x70>)
 80010f8:	2240      	movs	r2, #64	; 0x40
 80010fa:	705a      	strb	r2, [r3, #1]
		spi_buf[2] = 0x40;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <StartDefaultTask+0x70>)
 80010fe:	2240      	movs	r2, #64	; 0x40
 8001100:	709a      	strb	r2, [r3, #2]
		spi_buf[3] = 0x03;
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <StartDefaultTask+0x70>)
 8001104:	2203      	movs	r2, #3
 8001106:	70da      	strb	r2, [r3, #3]

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800110e:	4813      	ldr	r0, [pc, #76]	; (800115c <StartDefaultTask+0x74>)
 8001110:	f001 feb4 	bl	8002e7c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8001114:	2064      	movs	r0, #100	; 0x64
 8001116:	f000 fba9 	bl	800186c <HAL_Delay>
		while( HAL_SPI_Transmit(&hspi3, &spi_buf[0], 4, 100) != HAL_OK ){}
 800111a:	bf00      	nop
 800111c:	2364      	movs	r3, #100	; 0x64
 800111e:	2204      	movs	r2, #4
 8001120:	490d      	ldr	r1, [pc, #52]	; (8001158 <StartDefaultTask+0x70>)
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <StartDefaultTask+0x78>)
 8001124:	f002 fe99 	bl	8003e5a <HAL_SPI_Transmit>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f6      	bne.n	800111c <StartDefaultTask+0x34>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <StartDefaultTask+0x74>)
 8001136:	f001 fea1 	bl	8002e7c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 fb96 	bl	800186c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <StartDefaultTask+0x74>)
 8001148:	f001 fe98 	bl	8002e7c <HAL_GPIO_WritePin>

	osDelay(start_default_task_delay);
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <StartDefaultTask+0x7c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f005 f82a 	bl	80061aa <osDelay>
		spi_buf[0] = 0x07;
 8001156:	e7cb      	b.n	80010f0 <StartDefaultTask+0x8>
 8001158:	20008008 	.word	0x20008008
 800115c:	40020800 	.word	0x40020800
 8001160:	20009548 	.word	0x20009548
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d101      	bne.n	800117e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800117a:	f000 fb57 	bl	800182c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40010000 	.word	0x40010000

0800118c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	NVIC_SystemReset();
 8001190:	f7ff fa26 	bl	80005e0 <__NVIC_SystemReset>

08001194 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_MspInit+0x54>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a11      	ldr	r2, [pc, #68]	; (80011e8 <HAL_MspInit+0x54>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_MspInit+0x54>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_MspInit+0x54>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_MspInit+0x54>)
 80011c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c4:	6413      	str	r3, [r2, #64]	; 0x40
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_MspInit+0x54>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	210f      	movs	r1, #15
 80011d6:	f06f 0001 	mvn.w	r0, #1
 80011da:	f000 fc47 	bl	8001a6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <HAL_RTC_MspInit+0x4c>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d111      	bne.n	8001230 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800120c:	2302      	movs	r3, #2
 800120e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fac2 	bl	80037a4 <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001226:	f7ff ffb1 	bl	800118c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_RTC_MspInit+0x50>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40002800 	.word	0x40002800
 800123c:	42470e3c 	.word	0x42470e3c

08001240 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a33      	ldr	r2, [pc, #204]	; (800132c <HAL_SPI_MspInit+0xec>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d12d      	bne.n	80012be <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	4b32      	ldr	r3, [pc, #200]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a31      	ldr	r2, [pc, #196]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 800126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a2a      	ldr	r2, [pc, #168]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800129a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ac:	2305      	movs	r3, #5
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	481f      	ldr	r0, [pc, #124]	; (8001334 <HAL_SPI_MspInit+0xf4>)
 80012b8:	f001 fb48 	bl	800294c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012bc:	e031      	b.n	8001322 <HAL_SPI_MspInit+0xe2>
  else if(hspi->Instance==SPI3)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_SPI_MspInit+0xf8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d12c      	bne.n	8001322 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 80012d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6313      	str	r3, [r2, #48]	; 0x30
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_SPI_MspInit+0xf0>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001300:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001312:	2306      	movs	r3, #6
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <HAL_SPI_MspInit+0xfc>)
 800131e:	f001 fb15 	bl	800294c <HAL_GPIO_Init>
}
 8001322:	bf00      	nop
 8001324:	3730      	adds	r7, #48	; 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40003800 	.word	0x40003800
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400
 8001338:	40003c00 	.word	0x40003c00
 800133c:	40020800 	.word	0x40020800

08001340 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a11      	ldr	r2, [pc, #68]	; (8001394 <HAL_SPI_MspDeInit+0x54>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10b      	bne.n	800136a <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_SPI_MspDeInit+0x58>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_SPI_MspDeInit+0x58>)
 8001358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800135e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001362:	480e      	ldr	r0, [pc, #56]	; (800139c <HAL_SPI_MspDeInit+0x5c>)
 8001364:	f001 fc8e 	bl	8002c84 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8001368:	e00f      	b.n	800138a <HAL_SPI_MspDeInit+0x4a>
  else if(hspi->Instance==SPI3)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <HAL_SPI_MspDeInit+0x60>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d10a      	bne.n	800138a <HAL_SPI_MspDeInit+0x4a>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_SPI_MspDeInit+0x58>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_SPI_MspDeInit+0x58>)
 800137a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_12);
 8001380:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <HAL_SPI_MspDeInit+0x64>)
 8001386:	f001 fc7d 	bl	8002c84 <HAL_GPIO_DeInit>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40003800 	.word	0x40003800
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400
 80013a0:	40003c00 	.word	0x40003c00
 80013a4:	40020800 	.word	0x40020800

080013a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a4c      	ldr	r2, [pc, #304]	; (80014f8 <HAL_UART_MspInit+0x150>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	f040 8091 	bne.w	80014ee <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <HAL_UART_MspInit+0x154>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a49      	ldr	r2, [pc, #292]	; (80014fc <HAL_UART_MspInit+0x154>)
 80013d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_UART_MspInit+0x154>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	4b43      	ldr	r3, [pc, #268]	; (80014fc <HAL_UART_MspInit+0x154>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	4a42      	ldr	r2, [pc, #264]	; (80014fc <HAL_UART_MspInit+0x154>)
 80013f2:	f043 0302 	orr.w	r3, r3, #2
 80013f6:	6313      	str	r3, [r2, #48]	; 0x30
 80013f8:	4b40      	ldr	r3, [pc, #256]	; (80014fc <HAL_UART_MspInit+0x154>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001404:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001416:	2307      	movs	r3, #7
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4837      	ldr	r0, [pc, #220]	; (8001500 <HAL_UART_MspInit+0x158>)
 8001422:	f001 fa93 	bl	800294c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001426:	4b37      	ldr	r3, [pc, #220]	; (8001504 <HAL_UART_MspInit+0x15c>)
 8001428:	4a37      	ldr	r2, [pc, #220]	; (8001508 <HAL_UART_MspInit+0x160>)
 800142a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800142c:	4b35      	ldr	r3, [pc, #212]	; (8001504 <HAL_UART_MspInit+0x15c>)
 800142e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001432:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <HAL_UART_MspInit+0x15c>)
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800143a:	4b32      	ldr	r3, [pc, #200]	; (8001504 <HAL_UART_MspInit+0x15c>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_UART_MspInit+0x15c>)
 8001442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001446:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001448:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_UART_MspInit+0x15c>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_UART_MspInit+0x15c>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_UART_MspInit+0x15c>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_UART_MspInit+0x15c>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_UART_MspInit+0x15c>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001466:	4827      	ldr	r0, [pc, #156]	; (8001504 <HAL_UART_MspInit+0x15c>)
 8001468:	f000 fb38 	bl	8001adc <HAL_DMA_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001472:	f7ff fe8b 	bl	800118c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a22      	ldr	r2, [pc, #136]	; (8001504 <HAL_UART_MspInit+0x15c>)
 800147a:	635a      	str	r2, [r3, #52]	; 0x34
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <HAL_UART_MspInit+0x15c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <HAL_UART_MspInit+0x164>)
 8001484:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_UART_MspInit+0x168>)
 8001486:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_UART_MspInit+0x164>)
 800148a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800148e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001490:	4b1e      	ldr	r3, [pc, #120]	; (800150c <HAL_UART_MspInit+0x164>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_UART_MspInit+0x164>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800149c:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_UART_MspInit+0x164>)
 800149e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_UART_MspInit+0x164>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014aa:	4b18      	ldr	r3, [pc, #96]	; (800150c <HAL_UART_MspInit+0x164>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80014b0:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_UART_MspInit+0x164>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_UART_MspInit+0x164>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_UART_MspInit+0x164>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80014c2:	4812      	ldr	r0, [pc, #72]	; (800150c <HAL_UART_MspInit+0x164>)
 80014c4:	f000 fb0a 	bl	8001adc <HAL_DMA_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80014ce:	f7ff fe5d 	bl	800118c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <HAL_UART_MspInit+0x164>)
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38
 80014d8:	4a0c      	ldr	r2, [pc, #48]	; (800150c <HAL_UART_MspInit+0x164>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80014de:	2200      	movs	r2, #0
 80014e0:	2105      	movs	r1, #5
 80014e2:	2027      	movs	r0, #39	; 0x27
 80014e4:	f000 fac2 	bl	8001a6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014e8:	2027      	movs	r0, #39	; 0x27
 80014ea:	f000 fadb 	bl	8001aa4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40004800 	.word	0x40004800
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020400 	.word	0x40020400
 8001504:	200094dc 	.word	0x200094dc
 8001508:	40026058 	.word	0x40026058
 800150c:	2000800c 	.word	0x2000800c
 8001510:	40026028 	.word	0x40026028

08001514 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART3)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a0f      	ldr	r2, [pc, #60]	; (8001560 <HAL_UART_MspDeInit+0x4c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d117      	bne.n	8001556 <HAL_UART_MspDeInit+0x42>
  {
  /* USER CODE BEGIN USART3_MspDeInit 0 */

  /* USER CODE END USART3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART3_CLK_DISABLE();
 8001526:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_UART_MspDeInit+0x50>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <HAL_UART_MspDeInit+0x50>)
 800152c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 8001532:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <HAL_UART_MspDeInit+0x54>)
 8001538:	f001 fba4 	bl	8002c84 <HAL_GPIO_DeInit>

    /* USART3 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fb79 	bl	8001c38 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fb74 	bl	8001c38 <HAL_DMA_DeInit>

    /* USART3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001550:	2027      	movs	r0, #39	; 0x27
 8001552:	f000 fab5 	bl	8001ac0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40004800 	.word	0x40004800
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400

0800156c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800157c:	2200      	movs	r2, #0
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	2019      	movs	r0, #25
 8001582:	f000 fa73 	bl	8001a6c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001586:	2019      	movs	r0, #25
 8001588:	f000 fa8c 	bl	8001aa4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_InitTick+0xa4>)
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_InitTick+0xa4>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6453      	str	r3, [r2, #68]	; 0x44
 800159c:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_InitTick+0xa4>)
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015a8:	f107 0210 	add.w	r2, r7, #16
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4611      	mov	r1, r2
 80015b2:	4618      	mov	r0, r3
 80015b4:	f002 f8c4 	bl	8003740 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80015b8:	f002 f8ae 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 80015bc:	4603      	mov	r3, r0
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <HAL_InitTick+0xa8>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0c9b      	lsrs	r3, r3, #18
 80015cc:	3b01      	subs	r3, #1
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_InitTick+0xac>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <HAL_InitTick+0xb0>)
 80015d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_InitTick+0xac>)
 80015d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80015de:	4a0e      	ldr	r2, [pc, #56]	; (8001618 <HAL_InitTick+0xac>)
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_InitTick+0xac>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_InitTick+0xac>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <HAL_InitTick+0xac>)
 80015f2:	f003 f951 	bl	8004898 <HAL_TIM_Base_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d104      	bne.n	8001606 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <HAL_InitTick+0xac>)
 80015fe:	f003 f9a5 	bl	800494c <HAL_TIM_Base_Start_IT>
 8001602:	4603      	mov	r3, r0
 8001604:	e000      	b.n	8001608 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3730      	adds	r7, #48	; 0x30
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	431bde83 	.word	0x431bde83
 8001618:	200097fc 	.word	0x200097fc
 800161c:	40010000 	.word	0x40010000

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler+0x4>

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <DMA1_Stream1_IRQHandler+0x10>)
 8001652:	f000 fc39 	bl	8001ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000800c 	.word	0x2000800c

08001660 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001664:	4802      	ldr	r0, [pc, #8]	; (8001670 <DMA1_Stream3_IRQHandler+0x10>)
 8001666:	f000 fc2f 	bl	8001ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200094dc 	.word	0x200094dc

08001674 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800167a:	f003 f9d7 	bl	8004a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200097fc 	.word	0x200097fc

08001688 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800168c:	4802      	ldr	r0, [pc, #8]	; (8001698 <USART3_IRQHandler+0x10>)
 800168e:	f003 fcdb 	bl	8005048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000806c 	.word	0x2000806c

0800169c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016a4:	4a14      	ldr	r2, [pc, #80]	; (80016f8 <_sbrk+0x5c>)
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <_sbrk+0x60>)
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <_sbrk+0x64>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <_sbrk+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d207      	bcs.n	80016dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016cc:	f00d f886 	bl	800e7dc <__errno>
 80016d0:	4603      	mov	r3, r0
 80016d2:	220c      	movs	r2, #12
 80016d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e009      	b.n	80016f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016e2:	4b07      	ldr	r3, [pc, #28]	; (8001700 <_sbrk+0x64>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <_sbrk+0x64>)
 80016ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ee:	68fb      	ldr	r3, [r7, #12]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20020000 	.word	0x20020000
 80016fc:	00000400 	.word	0x00000400
 8001700:	20000810 	.word	0x20000810
 8001704:	20009f50 	.word	0x20009f50

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001764 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001732:	490e      	ldr	r1, [pc, #56]	; (800176c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001748:	4c0b      	ldr	r4, [pc, #44]	; (8001778 <LoopFillZerobss+0x26>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001756:	f7ff ffd7 	bl	8001708 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175a:	f00d f845 	bl	800e7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7fe ff9f 	bl	80006a0 <main>
  bx  lr    
 8001762:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001764:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001770:	0800f7a0 	.word	0x0800f7a0
  ldr r2, =_sbss
 8001774:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001778:	20009f50 	.word	0x20009f50

0800177c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <HAL_Init+0x40>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <HAL_Init+0x40>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x40>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f954 	bl	8001a56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	200f      	movs	r0, #15
 80017b0:	f7ff fedc 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fcee 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80017c8:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_DeInit+0x54>)
 80017ca:	f04f 32ff 	mov.w	r2, #4294967295
 80017ce:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_DeInit+0x54>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_DeInit+0x54>)
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_DeInit+0x54>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_DeInit+0x54>)
 80017e6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ea:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_DeInit+0x54>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_DeInit+0x54>)
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80017fa:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_DeInit+0x54>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_DeInit+0x54>)
 8001802:	f04f 32ff 	mov.w	r2, #4294967295
 8001806:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_DeInit+0x54>)
 800180a:	2200      	movs	r2, #0
 800180c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800180e:	f000 f805 	bl	800181c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800

0800181c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x20>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x24>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4413      	add	r3, r2
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_IncTick+0x24>)
 800183e:	6013      	str	r3, [r2, #0]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000010 	.word	0x20000010
 8001850:	20009844 	.word	0x20009844

08001854 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return uwTick;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <HAL_GetTick+0x14>)
 800185a:	681b      	ldr	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20009844 	.word	0x20009844

0800186c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001874:	f7ff ffee 	bl	8001854 <HAL_GetTick>
 8001878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d005      	beq.n	8001892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001886:	4b0a      	ldr	r3, [pc, #40]	; (80018b0 <HAL_Delay+0x44>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001892:	bf00      	nop
 8001894:	f7ff ffde 	bl	8001854 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d8f7      	bhi.n	8001894 <HAL_Delay+0x28>
  {
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000010 	.word	0x20000010

080018b4 <__NVIC_SetPriorityGrouping>:
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_GetPriorityGrouping>:
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <__NVIC_GetPriorityGrouping+0x18>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	f003 0307 	and.w	r3, r3, #7
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_EnableIRQ>:
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db0b      	blt.n	8001942 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	4907      	ldr	r1, [pc, #28]	; (8001950 <__NVIC_EnableIRQ+0x38>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2001      	movs	r0, #1
 800193a:	fa00 f202 	lsl.w	r2, r0, r2
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000e100 	.word	0xe000e100

08001954 <__NVIC_DisableIRQ>:
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db12      	blt.n	800198c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	490a      	ldr	r1, [pc, #40]	; (8001998 <__NVIC_DisableIRQ+0x44>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2001      	movs	r0, #1
 8001976:	fa00 f202 	lsl.w	r2, r0, r2
 800197a:	3320      	adds	r3, #32
 800197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8001980:	f3bf 8f4f 	dsb	sy
}
 8001984:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001986:	f3bf 8f6f 	isb	sy
}
 800198a:	bf00      	nop
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ff28 	bl	80018b4 <__NVIC_SetPriorityGrouping>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7e:	f7ff ff3d 	bl	80018fc <__NVIC_GetPriorityGrouping>
 8001a82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	6978      	ldr	r0, [r7, #20]
 8001a8a:	f7ff ffb1 	bl	80019f0 <NVIC_EncodePriority>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff80 	bl	800199c <__NVIC_SetPriority>
}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff30 	bl	8001918 <__NVIC_EnableIRQ>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff ff40 	bl	8001954 <__NVIC_DisableIRQ>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff feb4 	bl	8001854 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e099      	b.n	8001c2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2202      	movs	r2, #2
 8001afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0201 	bic.w	r2, r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b18:	e00f      	b.n	8001b3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b1a:	f7ff fe9b 	bl	8001854 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d908      	bls.n	8001b3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2203      	movs	r2, #3
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e078      	b.n	8001c2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e8      	bne.n	8001b1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_DMA_Init+0x158>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d107      	bne.n	8001ba4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f023 0307 	bic.w	r3, r3, #7
 8001bba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d117      	bne.n	8001bfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00e      	beq.n	8001bfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 fb5f 	bl	80022a4 <DMA_CheckFifoParam>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2240      	movs	r2, #64	; 0x40
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e016      	b.n	8001c2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 fb16 	bl	8002238 <DMA_CalcBaseAndBitshift>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c14:	223f      	movs	r2, #63	; 0x3f
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	f010803f 	.word	0xf010803f

08001c38 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e050      	b.n	8001cec <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d101      	bne.n	8001c5a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
 8001c58:	e048      	b.n	8001cec <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0201 	bic.w	r2, r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2221      	movs	r2, #33	; 0x21
 8001c98:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 facc 	bl	8002238 <DMA_CalcBaseAndBitshift>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	223f      	movs	r2, #63	; 0x3f
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
 8001d00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d02:	2300      	movs	r3, #0
 8001d04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_DMA_Start_IT+0x26>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e040      	b.n	8001d9c <HAL_DMA_Start_IT+0xa8>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d12f      	bne.n	8001d8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2202      	movs	r2, #2
 8001d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 fa4a 	bl	80021dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4c:	223f      	movs	r2, #63	; 0x3f
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0216 	orr.w	r2, r2, #22
 8001d62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0208 	orr.w	r2, r2, #8
 8001d7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	e005      	b.n	8001d9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
 8001d98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001db2:	f7ff fd4f 	bl	8001854 <HAL_GetTick>
 8001db6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d008      	beq.n	8001dd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e052      	b.n	8001e7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0216 	bic.w	r2, r2, #22
 8001de4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <HAL_DMA_Abort+0x62>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0208 	bic.w	r2, r2, #8
 8001e14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e26:	e013      	b.n	8001e50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e28:	f7ff fd14 	bl	8001854 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d90c      	bls.n	8001e50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e015      	b.n	8001e7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1e4      	bne.n	8001e28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	223f      	movs	r2, #63	; 0x3f
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d004      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00c      	b.n	8001ebc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ed4:	4b92      	ldr	r3, [pc, #584]	; (8002120 <HAL_DMA_IRQHandler+0x258>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a92      	ldr	r2, [pc, #584]	; (8002124 <HAL_DMA_IRQHandler+0x25c>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0a9b      	lsrs	r3, r3, #10
 8001ee0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01a      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0204 	bic.w	r2, r2, #4
 8001f1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2208      	movs	r2, #8
 8001f22:	409a      	lsls	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	2201      	movs	r2, #1
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d012      	beq.n	8001f6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	2201      	movs	r2, #1
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	f043 0202 	orr.w	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	2204      	movs	r2, #4
 8001f70:	409a      	lsls	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d012      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f043 0204 	orr.w	r2, r3, #4
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d043      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d03c      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d018      	beq.n	800200a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d108      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d024      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
 8001ff6:	e01f      	b.n	8002038 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
 8002008:	e016      	b.n	8002038 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0208 	bic.w	r2, r2, #8
 8002026:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	2220      	movs	r2, #32
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 808e 	beq.w	8002166 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8086 	beq.w	8002166 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	2220      	movs	r2, #32
 8002060:	409a      	lsls	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b05      	cmp	r3, #5
 8002070:	d136      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0216 	bic.w	r2, r2, #22
 8002080:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002090:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <HAL_DMA_IRQHandler+0x1da>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0208 	bic.w	r2, r2, #8
 80020b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	223f      	movs	r2, #63	; 0x3f
 80020b8:	409a      	lsls	r2, r3
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d07d      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
        }
        return;
 80020de:	e078      	b.n	80021d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01c      	beq.n	8002128 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d108      	bne.n	800210e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	2b00      	cmp	r3, #0
 8002102:	d030      	beq.n	8002166 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	e02b      	b.n	8002166 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d027      	beq.n	8002166 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
 800211e:	e022      	b.n	8002166 <HAL_DMA_IRQHandler+0x29e>
 8002120:	20000008 	.word	0x20000008
 8002124:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0210 	bic.w	r2, r2, #16
 8002144:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	2b00      	cmp	r3, #0
 800216c:	d032      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d022      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2205      	movs	r2, #5
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	3301      	adds	r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	429a      	cmp	r2, r3
 800219c:	d307      	bcc.n	80021ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f2      	bne.n	8002192 <HAL_DMA_IRQHandler+0x2ca>
 80021ac:	e000      	b.n	80021b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021ae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
 80021d0:	e000      	b.n	80021d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021d2:	bf00      	nop
    }
  }
}
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop

080021dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b40      	cmp	r3, #64	; 0x40
 8002208:	d108      	bne.n	800221c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800221a:	e007      	b.n	800222c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	3b10      	subs	r3, #16
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <DMA_CalcBaseAndBitshift+0x64>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d909      	bls.n	800227a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800226e:	f023 0303 	bic.w	r3, r3, #3
 8002272:	1d1a      	adds	r2, r3, #4
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	659a      	str	r2, [r3, #88]	; 0x58
 8002278:	e007      	b.n	800228a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002282:	f023 0303 	bic.w	r3, r3, #3
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800228e:	4618      	mov	r0, r3
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	aaaaaaab 	.word	0xaaaaaaab
 80022a0:	0800f4f4 	.word	0x0800f4f4

080022a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d11f      	bne.n	80022fe <DMA_CheckFifoParam+0x5a>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d856      	bhi.n	8002372 <DMA_CheckFifoParam+0xce>
 80022c4:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <DMA_CheckFifoParam+0x28>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022ef 	.word	0x080022ef
 80022d4:	080022dd 	.word	0x080022dd
 80022d8:	08002373 	.word	0x08002373
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d046      	beq.n	8002376 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ec:	e043      	b.n	8002376 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022f6:	d140      	bne.n	800237a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fc:	e03d      	b.n	800237a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002306:	d121      	bne.n	800234c <DMA_CheckFifoParam+0xa8>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d837      	bhi.n	800237e <DMA_CheckFifoParam+0xda>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <DMA_CheckFifoParam+0x70>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002325 	.word	0x08002325
 8002318:	0800232b 	.word	0x0800232b
 800231c:	08002325 	.word	0x08002325
 8002320:	0800233d 	.word	0x0800233d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
      break;
 8002328:	e030      	b.n	800238c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d025      	beq.n	8002382 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233a:	e022      	b.n	8002382 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002344:	d11f      	bne.n	8002386 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800234a:	e01c      	b.n	8002386 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d903      	bls.n	800235a <DMA_CheckFifoParam+0xb6>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d003      	beq.n	8002360 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002358:	e018      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
      break;
 800235e:	e015      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00e      	beq.n	800238a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
      break;
 8002370:	e00b      	b.n	800238a <DMA_CheckFifoParam+0xe6>
      break;
 8002372:	bf00      	nop
 8002374:	e00a      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
 8002378:	e008      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 800237a:	bf00      	nop
 800237c:	e006      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 800237e:	bf00      	nop
 8002380:	e004      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 8002382:	bf00      	nop
 8002384:	e002      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;   
 8002386:	bf00      	nop
 8002388:	e000      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 800238a:	bf00      	nop
    }
  } 
  
  return status; 
 800238c:	7bfb      	ldrb	r3, [r7, #15]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop

0800239c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_FLASH_Program+0xa0>)
 80023b0:	7e1b      	ldrb	r3, [r3, #24]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_FLASH_Program+0x1e>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e03b      	b.n	8002432 <HAL_FLASH_Program+0x96>
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_FLASH_Program+0xa0>)
 80023bc:	2201      	movs	r2, #1
 80023be:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023c4:	f000 f870 	bl	80024a8 <FLASH_WaitForLastOperation>
 80023c8:	4603      	mov	r3, r0
 80023ca:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80023cc:	7dfb      	ldrb	r3, [r7, #23]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d12b      	bne.n	800242a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d105      	bne.n	80023e4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80023d8:	783b      	ldrb	r3, [r7, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	68b8      	ldr	r0, [r7, #8]
 80023de:	f000 f91b 	bl	8002618 <FLASH_Program_Byte>
 80023e2:	e016      	b.n	8002412 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80023ea:	883b      	ldrh	r3, [r7, #0]
 80023ec:	4619      	mov	r1, r3
 80023ee:	68b8      	ldr	r0, [r7, #8]
 80023f0:	f000 f8ee 	bl	80025d0 <FLASH_Program_HalfWord>
 80023f4:	e00d      	b.n	8002412 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d105      	bne.n	8002408 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4619      	mov	r1, r3
 8002400:	68b8      	ldr	r0, [r7, #8]
 8002402:	f000 f8c3 	bl	800258c <FLASH_Program_Word>
 8002406:	e004      	b.n	8002412 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800240c:	68b8      	ldr	r0, [r7, #8]
 800240e:	f000 f88b 	bl	8002528 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002412:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002416:	f000 f847 	bl	80024a8 <FLASH_WaitForLastOperation>
 800241a:	4603      	mov	r3, r0
 800241c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_FLASH_Program+0xa4>)
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	4a07      	ldr	r2, [pc, #28]	; (8002440 <HAL_FLASH_Program+0xa4>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <HAL_FLASH_Program+0xa0>)
 800242c:	2200      	movs	r2, #0
 800242e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002430:	7dfb      	ldrb	r3, [r7, #23]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20009848 	.word	0x20009848
 8002440:	40023c00 	.word	0x40023c00

08002444 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_FLASH_Unlock+0x38>)
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	da0b      	bge.n	800246e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_FLASH_Unlock+0x38>)
 8002458:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_FLASH_Unlock+0x3c>)
 800245a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <HAL_FLASH_Unlock+0x38>)
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <HAL_FLASH_Unlock+0x40>)
 8002460:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_FLASH_Unlock+0x38>)
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	da01      	bge.n	800246e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800246e:	79fb      	ldrb	r3, [r7, #7]
}
 8002470:	4618      	mov	r0, r3
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40023c00 	.word	0x40023c00
 8002480:	45670123 	.word	0x45670123
 8002484:	cdef89ab 	.word	0xcdef89ab

08002488 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_FLASH_Lock+0x1c>)
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_FLASH_Lock+0x1c>)
 8002492:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002496:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40023c00 	.word	0x40023c00

080024a8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <FLASH_WaitForLastOperation+0x78>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80024ba:	f7ff f9cb 	bl	8001854 <HAL_GetTick>
 80024be:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80024c0:	e010      	b.n	80024e4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d00c      	beq.n	80024e4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d007      	beq.n	80024e0 <FLASH_WaitForLastOperation+0x38>
 80024d0:	f7ff f9c0 	bl	8001854 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d201      	bcs.n	80024e4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e019      	b.n	8002518 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <FLASH_WaitForLastOperation+0x7c>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e8      	bne.n	80024c2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <FLASH_WaitForLastOperation+0x7c>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80024fc:	4b09      	ldr	r3, [pc, #36]	; (8002524 <FLASH_WaitForLastOperation+0x7c>)
 80024fe:	2201      	movs	r2, #1
 8002500:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002502:	4b08      	ldr	r3, [pc, #32]	; (8002524 <FLASH_WaitForLastOperation+0x7c>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800250e:	f000 f8a5 	bl	800265c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
  
}  
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20009848 	.word	0x20009848
 8002524:	40023c00 	.word	0x40023c00

08002528 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <FLASH_Program_DoubleWord+0x60>)
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	4a13      	ldr	r2, [pc, #76]	; (8002588 <FLASH_Program_DoubleWord+0x60>)
 800253a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <FLASH_Program_DoubleWord+0x60>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	4a10      	ldr	r2, [pc, #64]	; (8002588 <FLASH_Program_DoubleWord+0x60>)
 8002546:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800254a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <FLASH_Program_DoubleWord+0x60>)
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	4a0d      	ldr	r2, [pc, #52]	; (8002588 <FLASH_Program_DoubleWord+0x60>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800255e:	f3bf 8f6f 	isb	sy
}
 8002562:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002564:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	000a      	movs	r2, r1
 8002572:	2300      	movs	r3, #0
 8002574:	68f9      	ldr	r1, [r7, #12]
 8002576:	3104      	adds	r1, #4
 8002578:	4613      	mov	r3, r2
 800257a:	600b      	str	r3, [r1, #0]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40023c00 	.word	0x40023c00

0800258c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <FLASH_Program_Word+0x40>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <FLASH_Program_Word+0x40>)
 800259c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <FLASH_Program_Word+0x40>)
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <FLASH_Program_Word+0x40>)
 80025a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <FLASH_Program_Word+0x40>)
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	4a06      	ldr	r2, [pc, #24]	; (80025cc <FLASH_Program_Word+0x40>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	601a      	str	r2, [r3, #0]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40023c00 	.word	0x40023c00

080025d0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <FLASH_Program_HalfWord+0x44>)
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <FLASH_Program_HalfWord+0x44>)
 80025e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <FLASH_Program_HalfWord+0x44>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4a09      	ldr	r2, [pc, #36]	; (8002614 <FLASH_Program_HalfWord+0x44>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <FLASH_Program_HalfWord+0x44>)
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	4a06      	ldr	r2, [pc, #24]	; (8002614 <FLASH_Program_HalfWord+0x44>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	801a      	strh	r2, [r3, #0]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40023c00 	.word	0x40023c00

08002618 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <FLASH_Program_Byte+0x40>)
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	4a0b      	ldr	r2, [pc, #44]	; (8002658 <FLASH_Program_Byte+0x40>)
 800262a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800262e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <FLASH_Program_Byte+0x40>)
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <FLASH_Program_Byte+0x40>)
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <FLASH_Program_Byte+0x40>)
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	4a06      	ldr	r2, [pc, #24]	; (8002658 <FLASH_Program_Byte+0x40>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	78fa      	ldrb	r2, [r7, #3]
 8002648:	701a      	strb	r2, [r3, #0]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40023c00 	.word	0x40023c00

0800265c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002660:	4b27      	ldr	r3, [pc, #156]	; (8002700 <FLASH_SetErrorCode+0xa4>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <FLASH_SetErrorCode+0xa8>)
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	4a23      	ldr	r2, [pc, #140]	; (8002704 <FLASH_SetErrorCode+0xa8>)
 8002676:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002678:	4b21      	ldr	r3, [pc, #132]	; (8002700 <FLASH_SetErrorCode+0xa4>)
 800267a:	2210      	movs	r2, #16
 800267c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <FLASH_SetErrorCode+0xa4>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <FLASH_SetErrorCode+0xa8>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f043 0308 	orr.w	r3, r3, #8
 8002692:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <FLASH_SetErrorCode+0xa8>)
 8002694:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <FLASH_SetErrorCode+0xa4>)
 8002698:	2220      	movs	r2, #32
 800269a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <FLASH_SetErrorCode+0xa4>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <FLASH_SetErrorCode+0xa8>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <FLASH_SetErrorCode+0xa8>)
 80026b2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <FLASH_SetErrorCode+0xa4>)
 80026b6:	2240      	movs	r2, #64	; 0x40
 80026b8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <FLASH_SetErrorCode+0xa4>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80026c6:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <FLASH_SetErrorCode+0xa8>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f043 0302 	orr.w	r3, r3, #2
 80026ce:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <FLASH_SetErrorCode+0xa8>)
 80026d0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <FLASH_SetErrorCode+0xa4>)
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <FLASH_SetErrorCode+0xa4>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80026e4:	4b07      	ldr	r3, [pc, #28]	; (8002704 <FLASH_SetErrorCode+0xa8>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f043 0320 	orr.w	r3, r3, #32
 80026ec:	4a05      	ldr	r2, [pc, #20]	; (8002704 <FLASH_SetErrorCode+0xa8>)
 80026ee:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <FLASH_SetErrorCode+0xa4>)
 80026f2:	2202      	movs	r2, #2
 80026f4:	60da      	str	r2, [r3, #12]
  }
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40023c00 	.word	0x40023c00
 8002704:	20009848 	.word	0x20009848

08002708 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800271a:	4b31      	ldr	r3, [pc, #196]	; (80027e0 <HAL_FLASHEx_Erase+0xd8>)
 800271c:	7e1b      	ldrb	r3, [r3, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_FLASHEx_Erase+0x1e>
 8002722:	2302      	movs	r3, #2
 8002724:	e058      	b.n	80027d8 <HAL_FLASHEx_Erase+0xd0>
 8002726:	4b2e      	ldr	r3, [pc, #184]	; (80027e0 <HAL_FLASHEx_Erase+0xd8>)
 8002728:	2201      	movs	r2, #1
 800272a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800272c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002730:	f7ff feba 	bl	80024a8 <FLASH_WaitForLastOperation>
 8002734:	4603      	mov	r3, r0
 8002736:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002738:	7bfb      	ldrb	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d148      	bne.n	80027d0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f04f 32ff 	mov.w	r2, #4294967295
 8002744:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d115      	bne.n	800277a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f000 f844 	bl	80027e8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002760:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002764:	f7ff fea0 	bl	80024a8 <FLASH_WaitForLastOperation>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_FLASHEx_Erase+0xdc>)
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_FLASHEx_Erase+0xdc>)
 8002772:	f023 0304 	bic.w	r3, r3, #4
 8002776:	6113      	str	r3, [r2, #16]
 8002778:	e028      	b.n	80027cc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	e01c      	b.n	80027bc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	b2db      	uxtb	r3, r3
 8002788:	4619      	mov	r1, r3
 800278a:	68b8      	ldr	r0, [r7, #8]
 800278c:	f000 f850 	bl	8002830 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002790:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002794:	f7ff fe88 	bl	80024a8 <FLASH_WaitForLastOperation>
 8002798:	4603      	mov	r3, r0
 800279a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_FLASHEx_Erase+0xdc>)
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <HAL_FLASHEx_Erase+0xdc>)
 80027a2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80027a6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	601a      	str	r2, [r3, #0]
          break;
 80027b4:	e00a      	b.n	80027cc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3301      	adds	r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4413      	add	r3, r2
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d3da      	bcc.n	8002782 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80027cc:	f000 f878 	bl	80028c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <HAL_FLASHEx_Erase+0xd8>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	761a      	strb	r2, [r3, #24]

  return status;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20009848 	.word	0x20009848
 80027e4:	40023c00 	.word	0x40023c00

080027e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	6039      	str	r1, [r7, #0]
 80027f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80027f4:	4b0d      	ldr	r3, [pc, #52]	; (800282c <FLASH_MassErase+0x44>)
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	4a0c      	ldr	r2, [pc, #48]	; (800282c <FLASH_MassErase+0x44>)
 80027fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <FLASH_MassErase+0x44>)
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	4a09      	ldr	r2, [pc, #36]	; (800282c <FLASH_MassErase+0x44>)
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800280c:	4b07      	ldr	r3, [pc, #28]	; (800282c <FLASH_MassErase+0x44>)
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	4313      	orrs	r3, r2
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <FLASH_MassErase+0x44>)
 8002818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281c:	6113      	str	r3, [r2, #16]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00

08002830 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	460b      	mov	r3, r1
 800283a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002846:	2300      	movs	r3, #0
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	e010      	b.n	800286e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d103      	bne.n	800285a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002852:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	e009      	b.n	800286e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d103      	bne.n	8002868 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e002      	b.n	800286e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002868:	f44f 7340 	mov.w	r3, #768	; 0x300
 800286c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800286e:	4b13      	ldr	r3, [pc, #76]	; (80028bc <FLASH_Erase_Sector+0x8c>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	4a12      	ldr	r2, [pc, #72]	; (80028bc <FLASH_Erase_Sector+0x8c>)
 8002874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002878:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <FLASH_Erase_Sector+0x8c>)
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	490f      	ldr	r1, [pc, #60]	; (80028bc <FLASH_Erase_Sector+0x8c>)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <FLASH_Erase_Sector+0x8c>)
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	4a0c      	ldr	r2, [pc, #48]	; (80028bc <FLASH_Erase_Sector+0x8c>)
 800288c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002890:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <FLASH_Erase_Sector+0x8c>)
 8002894:	691a      	ldr	r2, [r3, #16]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4313      	orrs	r3, r2
 800289c:	4a07      	ldr	r2, [pc, #28]	; (80028bc <FLASH_Erase_Sector+0x8c>)
 800289e:	f043 0302 	orr.w	r3, r3, #2
 80028a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <FLASH_Erase_Sector+0x8c>)
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <FLASH_Erase_Sector+0x8c>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	6113      	str	r3, [r2, #16]
}
 80028b0:	bf00      	nop
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40023c00 	.word	0x40023c00

080028c0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80028c4:	4b20      	ldr	r3, [pc, #128]	; (8002948 <FLASH_FlushCaches+0x88>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d017      	beq.n	8002900 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <FLASH_FlushCaches+0x88>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <FLASH_FlushCaches+0x88>)
 80028d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028da:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80028dc:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <FLASH_FlushCaches+0x88>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a19      	ldr	r2, [pc, #100]	; (8002948 <FLASH_FlushCaches+0x88>)
 80028e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	4b17      	ldr	r3, [pc, #92]	; (8002948 <FLASH_FlushCaches+0x88>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a16      	ldr	r2, [pc, #88]	; (8002948 <FLASH_FlushCaches+0x88>)
 80028ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028f2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <FLASH_FlushCaches+0x88>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a13      	ldr	r2, [pc, #76]	; (8002948 <FLASH_FlushCaches+0x88>)
 80028fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028fe:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <FLASH_FlushCaches+0x88>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d017      	beq.n	800293c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800290c:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <FLASH_FlushCaches+0x88>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <FLASH_FlushCaches+0x88>)
 8002912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002916:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002918:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <FLASH_FlushCaches+0x88>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <FLASH_FlushCaches+0x88>)
 800291e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <FLASH_FlushCaches+0x88>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a07      	ldr	r2, [pc, #28]	; (8002948 <FLASH_FlushCaches+0x88>)
 800292a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800292e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <FLASH_FlushCaches+0x88>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <FLASH_FlushCaches+0x88>)
 8002936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800293a:	6013      	str	r3, [r2, #0]
  }
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40023c00 	.word	0x40023c00

0800294c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e16b      	b.n	8002c40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	f040 815a 	bne.w	8002c3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d005      	beq.n	800299e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299a:	2b02      	cmp	r3, #2
 800299c:	d130      	bne.n	8002a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	2203      	movs	r2, #3
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 0201 	and.w	r2, r3, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d017      	beq.n	8002a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d123      	bne.n	8002a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	08da      	lsrs	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3208      	adds	r2, #8
 8002a8a:	69b9      	ldr	r1, [r7, #24]
 8002a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0203 	and.w	r2, r3, #3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80b4 	beq.w	8002c3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b60      	ldr	r3, [pc, #384]	; (8002c58 <HAL_GPIO_Init+0x30c>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4a5f      	ldr	r2, [pc, #380]	; (8002c58 <HAL_GPIO_Init+0x30c>)
 8002adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae2:	4b5d      	ldr	r3, [pc, #372]	; (8002c58 <HAL_GPIO_Init+0x30c>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aee:	4a5b      	ldr	r2, [pc, #364]	; (8002c5c <HAL_GPIO_Init+0x310>)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a52      	ldr	r2, [pc, #328]	; (8002c60 <HAL_GPIO_Init+0x314>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d02b      	beq.n	8002b72 <HAL_GPIO_Init+0x226>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a51      	ldr	r2, [pc, #324]	; (8002c64 <HAL_GPIO_Init+0x318>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d025      	beq.n	8002b6e <HAL_GPIO_Init+0x222>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a50      	ldr	r2, [pc, #320]	; (8002c68 <HAL_GPIO_Init+0x31c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01f      	beq.n	8002b6a <HAL_GPIO_Init+0x21e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4f      	ldr	r2, [pc, #316]	; (8002c6c <HAL_GPIO_Init+0x320>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d019      	beq.n	8002b66 <HAL_GPIO_Init+0x21a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4e      	ldr	r2, [pc, #312]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_GPIO_Init+0x216>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4d      	ldr	r2, [pc, #308]	; (8002c74 <HAL_GPIO_Init+0x328>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00d      	beq.n	8002b5e <HAL_GPIO_Init+0x212>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4c      	ldr	r2, [pc, #304]	; (8002c78 <HAL_GPIO_Init+0x32c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d007      	beq.n	8002b5a <HAL_GPIO_Init+0x20e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4b      	ldr	r2, [pc, #300]	; (8002c7c <HAL_GPIO_Init+0x330>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d101      	bne.n	8002b56 <HAL_GPIO_Init+0x20a>
 8002b52:	2307      	movs	r3, #7
 8002b54:	e00e      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b56:	2308      	movs	r3, #8
 8002b58:	e00c      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	e00a      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b5e:	2305      	movs	r3, #5
 8002b60:	e008      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x228>
 8002b72:	2300      	movs	r3, #0
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f002 0203 	and.w	r2, r2, #3
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b84:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_GPIO_Init+0x310>)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b92:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bb6:	4a32      	ldr	r2, [pc, #200]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bbc:	4b30      	ldr	r3, [pc, #192]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be0:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002be6:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c0a:	4a1d      	ldr	r2, [pc, #116]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c34:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <HAL_GPIO_Init+0x334>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	f67f ae90 	bls.w	8002968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020400 	.word	0x40020400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40021400 	.word	0x40021400
 8002c78:	40021800 	.word	0x40021800
 8002c7c:	40021c00 	.word	0x40021c00
 8002c80:	40013c00 	.word	0x40013c00

08002c84 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	e0cd      	b.n	8002e3c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	f040 80bd 	bne.w	8002e36 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002cbc:	4a65      	ldr	r2, [pc, #404]	; (8002e54 <HAL_GPIO_DeInit+0x1d0>)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a5d      	ldr	r2, [pc, #372]	; (8002e58 <HAL_GPIO_DeInit+0x1d4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d02b      	beq.n	8002d3e <HAL_GPIO_DeInit+0xba>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a5c      	ldr	r2, [pc, #368]	; (8002e5c <HAL_GPIO_DeInit+0x1d8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d025      	beq.n	8002d3a <HAL_GPIO_DeInit+0xb6>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a5b      	ldr	r2, [pc, #364]	; (8002e60 <HAL_GPIO_DeInit+0x1dc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d01f      	beq.n	8002d36 <HAL_GPIO_DeInit+0xb2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a5a      	ldr	r2, [pc, #360]	; (8002e64 <HAL_GPIO_DeInit+0x1e0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d019      	beq.n	8002d32 <HAL_GPIO_DeInit+0xae>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a59      	ldr	r2, [pc, #356]	; (8002e68 <HAL_GPIO_DeInit+0x1e4>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d013      	beq.n	8002d2e <HAL_GPIO_DeInit+0xaa>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a58      	ldr	r2, [pc, #352]	; (8002e6c <HAL_GPIO_DeInit+0x1e8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00d      	beq.n	8002d2a <HAL_GPIO_DeInit+0xa6>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a57      	ldr	r2, [pc, #348]	; (8002e70 <HAL_GPIO_DeInit+0x1ec>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d007      	beq.n	8002d26 <HAL_GPIO_DeInit+0xa2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a56      	ldr	r2, [pc, #344]	; (8002e74 <HAL_GPIO_DeInit+0x1f0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d101      	bne.n	8002d22 <HAL_GPIO_DeInit+0x9e>
 8002d1e:	2307      	movs	r3, #7
 8002d20:	e00e      	b.n	8002d40 <HAL_GPIO_DeInit+0xbc>
 8002d22:	2308      	movs	r3, #8
 8002d24:	e00c      	b.n	8002d40 <HAL_GPIO_DeInit+0xbc>
 8002d26:	2306      	movs	r3, #6
 8002d28:	e00a      	b.n	8002d40 <HAL_GPIO_DeInit+0xbc>
 8002d2a:	2305      	movs	r3, #5
 8002d2c:	e008      	b.n	8002d40 <HAL_GPIO_DeInit+0xbc>
 8002d2e:	2304      	movs	r3, #4
 8002d30:	e006      	b.n	8002d40 <HAL_GPIO_DeInit+0xbc>
 8002d32:	2303      	movs	r3, #3
 8002d34:	e004      	b.n	8002d40 <HAL_GPIO_DeInit+0xbc>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e002      	b.n	8002d40 <HAL_GPIO_DeInit+0xbc>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <HAL_GPIO_DeInit+0xbc>
 8002d3e:	2300      	movs	r3, #0
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	f002 0203 	and.w	r2, r2, #3
 8002d46:	0092      	lsls	r2, r2, #2
 8002d48:	4093      	lsls	r3, r2
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d132      	bne.n	8002db6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002d50:	4b49      	ldr	r3, [pc, #292]	; (8002e78 <HAL_GPIO_DeInit+0x1f4>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	4947      	ldr	r1, [pc, #284]	; (8002e78 <HAL_GPIO_DeInit+0x1f4>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002d5e:	4b46      	ldr	r3, [pc, #280]	; (8002e78 <HAL_GPIO_DeInit+0x1f4>)
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	4944      	ldr	r1, [pc, #272]	; (8002e78 <HAL_GPIO_DeInit+0x1f4>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002d6c:	4b42      	ldr	r3, [pc, #264]	; (8002e78 <HAL_GPIO_DeInit+0x1f4>)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	4940      	ldr	r1, [pc, #256]	; (8002e78 <HAL_GPIO_DeInit+0x1f4>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002d7a:	4b3f      	ldr	r3, [pc, #252]	; (8002e78 <HAL_GPIO_DeInit+0x1f4>)
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	43db      	mvns	r3, r3
 8002d82:	493d      	ldr	r1, [pc, #244]	; (8002e78 <HAL_GPIO_DeInit+0x1f4>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002d98:	4a2e      	ldr	r2, [pc, #184]	; (8002e54 <HAL_GPIO_DeInit+0x1d0>)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	3302      	adds	r3, #2
 8002da0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	43da      	mvns	r2, r3
 8002da8:	482a      	ldr	r0, [pc, #168]	; (8002e54 <HAL_GPIO_DeInit+0x1d0>)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	400a      	ands	r2, r1
 8002db0:	3302      	adds	r3, #2
 8002db2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2103      	movs	r1, #3
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	08da      	lsrs	r2, r3, #3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3208      	adds	r2, #8
 8002dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	220f      	movs	r2, #15
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	08d2      	lsrs	r2, r2, #3
 8002dec:	4019      	ands	r1, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3208      	adds	r2, #8
 8002df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2103      	movs	r1, #3
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	401a      	ands	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	2101      	movs	r1, #1
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	2103      	movs	r1, #3
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	401a      	ands	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2b0f      	cmp	r3, #15
 8002e40:	f67f af2e 	bls.w	8002ca0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40013800 	.word	0x40013800
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	40020400 	.word	0x40020400
 8002e60:	40020800 	.word	0x40020800
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40021400 	.word	0x40021400
 8002e70:	40021800 	.word	0x40021800
 8002e74:	40021c00 	.word	0x40021c00
 8002e78:	40013c00 	.word	0x40013c00

08002e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e8c:	787b      	ldrb	r3, [r7, #1]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e98:	e003      	b.n	8002ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	041a      	lsls	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e264      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d075      	beq.n	8002fba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ece:	4ba3      	ldr	r3, [pc, #652]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eda:	4ba0      	ldr	r3, [pc, #640]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d112      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee6:	4b9d      	ldr	r3, [pc, #628]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef2:	d10b      	bne.n	8002f0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef4:	4b99      	ldr	r3, [pc, #612]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d05b      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x108>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d157      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e23f      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d106      	bne.n	8002f24 <HAL_RCC_OscConfig+0x74>
 8002f16:	4b91      	ldr	r3, [pc, #580]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a90      	ldr	r2, [pc, #576]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	e01d      	b.n	8002f60 <HAL_RCC_OscConfig+0xb0>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f2c:	d10c      	bne.n	8002f48 <HAL_RCC_OscConfig+0x98>
 8002f2e:	4b8b      	ldr	r3, [pc, #556]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a8a      	ldr	r2, [pc, #552]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	4b88      	ldr	r3, [pc, #544]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a87      	ldr	r2, [pc, #540]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e00b      	b.n	8002f60 <HAL_RCC_OscConfig+0xb0>
 8002f48:	4b84      	ldr	r3, [pc, #528]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a83      	ldr	r2, [pc, #524]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	4b81      	ldr	r3, [pc, #516]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a80      	ldr	r2, [pc, #512]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d013      	beq.n	8002f90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe fc74 	bl	8001854 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe fc70 	bl	8001854 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e204      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b76      	ldr	r3, [pc, #472]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0xc0>
 8002f8e:	e014      	b.n	8002fba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe fc60 	bl	8001854 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe fc5c 	bl	8001854 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e1f0      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002faa:	4b6c      	ldr	r3, [pc, #432]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f0      	bne.n	8002f98 <HAL_RCC_OscConfig+0xe8>
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d063      	beq.n	800308e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fc6:	4b65      	ldr	r3, [pc, #404]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd2:	4b62      	ldr	r3, [pc, #392]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d11c      	bne.n	8003018 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fde:	4b5f      	ldr	r3, [pc, #380]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d116      	bne.n	8003018 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fea:	4b5c      	ldr	r3, [pc, #368]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_RCC_OscConfig+0x152>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e1c4      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003002:	4b56      	ldr	r3, [pc, #344]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4952      	ldr	r1, [pc, #328]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003016:	e03a      	b.n	800308e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003020:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <HAL_RCC_OscConfig+0x2b0>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7fe fc15 	bl	8001854 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302e:	f7fe fc11 	bl	8001854 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e1a5      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003040:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304c:	4b43      	ldr	r3, [pc, #268]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4940      	ldr	r1, [pc, #256]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	e015      	b.n	800308e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003062:	4b3f      	ldr	r3, [pc, #252]	; (8003160 <HAL_RCC_OscConfig+0x2b0>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe fbf4 	bl	8001854 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003070:	f7fe fbf0 	bl	8001854 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e184      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003082:	4b36      	ldr	r3, [pc, #216]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d030      	beq.n	80030fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d016      	beq.n	80030d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a2:	4b30      	ldr	r3, [pc, #192]	; (8003164 <HAL_RCC_OscConfig+0x2b4>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a8:	f7fe fbd4 	bl	8001854 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b0:	f7fe fbd0 	bl	8001854 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e164      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c2:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x200>
 80030ce:	e015      	b.n	80030fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d0:	4b24      	ldr	r3, [pc, #144]	; (8003164 <HAL_RCC_OscConfig+0x2b4>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fe fbbd 	bl	8001854 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030de:	f7fe fbb9 	bl	8001854 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e14d      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 80030f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f0      	bne.n	80030de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a0 	beq.w	800324a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310e:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	4a0e      	ldr	r2, [pc, #56]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 8003124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003128:	6413      	str	r3, [r2, #64]	; 0x40
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <HAL_RCC_OscConfig+0x2ac>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003136:	2301      	movs	r3, #1
 8003138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_OscConfig+0x2b8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	2b00      	cmp	r3, #0
 8003144:	d121      	bne.n	800318a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <HAL_RCC_OscConfig+0x2b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a07      	ldr	r2, [pc, #28]	; (8003168 <HAL_RCC_OscConfig+0x2b8>)
 800314c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003152:	f7fe fb7f 	bl	8001854 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003158:	e011      	b.n	800317e <HAL_RCC_OscConfig+0x2ce>
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	42470000 	.word	0x42470000
 8003164:	42470e80 	.word	0x42470e80
 8003168:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316c:	f7fe fb72 	bl	8001854 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e106      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317e:	4b85      	ldr	r3, [pc, #532]	; (8003394 <HAL_RCC_OscConfig+0x4e4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d106      	bne.n	80031a0 <HAL_RCC_OscConfig+0x2f0>
 8003192:	4b81      	ldr	r3, [pc, #516]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a80      	ldr	r2, [pc, #512]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	e01c      	b.n	80031da <HAL_RCC_OscConfig+0x32a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d10c      	bne.n	80031c2 <HAL_RCC_OscConfig+0x312>
 80031a8:	4b7b      	ldr	r3, [pc, #492]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	4a7a      	ldr	r2, [pc, #488]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 80031ae:	f043 0304 	orr.w	r3, r3, #4
 80031b2:	6713      	str	r3, [r2, #112]	; 0x70
 80031b4:	4b78      	ldr	r3, [pc, #480]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 80031b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b8:	4a77      	ldr	r2, [pc, #476]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6713      	str	r3, [r2, #112]	; 0x70
 80031c0:	e00b      	b.n	80031da <HAL_RCC_OscConfig+0x32a>
 80031c2:	4b75      	ldr	r3, [pc, #468]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a74      	ldr	r2, [pc, #464]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	4b72      	ldr	r3, [pc, #456]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a71      	ldr	r2, [pc, #452]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d015      	beq.n	800320e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fe fb37 	bl	8001854 <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ea:	f7fe fb33 	bl	8001854 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0c5      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003200:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ee      	beq.n	80031ea <HAL_RCC_OscConfig+0x33a>
 800320c:	e014      	b.n	8003238 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320e:	f7fe fb21 	bl	8001854 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003214:	e00a      	b.n	800322c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003216:	f7fe fb1d 	bl	8001854 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	f241 3288 	movw	r2, #5000	; 0x1388
 8003224:	4293      	cmp	r3, r2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e0af      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322c:	4b5a      	ldr	r3, [pc, #360]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ee      	bne.n	8003216 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003238:	7dfb      	ldrb	r3, [r7, #23]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d105      	bne.n	800324a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323e:	4b56      	ldr	r3, [pc, #344]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	4a55      	ldr	r2, [pc, #340]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 8003244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003248:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 809b 	beq.w	800338a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d05c      	beq.n	800331a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d141      	bne.n	80032ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003268:	4b4c      	ldr	r3, [pc, #304]	; (800339c <HAL_RCC_OscConfig+0x4ec>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7fe faf1 	bl	8001854 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003276:	f7fe faed 	bl	8001854 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e081      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003288:	4b43      	ldr	r3, [pc, #268]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	019b      	lsls	r3, r3, #6
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	085b      	lsrs	r3, r3, #1
 80032ac:	3b01      	subs	r3, #1
 80032ae:	041b      	lsls	r3, r3, #16
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	061b      	lsls	r3, r3, #24
 80032b8:	4937      	ldr	r1, [pc, #220]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_RCC_OscConfig+0x4ec>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe fac6 	bl	8001854 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe fac2 	bl	8001854 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e056      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x41c>
 80032ea:	e04e      	b.n	800338a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ec:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_OscConfig+0x4ec>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe faaf 	bl	8001854 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe faab 	bl	8001854 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e03f      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330c:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f0      	bne.n	80032fa <HAL_RCC_OscConfig+0x44a>
 8003318:	e037      	b.n	800338a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e032      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <HAL_RCC_OscConfig+0x4e8>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d028      	beq.n	8003386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333e:	429a      	cmp	r2, r3
 8003340:	d121      	bne.n	8003386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d11a      	bne.n	8003386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003356:	4013      	ands	r3, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800335c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800335e:	4293      	cmp	r3, r2
 8003360:	d111      	bne.n	8003386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	085b      	lsrs	r3, r3, #1
 800336e:	3b01      	subs	r3, #1
 8003370:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d107      	bne.n	8003386 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003382:	429a      	cmp	r2, r3
 8003384:	d001      	beq.n	800338a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e000      	b.n	800338c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40007000 	.word	0x40007000
 8003398:	40023800 	.word	0x40023800
 800339c:	42470060 	.word	0x42470060

080033a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0cc      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b4:	4b68      	ldr	r3, [pc, #416]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d90c      	bls.n	80033dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b65      	ldr	r3, [pc, #404]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b63      	ldr	r3, [pc, #396]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0b8      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d020      	beq.n	800342a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f4:	4b59      	ldr	r3, [pc, #356]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a58      	ldr	r2, [pc, #352]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800340c:	4b53      	ldr	r3, [pc, #332]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003418:	4b50      	ldr	r3, [pc, #320]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	494d      	ldr	r1, [pc, #308]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d044      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d119      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e07f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d003      	beq.n	800345e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345a:	2b03      	cmp	r3, #3
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345e:	4b3f      	ldr	r3, [pc, #252]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e06f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346e:	4b3b      	ldr	r3, [pc, #236]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e067      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347e:	4b37      	ldr	r3, [pc, #220]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4934      	ldr	r1, [pc, #208]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800348c:	4313      	orrs	r3, r2
 800348e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003490:	f7fe f9e0 	bl	8001854 <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	e00a      	b.n	80034ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003498:	f7fe f9dc 	bl	8001854 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e04f      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	4b2b      	ldr	r3, [pc, #172]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 020c 	and.w	r2, r3, #12
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	429a      	cmp	r2, r3
 80034be:	d1eb      	bne.n	8003498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d20c      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b22      	ldr	r3, [pc, #136]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e032      	b.n	800354e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f4:	4b19      	ldr	r3, [pc, #100]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4916      	ldr	r1, [pc, #88]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003512:	4b12      	ldr	r3, [pc, #72]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	490e      	ldr	r1, [pc, #56]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003526:	f000 f821 	bl	800356c <HAL_RCC_GetSysClockFreq>
 800352a:	4602      	mov	r2, r0
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	490a      	ldr	r1, [pc, #40]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	5ccb      	ldrb	r3, [r1, r3]
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	4a09      	ldr	r2, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003542:	4b09      	ldr	r3, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7fe f810 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023c00 	.word	0x40023c00
 800355c:	40023800 	.word	0x40023800
 8003560:	0800f4dc 	.word	0x0800f4dc
 8003564:	20000008 	.word	0x20000008
 8003568:	2000000c 	.word	0x2000000c

0800356c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800356c:	b5b0      	push	{r4, r5, r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003572:	2100      	movs	r1, #0
 8003574:	6079      	str	r1, [r7, #4]
 8003576:	2100      	movs	r1, #0
 8003578:	60f9      	str	r1, [r7, #12]
 800357a:	2100      	movs	r1, #0
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800357e:	2100      	movs	r1, #0
 8003580:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003582:	4952      	ldr	r1, [pc, #328]	; (80036cc <HAL_RCC_GetSysClockFreq+0x160>)
 8003584:	6889      	ldr	r1, [r1, #8]
 8003586:	f001 010c 	and.w	r1, r1, #12
 800358a:	2908      	cmp	r1, #8
 800358c:	d00d      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x3e>
 800358e:	2908      	cmp	r1, #8
 8003590:	f200 8094 	bhi.w	80036bc <HAL_RCC_GetSysClockFreq+0x150>
 8003594:	2900      	cmp	r1, #0
 8003596:	d002      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x32>
 8003598:	2904      	cmp	r1, #4
 800359a:	d003      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x38>
 800359c:	e08e      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800359e:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80035a0:	60bb      	str	r3, [r7, #8]
       break;
 80035a2:	e08e      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035a4:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80035a6:	60bb      	str	r3, [r7, #8]
      break;
 80035a8:	e08b      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035aa:	4948      	ldr	r1, [pc, #288]	; (80036cc <HAL_RCC_GetSysClockFreq+0x160>)
 80035ac:	6849      	ldr	r1, [r1, #4]
 80035ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80035b2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b4:	4945      	ldr	r1, [pc, #276]	; (80036cc <HAL_RCC_GetSysClockFreq+0x160>)
 80035b6:	6849      	ldr	r1, [r1, #4]
 80035b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80035bc:	2900      	cmp	r1, #0
 80035be:	d024      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c0:	4942      	ldr	r1, [pc, #264]	; (80036cc <HAL_RCC_GetSysClockFreq+0x160>)
 80035c2:	6849      	ldr	r1, [r1, #4]
 80035c4:	0989      	lsrs	r1, r1, #6
 80035c6:	4608      	mov	r0, r1
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80035d0:	f04f 0500 	mov.w	r5, #0
 80035d4:	ea00 0204 	and.w	r2, r0, r4
 80035d8:	ea01 0305 	and.w	r3, r1, r5
 80035dc:	493d      	ldr	r1, [pc, #244]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80035de:	fb01 f003 	mul.w	r0, r1, r3
 80035e2:	2100      	movs	r1, #0
 80035e4:	fb01 f102 	mul.w	r1, r1, r2
 80035e8:	1844      	adds	r4, r0, r1
 80035ea:	493a      	ldr	r1, [pc, #232]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80035ec:	fba2 0101 	umull	r0, r1, r2, r1
 80035f0:	1863      	adds	r3, r4, r1
 80035f2:	4619      	mov	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	461a      	mov	r2, r3
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	f7fc fe40 	bl	8000280 <__aeabi_uldivmod>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4613      	mov	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e04a      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360a:	4b30      	ldr	r3, [pc, #192]	; (80036cc <HAL_RCC_GetSysClockFreq+0x160>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	099b      	lsrs	r3, r3, #6
 8003610:	461a      	mov	r2, r3
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	f240 10ff 	movw	r0, #511	; 0x1ff
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	ea02 0400 	and.w	r4, r2, r0
 8003622:	ea03 0501 	and.w	r5, r3, r1
 8003626:	4620      	mov	r0, r4
 8003628:	4629      	mov	r1, r5
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	014b      	lsls	r3, r1, #5
 8003634:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003638:	0142      	lsls	r2, r0, #5
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	1b00      	subs	r0, r0, r4
 8003640:	eb61 0105 	sbc.w	r1, r1, r5
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	f04f 0300 	mov.w	r3, #0
 800364c:	018b      	lsls	r3, r1, #6
 800364e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003652:	0182      	lsls	r2, r0, #6
 8003654:	1a12      	subs	r2, r2, r0
 8003656:	eb63 0301 	sbc.w	r3, r3, r1
 800365a:	f04f 0000 	mov.w	r0, #0
 800365e:	f04f 0100 	mov.w	r1, #0
 8003662:	00d9      	lsls	r1, r3, #3
 8003664:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003668:	00d0      	lsls	r0, r2, #3
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	1912      	adds	r2, r2, r4
 8003670:	eb45 0303 	adc.w	r3, r5, r3
 8003674:	f04f 0000 	mov.w	r0, #0
 8003678:	f04f 0100 	mov.w	r1, #0
 800367c:	0299      	lsls	r1, r3, #10
 800367e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003682:	0290      	lsls	r0, r2, #10
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4610      	mov	r0, r2
 800368a:	4619      	mov	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	461a      	mov	r2, r3
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	f7fc fdf4 	bl	8000280 <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4613      	mov	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <HAL_RCC_GetSysClockFreq+0x160>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	0c1b      	lsrs	r3, r3, #16
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	3301      	adds	r3, #1
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b8:	60bb      	str	r3, [r7, #8]
      break;
 80036ba:	e002      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80036be:	60bb      	str	r3, [r7, #8]
      break;
 80036c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c2:	68bb      	ldr	r3, [r7, #8]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bdb0      	pop	{r4, r5, r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	00f42400 	.word	0x00f42400
 80036d4:	017d7840 	.word	0x017d7840

080036d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <HAL_RCC_GetHCLKFreq+0x14>)
 80036de:	681b      	ldr	r3, [r3, #0]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000008 	.word	0x20000008

080036f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036f4:	f7ff fff0 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	0a9b      	lsrs	r3, r3, #10
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	4903      	ldr	r1, [pc, #12]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40023800 	.word	0x40023800
 8003714:	0800f4ec 	.word	0x0800f4ec

08003718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800371c:	f7ff ffdc 	bl	80036d8 <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	0b5b      	lsrs	r3, r3, #13
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4903      	ldr	r1, [pc, #12]	; (800373c <HAL_RCC_GetPCLK2Freq+0x24>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40023800 	.word	0x40023800
 800373c:	0800f4ec 	.word	0x0800f4ec

08003740 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	220f      	movs	r2, #15
 800374e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003750:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_RCC_GetClockConfig+0x5c>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0203 	and.w	r2, r3, #3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800375c:	4b0f      	ldr	r3, [pc, #60]	; (800379c <HAL_RCC_GetClockConfig+0x5c>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <HAL_RCC_GetClockConfig+0x5c>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_RCC_GetClockConfig+0x5c>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	08db      	lsrs	r3, r3, #3
 800377a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_RCC_GetClockConfig+0x60>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0207 	and.w	r2, r3, #7
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	601a      	str	r2, [r3, #0]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	40023c00 	.word	0x40023c00

080037a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d035      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037cc:	4b62      	ldr	r3, [pc, #392]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037d2:	f7fe f83f 	bl	8001854 <HAL_GetTick>
 80037d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037da:	f7fe f83b 	bl	8001854 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e0b0      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037ec:	4b5b      	ldr	r3, [pc, #364]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	019a      	lsls	r2, r3, #6
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	071b      	lsls	r3, r3, #28
 8003804:	4955      	ldr	r1, [pc, #340]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800380c:	4b52      	ldr	r3, [pc, #328]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003812:	f7fe f81f 	bl	8001854 <HAL_GetTick>
 8003816:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800381a:	f7fe f81b 	bl	8001854 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e090      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800382c:	4b4b      	ldr	r3, [pc, #300]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8083 	beq.w	800394c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	4b44      	ldr	r3, [pc, #272]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	4a43      	ldr	r2, [pc, #268]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	; 0x40
 8003856:	4b41      	ldr	r3, [pc, #260]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003862:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a3e      	ldr	r2, [pc, #248]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800386e:	f7fd fff1 	bl	8001854 <HAL_GetTick>
 8003872:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003876:	f7fd ffed 	bl	8001854 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e062      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003888:	4b35      	ldr	r3, [pc, #212]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003894:	4b31      	ldr	r3, [pc, #196]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003898:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d02f      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d028      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038b2:	4b2a      	ldr	r3, [pc, #168]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038bc:	4b29      	ldr	r3, [pc, #164]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038c2:	4b28      	ldr	r3, [pc, #160]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80038c8:	4a24      	ldr	r2, [pc, #144]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80038ce:	4b23      	ldr	r3, [pc, #140]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d114      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80038da:	f7fd ffbb 	bl	8001854 <HAL_GetTick>
 80038de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e0:	e00a      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e2:	f7fd ffb7 	bl	8001854 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e02a      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f8:	4b18      	ldr	r3, [pc, #96]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0ee      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003910:	d10d      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003926:	490d      	ldr	r1, [pc, #52]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	608b      	str	r3, [r1, #8]
 800392c:	e005      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003934:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003938:	6093      	str	r3, [r2, #8]
 800393a:	4b08      	ldr	r3, [pc, #32]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800393c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003946:	4905      	ldr	r1, [pc, #20]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003948:	4313      	orrs	r3, r2
 800394a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3718      	adds	r7, #24
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	42470068 	.word	0x42470068
 800395c:	40023800 	.word	0x40023800
 8003960:	40007000 	.word	0x40007000
 8003964:	42470e40 	.word	0x42470e40

08003968 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800396e:	f7fd ff71 	bl	8001854 <HAL_GetTick>
 8003972:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003974:	4b5d      	ldr	r3, [pc, #372]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5c      	ldr	r2, [pc, #368]	; (8003aec <HAL_RCC_DeInit+0x184>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003982:	f7fd ff67 	bl	8001854 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e0a7      	b.n	8003ae4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003994:	4b55      	ldr	r3, [pc, #340]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80039a0:	4b52      	ldr	r3, [pc, #328]	; (8003aec <HAL_RCC_DeInit+0x184>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a51      	ldr	r2, [pc, #324]	; (8003aec <HAL_RCC_DeInit+0x184>)
 80039a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80039ac:	f7fd ff52 	bl	8001854 <HAL_GetTick>
 80039b0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80039b2:	4b4e      	ldr	r3, [pc, #312]	; (8003aec <HAL_RCC_DeInit+0x184>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80039b8:	e00a      	b.n	80039d0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ba:	f7fd ff4b 	bl	8001854 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e089      	b.n	8003ae4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80039d0:	4b46      	ldr	r3, [pc, #280]	; (8003aec <HAL_RCC_DeInit+0x184>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ee      	bne.n	80039ba <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80039dc:	f7fd ff3a 	bl	8001854 <HAL_GetTick>
 80039e0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80039e2:	4b42      	ldr	r3, [pc, #264]	; (8003aec <HAL_RCC_DeInit+0x184>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a41      	ldr	r2, [pc, #260]	; (8003aec <HAL_RCC_DeInit+0x184>)
 80039e8:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80039ec:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fd ff30 	bl	8001854 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e070      	b.n	8003ae4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003a02:	4b3a      	ldr	r3, [pc, #232]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a0e:	f7fd ff21 	bl	8001854 <HAL_GetTick>
 8003a12:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003a14:	4b35      	ldr	r3, [pc, #212]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a34      	ldr	r2, [pc, #208]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a22:	f7fd ff17 	bl	8001854 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e057      	b.n	8003ae4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003a34:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1f0      	bne.n	8003a22 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a40:	f7fd ff08 	bl	8001854 <HAL_GetTick>
 8003a44:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003a46:	4b29      	ldr	r3, [pc, #164]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a28      	ldr	r2, [pc, #160]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a50:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a54:	f7fd fefe 	bl	8001854 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e03e      	b.n	8003ae4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003a72:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a74:	4a1e      	ldr	r2, [pc, #120]	; (8003af0 <HAL_RCC_DeInit+0x188>)
 8003a76:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <HAL_RCC_DeInit+0x18c>)
 8003a7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003a80:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a86:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003a8a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4a16      	ldr	r2, [pc, #88]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a96:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003a9e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003aa2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a10      	ldr	r2, [pc, #64]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003aae:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003ab0:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <HAL_RCC_DeInit+0x184>)
 8003ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_DeInit+0x190>)
 8003aca:	4a0c      	ldr	r2, [pc, #48]	; (8003afc <HAL_RCC_DeInit+0x194>)
 8003acc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_RCC_DeInit+0x198>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fd fd4a 	bl	800156c <HAL_InitTick>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
  }
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	04003010 	.word	0x04003010
 8003af4:	20003000 	.word	0x20003000
 8003af8:	20000008 	.word	0x20000008
 8003afc:	00f42400 	.word	0x00f42400
 8003b00:	2000000c 	.word	0x2000000c

08003b04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e066      	b.n	8003be8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	7f5b      	ldrb	r3, [r3, #29]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d105      	bne.n	8003b30 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd fb5e 	bl	80011ec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	22ca      	movs	r2, #202	; 0xca
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2253      	movs	r2, #83	; 0x53
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f87a 	bl	8003c40 <RTC_EnterInitMode>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d12c      	bne.n	8003bb0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b68:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685a      	ldr	r2, [r3, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	68d2      	ldr	r2, [r2, #12]
 8003b90:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6919      	ldr	r1, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	041a      	lsls	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f881 	bl	8003cae <RTC_ExitInitMode>
 8003bac:	4603      	mov	r3, r0
 8003bae:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d113      	bne.n	8003bde <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699a      	ldr	r2, [r3, #24]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	22ff      	movs	r2, #255	; 0xff
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c0a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c0c:	f7fd fe22 	bl	8001854 <HAL_GetTick>
 8003c10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c12:	e009      	b.n	8003c28 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c14:	f7fd fe1e 	bl	8001854 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c22:	d901      	bls.n	8003c28 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e007      	b.n	8003c38 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0ee      	beq.n	8003c14 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d122      	bne.n	8003ca4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c6c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6e:	f7fd fdf1 	bl	8001854 <HAL_GetTick>
 8003c72:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c74:	e00c      	b.n	8003c90 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c76:	f7fd fded 	bl	8001854 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c84:	d904      	bls.n	8003c90 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <RTC_EnterInitMode+0x64>
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d1e8      	bne.n	8003c76 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff89 	bl	8003bf0 <HAL_RTC_WaitForSynchro>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2204      	movs	r2, #4
 8003ce8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e07b      	b.n	8003e02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d108      	bne.n	8003d24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1a:	d009      	beq.n	8003d30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	61da      	str	r2, [r3, #28]
 8003d22:	e005      	b.n	8003d30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d106      	bne.n	8003d50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fd fa78 	bl	8001240 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	431a      	orrs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db4:	ea42 0103 	orr.w	r1, r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	0c1b      	lsrs	r3, r3, #16
 8003dce:	f003 0104 	and.w	r1, r3, #4
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	f003 0210 	and.w	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e01a      	b.n	8003e52 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e32:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7fd fa83 	bl	8001340 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b088      	sub	sp, #32
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4613      	mov	r3, r2
 8003e68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <HAL_SPI_Transmit+0x22>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e126      	b.n	80040ca <HAL_SPI_Transmit+0x270>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e84:	f7fd fce6 	bl	8001854 <HAL_GetTick>
 8003e88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e9e:	e10b      	b.n	80040b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_SPI_Transmit+0x52>
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eb0:	e102      	b.n	80040b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef8:	d10f      	bne.n	8003f1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d007      	beq.n	8003f38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f40:	d14b      	bne.n	8003fda <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_SPI_Transmit+0xf6>
 8003f4a:	8afb      	ldrh	r3, [r7, #22]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d13e      	bne.n	8003fce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f54:	881a      	ldrh	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f60:	1c9a      	adds	r2, r3, #2
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f74:	e02b      	b.n	8003fce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d112      	bne.n	8003faa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	881a      	ldrh	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	1c9a      	adds	r2, r3, #2
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fa8:	e011      	b.n	8003fce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003faa:	f7fd fc53 	bl	8001854 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d803      	bhi.n	8003fc2 <HAL_SPI_Transmit+0x168>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc0:	d102      	bne.n	8003fc8 <HAL_SPI_Transmit+0x16e>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fcc:	e074      	b.n	80040b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1ce      	bne.n	8003f76 <HAL_SPI_Transmit+0x11c>
 8003fd8:	e04c      	b.n	8004074 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_SPI_Transmit+0x18e>
 8003fe2:	8afb      	ldrh	r3, [r7, #22]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d140      	bne.n	800406a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	330c      	adds	r3, #12
 8003ff2:	7812      	ldrb	r2, [r2, #0]
 8003ff4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	1c5a      	adds	r2, r3, #1
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800400e:	e02c      	b.n	800406a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d113      	bne.n	8004046 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	7812      	ldrb	r2, [r2, #0]
 800402a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	86da      	strh	r2, [r3, #54]	; 0x36
 8004044:	e011      	b.n	800406a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004046:	f7fd fc05 	bl	8001854 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d803      	bhi.n	800405e <HAL_SPI_Transmit+0x204>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405c:	d102      	bne.n	8004064 <HAL_SPI_Transmit+0x20a>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004068:	e026      	b.n	80040b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1cd      	bne.n	8004010 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	6839      	ldr	r1, [r7, #0]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fbcb 	bl	8004814 <SPI_EndRxTxTransaction>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2220      	movs	r2, #32
 8004088:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	613b      	str	r3, [r7, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e000      	b.n	80040b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80040b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b088      	sub	sp, #32
 80040d6:	af02      	add	r7, sp, #8
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	4613      	mov	r3, r2
 80040e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040ee:	d112      	bne.n	8004116 <HAL_SPI_Receive+0x44>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10e      	bne.n	8004116 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2204      	movs	r2, #4
 80040fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004100:	88fa      	ldrh	r2, [r7, #6]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f8f1 	bl	80042f4 <HAL_SPI_TransmitReceive>
 8004112:	4603      	mov	r3, r0
 8004114:	e0ea      	b.n	80042ec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_SPI_Receive+0x52>
 8004120:	2302      	movs	r3, #2
 8004122:	e0e3      	b.n	80042ec <HAL_SPI_Receive+0x21a>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800412c:	f7fd fb92 	bl	8001854 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d002      	beq.n	8004144 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800413e:	2302      	movs	r3, #2
 8004140:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004142:	e0ca      	b.n	80042da <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_SPI_Receive+0x7e>
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004154:	e0c1      	b.n	80042da <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2204      	movs	r2, #4
 800415a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	88fa      	ldrh	r2, [r7, #6]
 800416e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	d10f      	bne.n	80041be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d007      	beq.n	80041dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d162      	bne.n	80042aa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041e4:	e02e      	b.n	8004244 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d115      	bne.n	8004220 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f103 020c 	add.w	r2, r3, #12
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	7812      	ldrb	r2, [r2, #0]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800421e:	e011      	b.n	8004244 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004220:	f7fd fb18 	bl	8001854 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d803      	bhi.n	8004238 <HAL_SPI_Receive+0x166>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004236:	d102      	bne.n	800423e <HAL_SPI_Receive+0x16c>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d102      	bne.n	8004244 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004242:	e04a      	b.n	80042da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1cb      	bne.n	80041e6 <HAL_SPI_Receive+0x114>
 800424e:	e031      	b.n	80042b4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d113      	bne.n	8004286 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	b292      	uxth	r2, r2
 800426a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	1c9a      	adds	r2, r3, #2
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004284:	e011      	b.n	80042aa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004286:	f7fd fae5 	bl	8001854 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d803      	bhi.n	800429e <HAL_SPI_Receive+0x1cc>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d102      	bne.n	80042a4 <HAL_SPI_Receive+0x1d2>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042a8:	e017      	b.n	80042da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1cd      	bne.n	8004250 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	6839      	ldr	r1, [r7, #0]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fa45 	bl	8004748 <SPI_EndRxTransaction>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d002      	beq.n	80042d8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	75fb      	strb	r3, [r7, #23]
 80042d6:	e000      	b.n	80042da <HAL_SPI_Receive+0x208>
  }

error :
 80042d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08c      	sub	sp, #48	; 0x30
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004302:	2301      	movs	r3, #1
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_SPI_TransmitReceive+0x26>
 8004316:	2302      	movs	r3, #2
 8004318:	e18a      	b.n	8004630 <HAL_SPI_TransmitReceive+0x33c>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004322:	f7fd fa97 	bl	8001854 <HAL_GetTick>
 8004326:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004338:	887b      	ldrh	r3, [r7, #2]
 800433a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800433c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004340:	2b01      	cmp	r3, #1
 8004342:	d00f      	beq.n	8004364 <HAL_SPI_TransmitReceive+0x70>
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800434a:	d107      	bne.n	800435c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d103      	bne.n	800435c <HAL_SPI_TransmitReceive+0x68>
 8004354:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004358:	2b04      	cmp	r3, #4
 800435a:	d003      	beq.n	8004364 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800435c:	2302      	movs	r3, #2
 800435e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004362:	e15b      	b.n	800461c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d005      	beq.n	8004376 <HAL_SPI_TransmitReceive+0x82>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_SPI_TransmitReceive+0x82>
 8004370:	887b      	ldrh	r3, [r7, #2]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800437c:	e14e      	b.n	800461c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b04      	cmp	r3, #4
 8004388:	d003      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2205      	movs	r2, #5
 800438e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	887a      	ldrh	r2, [r7, #2]
 80043a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	887a      	ldrh	r2, [r7, #2]
 80043ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	2b40      	cmp	r3, #64	; 0x40
 80043d4:	d007      	beq.n	80043e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ee:	d178      	bne.n	80044e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <HAL_SPI_TransmitReceive+0x10a>
 80043f8:	8b7b      	ldrh	r3, [r7, #26]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d166      	bne.n	80044cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	881a      	ldrh	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	1c9a      	adds	r2, r3, #2
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004422:	e053      	b.n	80044cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b02      	cmp	r3, #2
 8004430:	d11b      	bne.n	800446a <HAL_SPI_TransmitReceive+0x176>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d016      	beq.n	800446a <HAL_SPI_TransmitReceive+0x176>
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d113      	bne.n	800446a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	881a      	ldrh	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	1c9a      	adds	r2, r3, #2
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004466:	2300      	movs	r3, #0
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b01      	cmp	r3, #1
 8004476:	d119      	bne.n	80044ac <HAL_SPI_TransmitReceive+0x1b8>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d014      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	b292      	uxth	r2, r2
 800448e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	1c9a      	adds	r2, r3, #2
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800449e:	b29b      	uxth	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044a8:	2301      	movs	r3, #1
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044ac:	f7fd f9d2 	bl	8001854 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d807      	bhi.n	80044cc <HAL_SPI_TransmitReceive+0x1d8>
 80044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d003      	beq.n	80044cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044ca:	e0a7      	b.n	800461c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1a6      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x130>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1a1      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x130>
 80044e0:	e07c      	b.n	80045dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_SPI_TransmitReceive+0x1fc>
 80044ea:	8b7b      	ldrh	r3, [r7, #26]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d16b      	bne.n	80045c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	7812      	ldrb	r2, [r2, #0]
 80044fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004516:	e057      	b.n	80045c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d11c      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x26c>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d017      	beq.n	8004560 <HAL_SPI_TransmitReceive+0x26c>
 8004530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d114      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	330c      	adds	r3, #12
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b01      	cmp	r3, #1
 800456c:	d119      	bne.n	80045a2 <HAL_SPI_TransmitReceive+0x2ae>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d014      	beq.n	80045a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800459e:	2301      	movs	r3, #1
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045a2:	f7fd f957 	bl	8001854 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d803      	bhi.n	80045ba <HAL_SPI_TransmitReceive+0x2c6>
 80045b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d102      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x2cc>
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d103      	bne.n	80045c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045c6:	e029      	b.n	800461c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1a2      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x224>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d19d      	bne.n	8004518 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f917 	bl	8004814 <SPI_EndRxTxTransaction>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d006      	beq.n	80045fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045f8:	e010      	b.n	800461c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	e000      	b.n	800461c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800461a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800462c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004630:	4618      	mov	r0, r3
 8004632:	3730      	adds	r7, #48	; 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004648:	f7fd f904 	bl	8001854 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	4413      	add	r3, r2
 8004656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004658:	f7fd f8fc 	bl	8001854 <HAL_GetTick>
 800465c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800465e:	4b39      	ldr	r3, [pc, #228]	; (8004744 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	015b      	lsls	r3, r3, #5
 8004664:	0d1b      	lsrs	r3, r3, #20
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	fb02 f303 	mul.w	r3, r2, r3
 800466c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800466e:	e054      	b.n	800471a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d050      	beq.n	800471a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004678:	f7fd f8ec 	bl	8001854 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	429a      	cmp	r2, r3
 8004686:	d902      	bls.n	800468e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d13d      	bne.n	800470a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800469c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a6:	d111      	bne.n	80046cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b0:	d004      	beq.n	80046bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ba:	d107      	bne.n	80046cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046d4:	d10f      	bne.n	80046f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e017      	b.n	800473a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	3b01      	subs	r3, #1
 8004718:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	429a      	cmp	r2, r3
 8004736:	d19b      	bne.n	8004670 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000008 	.word	0x20000008

08004748 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af02      	add	r7, sp, #8
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800475c:	d111      	bne.n	8004782 <SPI_EndRxTransaction+0x3a>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004766:	d004      	beq.n	8004772 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004770:	d107      	bne.n	8004782 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004780:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800478a:	d12a      	bne.n	80047e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004794:	d012      	beq.n	80047bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2200      	movs	r2, #0
 800479e:	2180      	movs	r1, #128	; 0x80
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f7ff ff49 	bl	8004638 <SPI_WaitFlagStateUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d02d      	beq.n	8004808 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b0:	f043 0220 	orr.w	r2, r3, #32
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e026      	b.n	800480a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2200      	movs	r2, #0
 80047c4:	2101      	movs	r1, #1
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f7ff ff36 	bl	8004638 <SPI_WaitFlagStateUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01a      	beq.n	8004808 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	f043 0220 	orr.w	r2, r3, #32
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e013      	b.n	800480a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	2101      	movs	r1, #1
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff ff23 	bl	8004638 <SPI_WaitFlagStateUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	f043 0220 	orr.w	r2, r3, #32
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e000      	b.n	800480a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004820:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <SPI_EndRxTxTransaction+0x7c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1b      	ldr	r2, [pc, #108]	; (8004894 <SPI_EndRxTxTransaction+0x80>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	0d5b      	lsrs	r3, r3, #21
 800482c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800483e:	d112      	bne.n	8004866 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2200      	movs	r2, #0
 8004848:	2180      	movs	r1, #128	; 0x80
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff fef4 	bl	8004638 <SPI_WaitFlagStateUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d016      	beq.n	8004884 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	f043 0220 	orr.w	r2, r3, #32
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e00f      	b.n	8004886 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	3b01      	subs	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487c:	2b80      	cmp	r3, #128	; 0x80
 800487e:	d0f2      	beq.n	8004866 <SPI_EndRxTxTransaction+0x52>
 8004880:	e000      	b.n	8004884 <SPI_EndRxTxTransaction+0x70>
        break;
 8004882:	bf00      	nop
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000008 	.word	0x20000008
 8004894:	165e9f81 	.word	0x165e9f81

08004898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e041      	b.n	800492e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d106      	bne.n	80048c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f839 	bl	8004936 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	3304      	adds	r3, #4
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f000 f9d8 	bl	8004c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	d001      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e04e      	b.n	8004a02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <HAL_TIM_Base_Start_IT+0xc4>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d022      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498e:	d01d      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <HAL_TIM_Base_Start_IT+0xc8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d018      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <HAL_TIM_Base_Start_IT+0xcc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d013      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <HAL_TIM_Base_Start_IT+0xd0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00e      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <HAL_TIM_Base_Start_IT+0xd4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d009      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a19      	ldr	r2, [pc, #100]	; (8004a24 <HAL_TIM_Base_Start_IT+0xd8>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_Base_Start_IT+0x80>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <HAL_TIM_Base_Start_IT+0xdc>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d111      	bne.n	80049f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b06      	cmp	r3, #6
 80049dc:	d010      	beq.n	8004a00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ee:	e007      	b.n	8004a00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	40000c00 	.word	0x40000c00
 8004a20:	40010400 	.word	0x40010400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40001800 	.word	0x40001800

08004a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d122      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d11b      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0202 	mvn.w	r2, #2
 8004a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8ee 	bl	8004c50 <HAL_TIM_IC_CaptureCallback>
 8004a74:	e005      	b.n	8004a82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f8e0 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f8f1 	bl	8004c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d122      	bne.n	8004adc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0304 	and.w	r3, r3, #4
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d11b      	bne.n	8004adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0204 	mvn.w	r2, #4
 8004aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8c4 	bl	8004c50 <HAL_TIM_IC_CaptureCallback>
 8004ac8:	e005      	b.n	8004ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8b6 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f8c7 	bl	8004c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b08      	cmp	r3, #8
 8004ae8:	d122      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d11b      	bne.n	8004b30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0208 	mvn.w	r2, #8
 8004b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2204      	movs	r2, #4
 8004b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	f003 0303 	and.w	r3, r3, #3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f89a 	bl	8004c50 <HAL_TIM_IC_CaptureCallback>
 8004b1c:	e005      	b.n	8004b2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f88c 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f89d 	bl	8004c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d122      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b10      	cmp	r3, #16
 8004b4a:	d11b      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0210 	mvn.w	r2, #16
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2208      	movs	r2, #8
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f870 	bl	8004c50 <HAL_TIM_IC_CaptureCallback>
 8004b70:	e005      	b.n	8004b7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f862 	bl	8004c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f873 	bl	8004c64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d10e      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d107      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0201 	mvn.w	r2, #1
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc fadc 	bl	8001168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b80      	cmp	r3, #128	; 0x80
 8004bbc:	d10e      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc8:	2b80      	cmp	r3, #128	; 0x80
 8004bca:	d107      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f902 	bl	8004de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d10e      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d107      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f838 	bl	8004c78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d10e      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d107      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0220 	mvn.w	r2, #32
 8004c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f8cc 	bl	8004dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a40      	ldr	r2, [pc, #256]	; (8004da0 <TIM_Base_SetConfig+0x114>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d013      	beq.n	8004ccc <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004caa:	d00f      	beq.n	8004ccc <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a3d      	ldr	r2, [pc, #244]	; (8004da4 <TIM_Base_SetConfig+0x118>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00b      	beq.n	8004ccc <TIM_Base_SetConfig+0x40>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a3c      	ldr	r2, [pc, #240]	; (8004da8 <TIM_Base_SetConfig+0x11c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d007      	beq.n	8004ccc <TIM_Base_SetConfig+0x40>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3b      	ldr	r2, [pc, #236]	; (8004dac <TIM_Base_SetConfig+0x120>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_Base_SetConfig+0x40>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a3a      	ldr	r2, [pc, #232]	; (8004db0 <TIM_Base_SetConfig+0x124>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d108      	bne.n	8004cde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2f      	ldr	r2, [pc, #188]	; (8004da0 <TIM_Base_SetConfig+0x114>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d02b      	beq.n	8004d3e <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cec:	d027      	beq.n	8004d3e <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2c      	ldr	r2, [pc, #176]	; (8004da4 <TIM_Base_SetConfig+0x118>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d023      	beq.n	8004d3e <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2b      	ldr	r2, [pc, #172]	; (8004da8 <TIM_Base_SetConfig+0x11c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01f      	beq.n	8004d3e <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2a      	ldr	r2, [pc, #168]	; (8004dac <TIM_Base_SetConfig+0x120>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d01b      	beq.n	8004d3e <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a29      	ldr	r2, [pc, #164]	; (8004db0 <TIM_Base_SetConfig+0x124>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d017      	beq.n	8004d3e <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <TIM_Base_SetConfig+0x128>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a27      	ldr	r2, [pc, #156]	; (8004db8 <TIM_Base_SetConfig+0x12c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00f      	beq.n	8004d3e <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a26      	ldr	r2, [pc, #152]	; (8004dbc <TIM_Base_SetConfig+0x130>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00b      	beq.n	8004d3e <TIM_Base_SetConfig+0xb2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a25      	ldr	r2, [pc, #148]	; (8004dc0 <TIM_Base_SetConfig+0x134>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d007      	beq.n	8004d3e <TIM_Base_SetConfig+0xb2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a24      	ldr	r2, [pc, #144]	; (8004dc4 <TIM_Base_SetConfig+0x138>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d003      	beq.n	8004d3e <TIM_Base_SetConfig+0xb2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a23      	ldr	r2, [pc, #140]	; (8004dc8 <TIM_Base_SetConfig+0x13c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d108      	bne.n	8004d50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <TIM_Base_SetConfig+0x114>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d003      	beq.n	8004d84 <TIM_Base_SetConfig+0xf8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a0c      	ldr	r2, [pc, #48]	; (8004db0 <TIM_Base_SetConfig+0x124>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d103      	bne.n	8004d8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	615a      	str	r2, [r3, #20]
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40010000 	.word	0x40010000
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800
 8004dac:	40000c00 	.word	0x40000c00
 8004db0:	40010400 	.word	0x40010400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800
 8004dc0:	40001800 	.word	0x40001800
 8004dc4:	40001c00 	.word	0x40001c00
 8004dc8:	40002000 	.word	0x40002000

08004dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e03f      	b.n	8004e86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fc fac4 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2224      	movs	r2, #36	; 0x24
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 ff71 	bl	8005d20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e021      	b.n	8004ee4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2224      	movs	r2, #36	; 0x24
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eb6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7fc fb2b 	bl	8001514 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08c      	sub	sp, #48	; 0x30
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d165      	bne.n	8004fd2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <HAL_UART_Transmit_DMA+0x26>
 8004f0c:	88fb      	ldrh	r3, [r7, #6]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e05e      	b.n	8004fd4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_UART_Transmit_DMA+0x38>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e057      	b.n	8004fd4 <HAL_UART_Transmit_DMA+0xe8>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	88fa      	ldrh	r2, [r7, #6]
 8004f36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	88fa      	ldrh	r2, [r7, #6]
 8004f3c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2221      	movs	r2, #33	; 0x21
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f50:	4a22      	ldr	r2, [pc, #136]	; (8004fdc <HAL_UART_Transmit_DMA+0xf0>)
 8004f52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	4a21      	ldr	r2, [pc, #132]	; (8004fe0 <HAL_UART_Transmit_DMA+0xf4>)
 8004f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f60:	4a20      	ldr	r2, [pc, #128]	; (8004fe4 <HAL_UART_Transmit_DMA+0xf8>)
 8004f62:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f68:	2200      	movs	r2, #0
 8004f6a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004f6c:	f107 0308 	add.w	r3, r7, #8
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	461a      	mov	r2, r3
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	f7fc feb6 	bl	8001cf4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f90:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3314      	adds	r3, #20
 8004fa0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fba:	627a      	str	r2, [r7, #36]	; 0x24
 8004fbc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	6a39      	ldr	r1, [r7, #32]
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc2:	e841 2300 	strex	r3, r2, [r1]
 8004fc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1e5      	bne.n	8004f9a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
  }
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3730      	adds	r7, #48	; 0x30
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	080055b9 	.word	0x080055b9
 8004fe0:	08005653 	.word	0x08005653
 8004fe4:	080057cb 	.word	0x080057cb

08004fe8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d11d      	bne.n	800503e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_UART_Receive_DMA+0x26>
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e016      	b.n	8005040 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_UART_Receive_DMA+0x38>
 800501c:	2302      	movs	r3, #2
 800501e:	e00f      	b.n	8005040 <HAL_UART_Receive_DMA+0x58>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	461a      	mov	r2, r3
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fc13 	bl	8005860 <UART_Start_Receive_DMA>
 800503a:	4603      	mov	r3, r0
 800503c:	e000      	b.n	8005040 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800503e:	2302      	movs	r3, #2
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b0ba      	sub	sp, #232	; 0xe8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800506e:	2300      	movs	r3, #0
 8005070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005074:	2300      	movs	r3, #0
 8005076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005086:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10f      	bne.n	80050ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800508e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <HAL_UART_IRQHandler+0x66>
 800509a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fd7f 	bl	8005baa <UART_Receive_IT>
      return;
 80050ac:	e256      	b.n	800555c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80050ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 80de 	beq.w	8005274 <HAL_UART_IRQHandler+0x22c>
 80050b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 80d1 	beq.w	8005274 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00b      	beq.n	80050f6 <HAL_UART_IRQHandler+0xae>
 80050de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f043 0201 	orr.w	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_UART_IRQHandler+0xd2>
 8005102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f043 0202 	orr.w	r2, r3, #2
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00b      	beq.n	800513e <HAL_UART_IRQHandler+0xf6>
 8005126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d005      	beq.n	800513e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f043 0204 	orr.w	r2, r3, #4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800513e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d011      	beq.n	800516e <HAL_UART_IRQHandler+0x126>
 800514a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d105      	bne.n	8005162 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	f043 0208 	orr.w	r2, r3, #8
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 81ed 	beq.w	8005552 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_UART_IRQHandler+0x14e>
 8005184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fd0a 	bl	8005baa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	bf0c      	ite	eq
 80051a4:	2301      	moveq	r3, #1
 80051a6:	2300      	movne	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <HAL_UART_IRQHandler+0x17a>
 80051ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d04f      	beq.n	8005262 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fc12 	bl	80059ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d141      	bne.n	800525a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3314      	adds	r3, #20
 80051fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005202:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800520e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800521a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1d9      	bne.n	80051d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005226:	2b00      	cmp	r3, #0
 8005228:	d013      	beq.n	8005252 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	4a7d      	ldr	r2, [pc, #500]	; (8005424 <HAL_UART_IRQHandler+0x3dc>)
 8005230:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	4618      	mov	r0, r3
 8005238:	f7fc fe24 	bl	8001e84 <HAL_DMA_Abort_IT>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800524c:	4610      	mov	r0, r2
 800524e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	e00e      	b.n	8005270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f99a 	bl	800558c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005258:	e00a      	b.n	8005270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f996 	bl	800558c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005260:	e006      	b.n	8005270 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f992 	bl	800558c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800526e:	e170      	b.n	8005552 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005270:	bf00      	nop
    return;
 8005272:	e16e      	b.n	8005552 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	2b01      	cmp	r3, #1
 800527a:	f040 814a 	bne.w	8005512 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800527e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005282:	f003 0310 	and.w	r3, r3, #16
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 8143 	beq.w	8005512 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800528c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 813c 	beq.w	8005512 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60bb      	str	r3, [r7, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	60bb      	str	r3, [r7, #8]
 80052ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	f040 80b4 	bne.w	8005428 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80052cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8140 	beq.w	8005556 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052de:	429a      	cmp	r2, r3
 80052e0:	f080 8139 	bcs.w	8005556 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f6:	f000 8088 	beq.w	800540a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	330c      	adds	r3, #12
 8005300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800532a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005332:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800533e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1d9      	bne.n	80052fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3314      	adds	r3, #20
 800534c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005350:	e853 3f00 	ldrex	r3, [r3]
 8005354:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3314      	adds	r3, #20
 8005366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800536a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800536e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005372:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800537c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e1      	bne.n	8005346 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3314      	adds	r3, #20
 8005388:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3314      	adds	r3, #20
 80053a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80053a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80053ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80053b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1e3      	bne.n	8005382 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	330c      	adds	r3, #12
 80053ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053da:	f023 0310 	bic.w	r3, r3, #16
 80053de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	330c      	adds	r3, #12
 80053e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80053ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e3      	bne.n	80053c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	4618      	mov	r0, r3
 8005406:	f7fc fccd 	bl	8001da4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005412:	b29b      	uxth	r3, r3
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	b29b      	uxth	r3, r3
 8005418:	4619      	mov	r1, r3
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8c0 	bl	80055a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005420:	e099      	b.n	8005556 <HAL_UART_IRQHandler+0x50e>
 8005422:	bf00      	nop
 8005424:	08005ab3 	.word	0x08005ab3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005430:	b29b      	uxth	r3, r3
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 808b 	beq.w	800555a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8086 	beq.w	800555a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	330c      	adds	r3, #12
 8005454:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800545e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005464:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	330c      	adds	r3, #12
 800546e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005472:	647a      	str	r2, [r7, #68]	; 0x44
 8005474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e3      	bne.n	800544e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3314      	adds	r3, #20
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	623b      	str	r3, [r7, #32]
   return(result);
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	f023 0301 	bic.w	r3, r3, #1
 800549c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3314      	adds	r3, #20
 80054a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80054aa:	633a      	str	r2, [r7, #48]	; 0x30
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e3      	bne.n	8005486 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	60fb      	str	r3, [r7, #12]
   return(result);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0310 	bic.w	r3, r3, #16
 80054e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054f0:	61fa      	str	r2, [r7, #28]
 80054f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	69b9      	ldr	r1, [r7, #24]
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	617b      	str	r3, [r7, #20]
   return(result);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e3      	bne.n	80054cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f848 	bl	80055a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005510:	e023      	b.n	800555a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800551a:	2b00      	cmp	r3, #0
 800551c:	d009      	beq.n	8005532 <HAL_UART_IRQHandler+0x4ea>
 800551e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fad5 	bl	8005ada <UART_Transmit_IT>
    return;
 8005530:	e014      	b.n	800555c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00e      	beq.n	800555c <HAL_UART_IRQHandler+0x514>
 800553e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d008      	beq.n	800555c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fb15 	bl	8005b7a <UART_EndTransmit_IT>
    return;
 8005550:	e004      	b.n	800555c <HAL_UART_IRQHandler+0x514>
    return;
 8005552:	bf00      	nop
 8005554:	e002      	b.n	800555c <HAL_UART_IRQHandler+0x514>
      return;
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <HAL_UART_IRQHandler+0x514>
      return;
 800555a:	bf00      	nop
  }
}
 800555c:	37e8      	adds	r7, #232	; 0xe8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop

08005564 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b090      	sub	sp, #64	; 0x40
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d137      	bne.n	8005644 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80055d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d6:	2200      	movs	r2, #0
 80055d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3314      	adds	r3, #20
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	623b      	str	r3, [r7, #32]
   return(result);
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80055f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3314      	adds	r3, #20
 80055f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055fa:	633a      	str	r2, [r7, #48]	; 0x30
 80055fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e5      	bne.n	80055da <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800560e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	330c      	adds	r3, #12
 8005614:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	e853 3f00 	ldrex	r3, [r3]
 800561c:	60fb      	str	r3, [r7, #12]
   return(result);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
 8005626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	330c      	adds	r3, #12
 800562c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800562e:	61fa      	str	r2, [r7, #28]
 8005630:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005632:	69b9      	ldr	r1, [r7, #24]
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	e841 2300 	strex	r3, r2, [r1]
 800563a:	617b      	str	r3, [r7, #20]
   return(result);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1e5      	bne.n	800560e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005642:	e002      	b.n	800564a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005644:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005646:	f7fa ffe1 	bl	800060c <HAL_UART_TxCpltCallback>
}
 800564a:	bf00      	nop
 800564c:	3740      	adds	r7, #64	; 0x40
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b084      	sub	sp, #16
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005660:	68f8      	ldr	r0, [r7, #12]
 8005662:	f7ff ff7f 	bl	8005564 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b09c      	sub	sp, #112	; 0x70
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d172      	bne.n	8005770 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800568a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568c:	2200      	movs	r2, #0
 800568e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80056b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3314      	adds	r3, #20
 80056ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	667b      	str	r3, [r7, #100]	; 0x64
 80056dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3314      	adds	r3, #20
 80056e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80056e4:	647a      	str	r2, [r7, #68]	; 0x44
 80056e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	623b      	str	r3, [r7, #32]
   return(result);
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800570e:	663b      	str	r3, [r7, #96]	; 0x60
 8005710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3314      	adds	r3, #20
 8005716:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005718:	633a      	str	r2, [r7, #48]	; 0x30
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800571e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e5      	bne.n	80056f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800572c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	2b01      	cmp	r3, #1
 800573a:	d119      	bne.n	8005770 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	60fb      	str	r3, [r7, #12]
   return(result);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0310 	bic.w	r3, r3, #16
 8005752:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800575c:	61fa      	str	r2, [r7, #28]
 800575e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	69b9      	ldr	r1, [r7, #24]
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	617b      	str	r3, [r7, #20]
   return(result);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	2b01      	cmp	r3, #1
 8005776:	d106      	bne.n	8005786 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800577a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800577c:	4619      	mov	r1, r3
 800577e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005780:	f7ff ff0e 	bl	80055a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005784:	e002      	b.n	800578c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005786:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005788:	f7fa ff56 	bl	8000638 <HAL_UART_RxCpltCallback>
}
 800578c:	bf00      	nop
 800578e:	3770      	adds	r7, #112	; 0x70
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d108      	bne.n	80057bc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057ae:	085b      	lsrs	r3, r3, #1
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	4619      	mov	r1, r3
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f7ff fef3 	bl	80055a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057ba:	e002      	b.n	80057c2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff fedb 	bl	8005578 <HAL_UART_RxHalfCpltCallback>
}
 80057c2:	bf00      	nop
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e6:	2b80      	cmp	r3, #128	; 0x80
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b21      	cmp	r3, #33	; 0x21
 80057fc:	d108      	bne.n	8005810 <UART_DMAError+0x46>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2200      	movs	r2, #0
 8005808:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800580a:	68b8      	ldr	r0, [r7, #8]
 800580c:	f000 f8c6 	bl	800599c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	bf0c      	ite	eq
 800581e:	2301      	moveq	r3, #1
 8005820:	2300      	movne	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b22      	cmp	r3, #34	; 0x22
 8005830:	d108      	bne.n	8005844 <UART_DMAError+0x7a>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d005      	beq.n	8005844 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2200      	movs	r2, #0
 800583c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800583e:	68b8      	ldr	r0, [r7, #8]
 8005840:	f000 f8d4 	bl	80059ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	f043 0210 	orr.w	r2, r3, #16
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005850:	68b8      	ldr	r0, [r7, #8]
 8005852:	f7ff fe9b 	bl	800558c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b098      	sub	sp, #96	; 0x60
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	4613      	mov	r3, r2
 800586c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	88fa      	ldrh	r2, [r7, #6]
 8005878:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2222      	movs	r2, #34	; 0x22
 8005884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	4a40      	ldr	r2, [pc, #256]	; (8005990 <UART_Start_Receive_DMA+0x130>)
 800588e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	4a3f      	ldr	r2, [pc, #252]	; (8005994 <UART_Start_Receive_DMA+0x134>)
 8005896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	4a3e      	ldr	r2, [pc, #248]	; (8005998 <UART_Start_Receive_DMA+0x138>)
 800589e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	2200      	movs	r2, #0
 80058a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80058a8:	f107 0308 	add.w	r3, r7, #8
 80058ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4619      	mov	r1, r3
 80058ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	f7fc fa18 	bl	8001cf4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d019      	beq.n	800591e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	330c      	adds	r3, #12
 80058f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005900:	65bb      	str	r3, [r7, #88]	; 0x58
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800590a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800590c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005910:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e5      	bne.n	80058ea <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3314      	adds	r3, #20
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	e853 3f00 	ldrex	r3, [r3]
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	657b      	str	r3, [r7, #84]	; 0x54
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3314      	adds	r3, #20
 800593c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800593e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e5      	bne.n	800591e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	3314      	adds	r3, #20
 8005958:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	617b      	str	r3, [r7, #20]
   return(result);
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005968:	653b      	str	r3, [r7, #80]	; 0x50
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3314      	adds	r3, #20
 8005970:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005972:	627a      	str	r2, [r7, #36]	; 0x24
 8005974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6a39      	ldr	r1, [r7, #32]
 8005978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e5      	bne.n	8005952 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3760      	adds	r7, #96	; 0x60
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	0800566f 	.word	0x0800566f
 8005994:	08005795 	.word	0x08005795
 8005998:	080057cb 	.word	0x080057cb

0800599c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800599c:	b480      	push	{r7}
 800599e:	b089      	sub	sp, #36	; 0x24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	330c      	adds	r3, #12
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	61ba      	str	r2, [r7, #24]
 80059c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6979      	ldr	r1, [r7, #20]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	613b      	str	r3, [r7, #16]
   return(result);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e5      	bne.n	80059a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80059e0:	bf00      	nop
 80059e2:	3724      	adds	r7, #36	; 0x24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b095      	sub	sp, #84	; 0x54
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	330c      	adds	r3, #12
 80059fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a14:	643a      	str	r2, [r7, #64]	; 0x40
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e5      	bne.n	80059f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3314      	adds	r3, #20
 8005a2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3314      	adds	r3, #20
 8005a46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e5      	bne.n	8005a28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d119      	bne.n	8005a98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	330c      	adds	r3, #12
 8005a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f023 0310 	bic.w	r3, r3, #16
 8005a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a84:	61ba      	str	r2, [r7, #24]
 8005a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6979      	ldr	r1, [r7, #20]
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	613b      	str	r3, [r7, #16]
   return(result);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e5      	bne.n	8005a64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005aa6:	bf00      	nop
 8005aa8:	3754      	adds	r7, #84	; 0x54
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f7ff fd5d 	bl	800558c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b21      	cmp	r3, #33	; 0x21
 8005aec:	d13e      	bne.n	8005b6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af6:	d114      	bne.n	8005b22 <UART_Transmit_IT+0x48>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d110      	bne.n	8005b22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	621a      	str	r2, [r3, #32]
 8005b20:	e008      	b.n	8005b34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	1c59      	adds	r1, r3, #1
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6211      	str	r1, [r2, #32]
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	4619      	mov	r1, r3
 8005b42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10f      	bne.n	8005b68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68da      	ldr	r2, [r3, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e000      	b.n	8005b6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b6c:	2302      	movs	r3, #2
  }
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fa fd36 	bl	800060c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3708      	adds	r7, #8
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b08c      	sub	sp, #48	; 0x30
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b22      	cmp	r3, #34	; 0x22
 8005bbc:	f040 80ab 	bne.w	8005d16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc8:	d117      	bne.n	8005bfa <UART_Receive_IT+0x50>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d113      	bne.n	8005bfa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	1c9a      	adds	r2, r3, #2
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	629a      	str	r2, [r3, #40]	; 0x28
 8005bf8:	e026      	b.n	8005c48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0c:	d007      	beq.n	8005c1e <UART_Receive_IT+0x74>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10a      	bne.n	8005c2c <UART_Receive_IT+0x82>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	e008      	b.n	8005c3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4619      	mov	r1, r3
 8005c56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d15a      	bne.n	8005d12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0220 	bic.w	r2, r2, #32
 8005c6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68da      	ldr	r2, [r3, #12]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d135      	bne.n	8005d08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	330c      	adds	r3, #12
 8005ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f023 0310 	bic.w	r3, r3, #16
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc2:	623a      	str	r2, [r7, #32]
 8005cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc6:	69f9      	ldr	r1, [r7, #28]
 8005cc8:	6a3a      	ldr	r2, [r7, #32]
 8005cca:	e841 2300 	strex	r3, r2, [r1]
 8005cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1e5      	bne.n	8005ca2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b10      	cmp	r3, #16
 8005ce2:	d10a      	bne.n	8005cfa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff fc4d 	bl	80055a0 <HAL_UARTEx_RxEventCallback>
 8005d06:	e002      	b.n	8005d0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7fa fc95 	bl	8000638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e002      	b.n	8005d18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e000      	b.n	8005d18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d16:	2302      	movs	r3, #2
  }
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3730      	adds	r7, #48	; 0x30
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	b09f      	sub	sp, #124	; 0x7c
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d36:	68d9      	ldr	r1, [r3, #12]
 8005d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	ea40 0301 	orr.w	r3, r0, r1
 8005d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d64:	f021 010c 	bic.w	r1, r1, #12
 8005d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	6999      	ldr	r1, [r3, #24]
 8005d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	ea40 0301 	orr.w	r3, r0, r1
 8005d88:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4bc5      	ldr	r3, [pc, #788]	; (80060a4 <UART_SetConfig+0x384>)
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d004      	beq.n	8005d9e <UART_SetConfig+0x7e>
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4bc3      	ldr	r3, [pc, #780]	; (80060a8 <UART_SetConfig+0x388>)
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d103      	bne.n	8005da6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d9e:	f7fd fcbb 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8005da2:	6778      	str	r0, [r7, #116]	; 0x74
 8005da4:	e002      	b.n	8005dac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005da6:	f7fd fca3 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 8005daa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db4:	f040 80b6 	bne.w	8005f24 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dba:	461c      	mov	r4, r3
 8005dbc:	f04f 0500 	mov.w	r5, #0
 8005dc0:	4622      	mov	r2, r4
 8005dc2:	462b      	mov	r3, r5
 8005dc4:	1891      	adds	r1, r2, r2
 8005dc6:	6439      	str	r1, [r7, #64]	; 0x40
 8005dc8:	415b      	adcs	r3, r3
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44
 8005dcc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005dd0:	1912      	adds	r2, r2, r4
 8005dd2:	eb45 0303 	adc.w	r3, r5, r3
 8005dd6:	f04f 0000 	mov.w	r0, #0
 8005dda:	f04f 0100 	mov.w	r1, #0
 8005dde:	00d9      	lsls	r1, r3, #3
 8005de0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005de4:	00d0      	lsls	r0, r2, #3
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	1911      	adds	r1, r2, r4
 8005dec:	6639      	str	r1, [r7, #96]	; 0x60
 8005dee:	416b      	adcs	r3, r5
 8005df0:	667b      	str	r3, [r7, #100]	; 0x64
 8005df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	461a      	mov	r2, r3
 8005df8:	f04f 0300 	mov.w	r3, #0
 8005dfc:	1891      	adds	r1, r2, r2
 8005dfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e00:	415b      	adcs	r3, r3
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e0c:	f7fa fa38 	bl	8000280 <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4ba5      	ldr	r3, [pc, #660]	; (80060ac <UART_SetConfig+0x38c>)
 8005e16:	fba3 2302 	umull	r2, r3, r3, r2
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	011e      	lsls	r6, r3, #4
 8005e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e20:	461c      	mov	r4, r3
 8005e22:	f04f 0500 	mov.w	r5, #0
 8005e26:	4622      	mov	r2, r4
 8005e28:	462b      	mov	r3, r5
 8005e2a:	1891      	adds	r1, r2, r2
 8005e2c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e2e:	415b      	adcs	r3, r3
 8005e30:	637b      	str	r3, [r7, #52]	; 0x34
 8005e32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e36:	1912      	adds	r2, r2, r4
 8005e38:	eb45 0303 	adc.w	r3, r5, r3
 8005e3c:	f04f 0000 	mov.w	r0, #0
 8005e40:	f04f 0100 	mov.w	r1, #0
 8005e44:	00d9      	lsls	r1, r3, #3
 8005e46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e4a:	00d0      	lsls	r0, r2, #3
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	1911      	adds	r1, r2, r4
 8005e52:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e54:	416b      	adcs	r3, r5
 8005e56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	1891      	adds	r1, r2, r2
 8005e64:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e66:	415b      	adcs	r3, r3
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e6e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e72:	f7fa fa05 	bl	8000280 <__aeabi_uldivmod>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4b8c      	ldr	r3, [pc, #560]	; (80060ac <UART_SetConfig+0x38c>)
 8005e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	2164      	movs	r1, #100	; 0x64
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	3332      	adds	r3, #50	; 0x32
 8005e8e:	4a87      	ldr	r2, [pc, #540]	; (80060ac <UART_SetConfig+0x38c>)
 8005e90:	fba2 2303 	umull	r2, r3, r2, r3
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e9c:	441e      	add	r6, r3
 8005e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f04f 0100 	mov.w	r1, #0
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	1894      	adds	r4, r2, r2
 8005eac:	623c      	str	r4, [r7, #32]
 8005eae:	415b      	adcs	r3, r3
 8005eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eb6:	1812      	adds	r2, r2, r0
 8005eb8:	eb41 0303 	adc.w	r3, r1, r3
 8005ebc:	f04f 0400 	mov.w	r4, #0
 8005ec0:	f04f 0500 	mov.w	r5, #0
 8005ec4:	00dd      	lsls	r5, r3, #3
 8005ec6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005eca:	00d4      	lsls	r4, r2, #3
 8005ecc:	4622      	mov	r2, r4
 8005ece:	462b      	mov	r3, r5
 8005ed0:	1814      	adds	r4, r2, r0
 8005ed2:	653c      	str	r4, [r7, #80]	; 0x50
 8005ed4:	414b      	adcs	r3, r1
 8005ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	461a      	mov	r2, r3
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	1891      	adds	r1, r2, r2
 8005ee4:	61b9      	str	r1, [r7, #24]
 8005ee6:	415b      	adcs	r3, r3
 8005ee8:	61fb      	str	r3, [r7, #28]
 8005eea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ef2:	f7fa f9c5 	bl	8000280 <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4b6c      	ldr	r3, [pc, #432]	; (80060ac <UART_SetConfig+0x38c>)
 8005efc:	fba3 1302 	umull	r1, r3, r3, r2
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	2164      	movs	r1, #100	; 0x64
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	3332      	adds	r3, #50	; 0x32
 8005f0e:	4a67      	ldr	r2, [pc, #412]	; (80060ac <UART_SetConfig+0x38c>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	f003 0207 	and.w	r2, r3, #7
 8005f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4432      	add	r2, r6
 8005f20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f22:	e0b9      	b.n	8006098 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f26:	461c      	mov	r4, r3
 8005f28:	f04f 0500 	mov.w	r5, #0
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	462b      	mov	r3, r5
 8005f30:	1891      	adds	r1, r2, r2
 8005f32:	6139      	str	r1, [r7, #16]
 8005f34:	415b      	adcs	r3, r3
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f3c:	1912      	adds	r2, r2, r4
 8005f3e:	eb45 0303 	adc.w	r3, r5, r3
 8005f42:	f04f 0000 	mov.w	r0, #0
 8005f46:	f04f 0100 	mov.w	r1, #0
 8005f4a:	00d9      	lsls	r1, r3, #3
 8005f4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f50:	00d0      	lsls	r0, r2, #3
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	eb12 0804 	adds.w	r8, r2, r4
 8005f5a:	eb43 0905 	adc.w	r9, r3, r5
 8005f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f04f 0100 	mov.w	r1, #0
 8005f68:	f04f 0200 	mov.w	r2, #0
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	008b      	lsls	r3, r1, #2
 8005f72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f76:	0082      	lsls	r2, r0, #2
 8005f78:	4640      	mov	r0, r8
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	f7fa f980 	bl	8000280 <__aeabi_uldivmod>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4b49      	ldr	r3, [pc, #292]	; (80060ac <UART_SetConfig+0x38c>)
 8005f86:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8a:	095b      	lsrs	r3, r3, #5
 8005f8c:	011e      	lsls	r6, r3, #4
 8005f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f90:	4618      	mov	r0, r3
 8005f92:	f04f 0100 	mov.w	r1, #0
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	1894      	adds	r4, r2, r2
 8005f9c:	60bc      	str	r4, [r7, #8]
 8005f9e:	415b      	adcs	r3, r3
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fa6:	1812      	adds	r2, r2, r0
 8005fa8:	eb41 0303 	adc.w	r3, r1, r3
 8005fac:	f04f 0400 	mov.w	r4, #0
 8005fb0:	f04f 0500 	mov.w	r5, #0
 8005fb4:	00dd      	lsls	r5, r3, #3
 8005fb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fba:	00d4      	lsls	r4, r2, #3
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	462b      	mov	r3, r5
 8005fc0:	1814      	adds	r4, r2, r0
 8005fc2:	64bc      	str	r4, [r7, #72]	; 0x48
 8005fc4:	414b      	adcs	r3, r1
 8005fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f04f 0100 	mov.w	r1, #0
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	008b      	lsls	r3, r1, #2
 8005fdc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fe0:	0082      	lsls	r2, r0, #2
 8005fe2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fe6:	f7fa f94b 	bl	8000280 <__aeabi_uldivmod>
 8005fea:	4602      	mov	r2, r0
 8005fec:	460b      	mov	r3, r1
 8005fee:	4b2f      	ldr	r3, [pc, #188]	; (80060ac <UART_SetConfig+0x38c>)
 8005ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	2164      	movs	r1, #100	; 0x64
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	3332      	adds	r3, #50	; 0x32
 8006002:	4a2a      	ldr	r2, [pc, #168]	; (80060ac <UART_SetConfig+0x38c>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800600e:	441e      	add	r6, r3
 8006010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006012:	4618      	mov	r0, r3
 8006014:	f04f 0100 	mov.w	r1, #0
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	1894      	adds	r4, r2, r2
 800601e:	603c      	str	r4, [r7, #0]
 8006020:	415b      	adcs	r3, r3
 8006022:	607b      	str	r3, [r7, #4]
 8006024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006028:	1812      	adds	r2, r2, r0
 800602a:	eb41 0303 	adc.w	r3, r1, r3
 800602e:	f04f 0400 	mov.w	r4, #0
 8006032:	f04f 0500 	mov.w	r5, #0
 8006036:	00dd      	lsls	r5, r3, #3
 8006038:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800603c:	00d4      	lsls	r4, r2, #3
 800603e:	4622      	mov	r2, r4
 8006040:	462b      	mov	r3, r5
 8006042:	eb12 0a00 	adds.w	sl, r2, r0
 8006046:	eb43 0b01 	adc.w	fp, r3, r1
 800604a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	4618      	mov	r0, r3
 8006050:	f04f 0100 	mov.w	r1, #0
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	008b      	lsls	r3, r1, #2
 800605e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006062:	0082      	lsls	r2, r0, #2
 8006064:	4650      	mov	r0, sl
 8006066:	4659      	mov	r1, fp
 8006068:	f7fa f90a 	bl	8000280 <__aeabi_uldivmod>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <UART_SetConfig+0x38c>)
 8006072:	fba3 1302 	umull	r1, r3, r3, r2
 8006076:	095b      	lsrs	r3, r3, #5
 8006078:	2164      	movs	r1, #100	; 0x64
 800607a:	fb01 f303 	mul.w	r3, r1, r3
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	3332      	adds	r3, #50	; 0x32
 8006084:	4a09      	ldr	r2, [pc, #36]	; (80060ac <UART_SetConfig+0x38c>)
 8006086:	fba2 2303 	umull	r2, r3, r2, r3
 800608a:	095b      	lsrs	r3, r3, #5
 800608c:	f003 020f 	and.w	r2, r3, #15
 8006090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4432      	add	r2, r6
 8006096:	609a      	str	r2, [r3, #8]
}
 8006098:	bf00      	nop
 800609a:	377c      	adds	r7, #124	; 0x7c
 800609c:	46bd      	mov	sp, r7
 800609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060a2:	bf00      	nop
 80060a4:	40011000 	.word	0x40011000
 80060a8:	40011400 	.word	0x40011400
 80060ac:	51eb851f 	.word	0x51eb851f

080060b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4603      	mov	r3, r0
 80060b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80060be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060c2:	2b84      	cmp	r3, #132	; 0x84
 80060c4:	d005      	beq.n	80060d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80060c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	3303      	adds	r3, #3
 80060d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80060d2:	68fb      	ldr	r3, [r7, #12]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060e6:	f3ef 8305 	mrs	r3, IPSR
 80060ea:	607b      	str	r3, [r7, #4]
  return(result);
 80060ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	bf14      	ite	ne
 80060f2:	2301      	movne	r3, #1
 80060f4:	2300      	moveq	r3, #0
 80060f6:	b2db      	uxtb	r3, r3
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006108:	f001 ffb0 	bl	800806c <vTaskStartScheduler>
  
  return osOK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	bd80      	pop	{r7, pc}

08006112 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006114:	b089      	sub	sp, #36	; 0x24
 8006116:	af04      	add	r7, sp, #16
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d020      	beq.n	8006166 <osThreadCreate+0x54>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01c      	beq.n	8006166 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685c      	ldr	r4, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681d      	ldr	r5, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691e      	ldr	r6, [r3, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff ffb6 	bl	80060b0 <makeFreeRtosPriority>
 8006144:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800614e:	9202      	str	r2, [sp, #8]
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	9100      	str	r1, [sp, #0]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	4632      	mov	r2, r6
 8006158:	4629      	mov	r1, r5
 800615a:	4620      	mov	r0, r4
 800615c:	f001 fc14 	bl	8007988 <xTaskCreateStatic>
 8006160:	4603      	mov	r3, r0
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	e01c      	b.n	80061a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685c      	ldr	r4, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006172:	b29e      	uxth	r6, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff ff98 	bl	80060b0 <makeFreeRtosPriority>
 8006180:	4602      	mov	r2, r0
 8006182:	f107 030c 	add.w	r3, r7, #12
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	9200      	str	r2, [sp, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	4632      	mov	r2, r6
 800618e:	4629      	mov	r1, r5
 8006190:	4620      	mov	r0, r4
 8006192:	f001 fc56 	bl	8007a42 <xTaskCreate>
 8006196:	4603      	mov	r3, r0
 8006198:	2b01      	cmp	r3, #1
 800619a:	d001      	beq.n	80061a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800619c:	2300      	movs	r3, #0
 800619e:	e000      	b.n	80061a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80061a0:	68fb      	ldr	r3, [r7, #12]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <osDelay+0x16>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	e000      	b.n	80061c2 <osDelay+0x18>
 80061c0:	2301      	movs	r3, #1
 80061c2:	4618      	mov	r0, r3
 80061c4:	f001 fd8a 	bl	8007cdc <vTaskDelay>
  
  return osOK;
 80061c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	460b      	mov	r3, r1
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d013      	beq.n	8006212 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <osTimerCreate+0x20>
 80061f0:	2101      	movs	r1, #1
 80061f2:	e000      	b.n	80061f6 <osTimerCreate+0x22>
 80061f4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80061fe:	9201      	str	r2, [sp, #4]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	460a      	mov	r2, r1
 8006206:	2101      	movs	r1, #1
 8006208:	480b      	ldr	r0, [pc, #44]	; (8006238 <osTimerCreate+0x64>)
 800620a:	f002 fe0e 	bl	8008e2a <xTimerCreateStatic>
 800620e:	4603      	mov	r3, r0
 8006210:	e00e      	b.n	8006230 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8006212:	7afb      	ldrb	r3, [r7, #11]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <osTimerCreate+0x48>
 8006218:	2201      	movs	r2, #1
 800621a:	e000      	b.n	800621e <osTimerCreate+0x4a>
 800621c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2101      	movs	r1, #1
 8006228:	4803      	ldr	r0, [pc, #12]	; (8006238 <osTimerCreate+0x64>)
 800622a:	f002 fddd 	bl	8008de8 <xTimerCreate>
 800622e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8006230:	4618      	mov	r0, r3
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	0800f2c4 	.word	0x0800f2c4

0800623c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af02      	add	r7, sp, #8
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <osTimerStart+0x20>
    ticks = 1;
 8006258:	2301      	movs	r3, #1
 800625a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800625c:	f7ff ff40 	bl	80060e0 <inHandlerMode>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d01a      	beq.n	800629c <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8006266:	f107 030c 	add.w	r3, r7, #12
 800626a:	2200      	movs	r2, #0
 800626c:	9200      	str	r2, [sp, #0]
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	2109      	movs	r1, #9
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f002 fe52 	bl	8008f1c <xTimerGenericCommand>
 8006278:	4603      	mov	r3, r0
 800627a:	2b01      	cmp	r3, #1
 800627c:	d002      	beq.n	8006284 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800627e:	23ff      	movs	r3, #255	; 0xff
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	e018      	b.n	80062b6 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d015      	beq.n	80062b6 <osTimerStart+0x7a>
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <osTimerStart+0x84>)
 800628c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	e00c      	b.n	80062b6 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800629c:	2300      	movs	r3, #0
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	2300      	movs	r3, #0
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	2104      	movs	r1, #4
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f002 fe38 	bl	8008f1c <xTimerGenericCommand>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d001      	beq.n	80062b6 <osTimerStart+0x7a>
      result = osErrorOS;
 80062b2:	23ff      	movs	r3, #255	; 0xff
 80062b4:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80062b6:	697b      	ldr	r3, [r7, #20]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3718      	adds	r7, #24
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 80062d4:	f7ff ff04 	bl	80060e0 <inHandlerMode>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d019      	beq.n	8006312 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80062de:	f107 0308 	add.w	r3, r7, #8
 80062e2:	2200      	movs	r2, #0
 80062e4:	9200      	str	r2, [sp, #0]
 80062e6:	2200      	movs	r2, #0
 80062e8:	2108      	movs	r1, #8
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f002 fe16 	bl	8008f1c <xTimerGenericCommand>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d001      	beq.n	80062fa <osTimerStop+0x36>
      return osErrorOS;
 80062f6:	23ff      	movs	r3, #255	; 0xff
 80062f8:	e019      	b.n	800632e <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d015      	beq.n	800632c <osTimerStop+0x68>
 8006300:	4b0d      	ldr	r3, [pc, #52]	; (8006338 <osTimerStop+0x74>)
 8006302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	e00c      	b.n	800632c <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8006312:	2300      	movs	r3, #0
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	2300      	movs	r3, #0
 8006318:	2200      	movs	r2, #0
 800631a:	2103      	movs	r1, #3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f002 fdfd 	bl	8008f1c <xTimerGenericCommand>
 8006322:	4603      	mov	r3, r0
 8006324:	2b01      	cmp	r3, #1
 8006326:	d001      	beq.n	800632c <osTimerStop+0x68>
      result = osErrorOS;
 8006328:	23ff      	movs	r3, #255	; 0xff
 800632a:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800632c:	68fb      	ldr	r3, [r7, #12]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4619      	mov	r1, r3
 8006352:	2001      	movs	r0, #1
 8006354:	f000 fc7b 	bl	8006c4e <xQueueCreateMutexStatic>
 8006358:	4603      	mov	r3, r0
 800635a:	e003      	b.n	8006364 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800635c:	2001      	movs	r0, #1
 800635e:	f000 fc5e 	bl	8006c1e <xQueueCreateMutex>
 8006362:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006364:	4618      	mov	r0, r3
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006376:	2300      	movs	r3, #0
 8006378:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <osMutexWait+0x18>
    return osErrorParameter;
 8006380:	2380      	movs	r3, #128	; 0x80
 8006382:	e03a      	b.n	80063fa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006384:	2300      	movs	r3, #0
 8006386:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d103      	bne.n	8006398 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006390:	f04f 33ff 	mov.w	r3, #4294967295
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	e009      	b.n	80063ac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d006      	beq.n	80063ac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d101      	bne.n	80063ac <osMutexWait+0x40>
      ticks = 1;
 80063a8:	2301      	movs	r3, #1
 80063aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80063ac:	f7ff fe98 	bl	80060e0 <inHandlerMode>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d017      	beq.n	80063e6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80063b6:	f107 0308 	add.w	r3, r7, #8
 80063ba:	461a      	mov	r2, r3
 80063bc:	2100      	movs	r1, #0
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 f8dc 	bl	800757c <xQueueReceiveFromISR>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d001      	beq.n	80063ce <osMutexWait+0x62>
      return osErrorOS;
 80063ca:	23ff      	movs	r3, #255	; 0xff
 80063cc:	e015      	b.n	80063fa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d011      	beq.n	80063f8 <osMutexWait+0x8c>
 80063d4:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <osMutexWait+0x98>)
 80063d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	e008      	b.n	80063f8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80063e6:	68f9      	ldr	r1, [r7, #12]
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 ffbb 	bl	8007364 <xQueueSemaphoreTake>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d001      	beq.n	80063f8 <osMutexWait+0x8c>
    return osErrorOS;
 80063f4:	23ff      	movs	r3, #255	; 0xff
 80063f6:	e000      	b.n	80063fa <osMutexWait+0x8e>
  }
  
  return osOK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	e000ed04 	.word	0xe000ed04

08006408 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006414:	2300      	movs	r3, #0
 8006416:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006418:	f7ff fe62 	bl	80060e0 <inHandlerMode>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006422:	f107 0308 	add.w	r3, r7, #8
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fe2e 	bl	800708a <xQueueGiveFromISR>
 800642e:	4603      	mov	r3, r0
 8006430:	2b01      	cmp	r3, #1
 8006432:	d001      	beq.n	8006438 <osMutexRelease+0x30>
      return osErrorOS;
 8006434:	23ff      	movs	r3, #255	; 0xff
 8006436:	e017      	b.n	8006468 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d013      	beq.n	8006466 <osMutexRelease+0x5e>
 800643e:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <osMutexRelease+0x68>)
 8006440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	e00a      	b.n	8006466 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006450:	2300      	movs	r3, #0
 8006452:	2200      	movs	r2, #0
 8006454:	2100      	movs	r1, #0
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fc7e 	bl	8006d58 <xQueueGenericSend>
 800645c:	4603      	mov	r3, r0
 800645e:	2b01      	cmp	r3, #1
 8006460:	d001      	beq.n	8006466 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006462:	23ff      	movs	r3, #255	; 0xff
 8006464:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006466:	68fb      	ldr	r3, [r7, #12]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	e000ed04 	.word	0xe000ed04

08006474 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af02      	add	r7, sp, #8
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d016      	beq.n	80064b4 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d10a      	bne.n	80064a2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2203      	movs	r2, #3
 8006492:	9200      	str	r2, [sp, #0]
 8006494:	2200      	movs	r2, #0
 8006496:	2100      	movs	r1, #0
 8006498:	2001      	movs	r0, #1
 800649a:	f000 fad5 	bl	8006a48 <xQueueGenericCreateStatic>
 800649e:	4603      	mov	r3, r0
 80064a0:	e023      	b.n	80064ea <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80064a2:	6838      	ldr	r0, [r7, #0]
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f000 fbea 	bl	8006c84 <xQueueCreateCountingSemaphoreStatic>
 80064b0:	4603      	mov	r3, r0
 80064b2:	e01a      	b.n	80064ea <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d110      	bne.n	80064dc <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 80064ba:	2203      	movs	r2, #3
 80064bc:	2100      	movs	r1, #0
 80064be:	2001      	movs	r0, #1
 80064c0:	f000 fb3a 	bl	8006b38 <xQueueGenericCreate>
 80064c4:	60f8      	str	r0, [r7, #12]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <osSemaphoreCreate+0x64>
 80064cc:	2300      	movs	r3, #0
 80064ce:	2200      	movs	r2, #0
 80064d0:	2100      	movs	r1, #0
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f000 fc40 	bl	8006d58 <xQueueGenericSend>
      return sema;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	e006      	b.n	80064ea <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	4611      	mov	r1, r2
 80064e2:	4618      	mov	r0, r3
 80064e4:	f000 fc05 	bl	8006cf2 <xQueueCreateCountingSemaphore>
 80064e8:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80064fe:	2300      	movs	r3, #0
 8006500:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006508:	2380      	movs	r3, #128	; 0x80
 800650a:	e03a      	b.n	8006582 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800650c:	2300      	movs	r3, #0
 800650e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006516:	d103      	bne.n	8006520 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
 800651c:	60fb      	str	r3, [r7, #12]
 800651e:	e009      	b.n	8006534 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d006      	beq.n	8006534 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <osSemaphoreWait+0x40>
      ticks = 1;
 8006530:	2301      	movs	r3, #1
 8006532:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006534:	f7ff fdd4 	bl	80060e0 <inHandlerMode>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d017      	beq.n	800656e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800653e:	f107 0308 	add.w	r3, r7, #8
 8006542:	461a      	mov	r2, r3
 8006544:	2100      	movs	r1, #0
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 f818 	bl	800757c <xQueueReceiveFromISR>
 800654c:	4603      	mov	r3, r0
 800654e:	2b01      	cmp	r3, #1
 8006550:	d001      	beq.n	8006556 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006552:	23ff      	movs	r3, #255	; 0xff
 8006554:	e015      	b.n	8006582 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d011      	beq.n	8006580 <osSemaphoreWait+0x8c>
 800655c:	4b0b      	ldr	r3, [pc, #44]	; (800658c <osSemaphoreWait+0x98>)
 800655e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	e008      	b.n	8006580 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800656e:	68f9      	ldr	r1, [r7, #12]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fef7 	bl	8007364 <xQueueSemaphoreTake>
 8006576:	4603      	mov	r3, r0
 8006578:	2b01      	cmp	r3, #1
 800657a:	d001      	beq.n	8006580 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800657c:	23ff      	movs	r3, #255	; 0xff
 800657e:	e000      	b.n	8006582 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	e000ed04 	.word	0xe000ed04

08006590 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006598:	2300      	movs	r3, #0
 800659a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800659c:	2300      	movs	r3, #0
 800659e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80065a0:	f7ff fd9e 	bl	80060e0 <inHandlerMode>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d016      	beq.n	80065d8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80065aa:	f107 0308 	add.w	r3, r7, #8
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fd6a 	bl	800708a <xQueueGiveFromISR>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d001      	beq.n	80065c0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80065bc:	23ff      	movs	r3, #255	; 0xff
 80065be:	e017      	b.n	80065f0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d013      	beq.n	80065ee <osSemaphoreRelease+0x5e>
 80065c6:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <osSemaphoreRelease+0x68>)
 80065c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	e00a      	b.n	80065ee <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80065d8:	2300      	movs	r3, #0
 80065da:	2200      	movs	r2, #0
 80065dc:	2100      	movs	r1, #0
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fbba 	bl	8006d58 <xQueueGenericSend>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d001      	beq.n	80065ee <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80065ea:	23ff      	movs	r3, #255	; 0xff
 80065ec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80065ee:	68fb      	ldr	r3, [r7, #12]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b085      	sub	sp, #20
 8006600:	af02      	add	r7, sp, #8
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d011      	beq.n	8006632 <osMessageCreate+0x36>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00d      	beq.n	8006632 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6859      	ldr	r1, [r3, #4]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	2400      	movs	r4, #0
 8006628:	9400      	str	r4, [sp, #0]
 800662a:	f000 fa0d 	bl	8006a48 <xQueueGenericCreateStatic>
 800662e:	4603      	mov	r3, r0
 8006630:	e008      	b.n	8006644 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	4619      	mov	r1, r3
 800663e:	f000 fa7b 	bl	8006b38 <xQueueGenericCreate>
 8006642:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006644:	4618      	mov	r0, r3
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	bd90      	pop	{r4, r7, pc}

0800664c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006658:	2300      	movs	r3, #0
 800665a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <osMessagePut+0x1e>
    ticks = 1;
 8006666:	2301      	movs	r3, #1
 8006668:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800666a:	f7ff fd39 	bl	80060e0 <inHandlerMode>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d018      	beq.n	80066a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006674:	f107 0210 	add.w	r2, r7, #16
 8006678:	f107 0108 	add.w	r1, r7, #8
 800667c:	2300      	movs	r3, #0
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f000 fc68 	bl	8006f54 <xQueueGenericSendFromISR>
 8006684:	4603      	mov	r3, r0
 8006686:	2b01      	cmp	r3, #1
 8006688:	d001      	beq.n	800668e <osMessagePut+0x42>
      return osErrorOS;
 800668a:	23ff      	movs	r3, #255	; 0xff
 800668c:	e018      	b.n	80066c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d014      	beq.n	80066be <osMessagePut+0x72>
 8006694:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <osMessagePut+0x7c>)
 8006696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	e00b      	b.n	80066be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80066a6:	f107 0108 	add.w	r1, r7, #8
 80066aa:	2300      	movs	r3, #0
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fb52 	bl	8006d58 <xQueueGenericSend>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d001      	beq.n	80066be <osMessagePut+0x72>
      return osErrorOS;
 80066ba:	23ff      	movs	r3, #255	; 0xff
 80066bc:	e000      	b.n	80066c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	e000ed04 	.word	0xe000ed04

080066cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80066cc:	b590      	push	{r4, r7, lr}
 80066ce:	b08b      	sub	sp, #44	; 0x2c
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10a      	bne.n	80066fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80066e6:	2380      	movs	r3, #128	; 0x80
 80066e8:	617b      	str	r3, [r7, #20]
    return event;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	461c      	mov	r4, r3
 80066ee:	f107 0314 	add.w	r3, r7, #20
 80066f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80066f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80066fa:	e054      	b.n	80067a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80066fc:	2300      	movs	r3, #0
 80066fe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006700:	2300      	movs	r3, #0
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d103      	bne.n	8006714 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800670c:	f04f 33ff 	mov.w	r3, #4294967295
 8006710:	627b      	str	r3, [r7, #36]	; 0x24
 8006712:	e009      	b.n	8006728 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d006      	beq.n	8006728 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <osMessageGet+0x5c>
      ticks = 1;
 8006724:	2301      	movs	r3, #1
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006728:	f7ff fcda 	bl	80060e0 <inHandlerMode>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01c      	beq.n	800676c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006732:	f107 0220 	add.w	r2, r7, #32
 8006736:	f107 0314 	add.w	r3, r7, #20
 800673a:	3304      	adds	r3, #4
 800673c:	4619      	mov	r1, r3
 800673e:	68b8      	ldr	r0, [r7, #8]
 8006740:	f000 ff1c 	bl	800757c <xQueueReceiveFromISR>
 8006744:	4603      	mov	r3, r0
 8006746:	2b01      	cmp	r3, #1
 8006748:	d102      	bne.n	8006750 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800674a:	2310      	movs	r3, #16
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	e001      	b.n	8006754 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01d      	beq.n	8006796 <osMessageGet+0xca>
 800675a:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <osMessageGet+0xe4>)
 800675c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	e014      	b.n	8006796 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800676c:	f107 0314 	add.w	r3, r7, #20
 8006770:	3304      	adds	r3, #4
 8006772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006774:	4619      	mov	r1, r3
 8006776:	68b8      	ldr	r0, [r7, #8]
 8006778:	f000 fd14 	bl	80071a4 <xQueueReceive>
 800677c:	4603      	mov	r3, r0
 800677e:	2b01      	cmp	r3, #1
 8006780:	d102      	bne.n	8006788 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006782:	2310      	movs	r3, #16
 8006784:	617b      	str	r3, [r7, #20]
 8006786:	e006      	b.n	8006796 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <osMessageGet+0xc6>
 800678e:	2300      	movs	r3, #0
 8006790:	e000      	b.n	8006794 <osMessageGet+0xc8>
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	461c      	mov	r4, r3
 800679a:	f107 0314 	add.w	r3, r7, #20
 800679e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80067a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	372c      	adds	r7, #44	; 0x2c
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd90      	pop	{r4, r7, pc}
 80067ae:	bf00      	nop
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 fac1 	bl	8007d44 <vTaskSuspend>
  
  return osOK;
 80067c2:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80067d4:	f7ff fc84 	bl	80060e0 <inHandlerMode>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00e      	beq.n	80067fc <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 fbd2 	bl	8007f88 <xTaskResumeFromISR>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d10b      	bne.n	8006802 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80067ea:	4b08      	ldr	r3, [pc, #32]	; (800680c <osThreadResume+0x40>)
 80067ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	e002      	b.n	8006802 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 fb65 	bl	8007ecc <vTaskResume>
  }
  return osOK;
 8006802:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8006804:	4618      	mov	r0, r3
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	e000ed04 	.word	0xe000ed04

08006810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f103 0208 	add.w	r2, r3, #8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f04f 32ff 	mov.w	r2, #4294967295
 8006828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f103 0208 	add.w	r2, r3, #8
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f103 0208 	add.w	r2, r3, #8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
}
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068b2:	b480      	push	{r7}
 80068b4:	b085      	sub	sp, #20
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d103      	bne.n	80068d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	691b      	ldr	r3, [r3, #16]
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e00c      	b.n	80068ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3308      	adds	r3, #8
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	e002      	b.n	80068e0 <vListInsert+0x2e>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d2f6      	bcs.n	80068da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	601a      	str	r2, [r3, #0]
}
 8006918:	bf00      	nop
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006924:	b480      	push	{r7}
 8006926:	b085      	sub	sp, #20
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	6892      	ldr	r2, [r2, #8]
 800693a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6852      	ldr	r2, [r2, #4]
 8006944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	429a      	cmp	r2, r3
 800694e:	d103      	bne.n	8006958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	1e5a      	subs	r2, r3, #1
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069a2:	f002 fecf 	bl	8009744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ae:	68f9      	ldr	r1, [r7, #12]
 80069b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	441a      	add	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	3b01      	subs	r3, #1
 80069d4:	68f9      	ldr	r1, [r7, #12]
 80069d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	441a      	add	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	22ff      	movs	r2, #255	; 0xff
 80069e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	22ff      	movs	r2, #255	; 0xff
 80069ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d114      	bne.n	8006a22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01a      	beq.n	8006a36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3310      	adds	r3, #16
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 fdc5 	bl	8008594 <xTaskRemoveFromEventList>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d012      	beq.n	8006a36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a10:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <xQueueGenericReset+0xcc>)
 8006a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	e009      	b.n	8006a36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3310      	adds	r3, #16
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff fef2 	bl	8006810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3324      	adds	r3, #36	; 0x24
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff feed 	bl	8006810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a36:	f002 feb5 	bl	80097a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a3a:	2301      	movs	r3, #1
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08e      	sub	sp, #56	; 0x38
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a8a:	bf00      	nop
 8006a8c:	e7fe      	b.n	8006a8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <xQueueGenericCreateStatic+0x52>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <xQueueGenericCreateStatic+0x56>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e000      	b.n	8006aa0 <xQueueGenericCreateStatic+0x58>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	623b      	str	r3, [r7, #32]
}
 8006ab6:	bf00      	nop
 8006ab8:	e7fe      	b.n	8006ab8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d102      	bne.n	8006ac6 <xQueueGenericCreateStatic+0x7e>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <xQueueGenericCreateStatic+0x82>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e000      	b.n	8006acc <xQueueGenericCreateStatic+0x84>
 8006aca:	2300      	movs	r3, #0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	61fb      	str	r3, [r7, #28]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ae6:	2348      	movs	r3, #72	; 0x48
 8006ae8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2b48      	cmp	r3, #72	; 0x48
 8006aee:	d00a      	beq.n	8006b06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	61bb      	str	r3, [r7, #24]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00d      	beq.n	8006b2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4613      	mov	r3, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 f83f 	bl	8006bac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3730      	adds	r7, #48	; 0x30
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08a      	sub	sp, #40	; 0x28
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	613b      	str	r3, [r7, #16]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	fb02 f303 	mul.w	r3, r2, r3
 8006b6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	3348      	adds	r3, #72	; 0x48
 8006b70:	4618      	mov	r0, r3
 8006b72:	f002 ff09 	bl	8009988 <pvPortMalloc>
 8006b76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d011      	beq.n	8006ba2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	3348      	adds	r3, #72	; 0x48
 8006b86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b90:	79fa      	ldrb	r2, [r7, #7]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	4613      	mov	r3, r2
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	68b9      	ldr	r1, [r7, #8]
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f805 	bl	8006bac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
	}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3720      	adds	r7, #32
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d103      	bne.n	8006bc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	e002      	b.n	8006bce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bda:	2101      	movs	r1, #1
 8006bdc:	69b8      	ldr	r0, [r7, #24]
 8006bde:	f7ff fecb 	bl	8006978 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006be2:	bf00      	nop
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b082      	sub	sp, #8
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00e      	beq.n	8006c16 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2100      	movs	r1, #0
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f8a1 	bl	8006d58 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b086      	sub	sp, #24
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	4603      	mov	r3, r0
 8006c26:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6939      	ldr	r1, [r7, #16]
 8006c36:	6978      	ldr	r0, [r7, #20]
 8006c38:	f7ff ff7e 	bl	8006b38 <xQueueGenericCreate>
 8006c3c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff ffd3 	bl	8006bea <prvInitialiseMutex>

		return xNewQueue;
 8006c44:	68fb      	ldr	r3, [r7, #12]
	}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b088      	sub	sp, #32
 8006c52:	af02      	add	r7, sp, #8
 8006c54:	4603      	mov	r3, r0
 8006c56:	6039      	str	r1, [r7, #0]
 8006c58:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006c62:	79fb      	ldrb	r3, [r7, #7]
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	6939      	ldr	r1, [r7, #16]
 8006c6c:	6978      	ldr	r0, [r7, #20]
 8006c6e:	f7ff feeb 	bl	8006a48 <xQueueGenericCreateStatic>
 8006c72:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f7ff ffb8 	bl	8006bea <prvInitialiseMutex>

		return xNewQueue;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
	}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08a      	sub	sp, #40	; 0x28
 8006c88:	af02      	add	r7, sp, #8
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d10a      	bne.n	8006cac <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	61bb      	str	r3, [r7, #24]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d90a      	bls.n	8006cca <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	617b      	str	r3, [r7, #20]
}
 8006cc6:	bf00      	nop
 8006cc8:	e7fe      	b.n	8006cc8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006cca:	2302      	movs	r3, #2
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f7ff feb7 	bl	8006a48 <xQueueGenericCreateStatic>
 8006cda:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006ce8:	69fb      	ldr	r3, [r7, #28]
	}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3720      	adds	r7, #32
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b086      	sub	sp, #24
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
 8006cfa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	613b      	str	r3, [r7, #16]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d90a      	bls.n	8006d36 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	60fb      	str	r3, [r7, #12]
}
 8006d32:	bf00      	nop
 8006d34:	e7fe      	b.n	8006d34 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006d36:	2202      	movs	r2, #2
 8006d38:	2100      	movs	r1, #0
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff fefc 	bl	8006b38 <xQueueGenericCreate>
 8006d40:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	683a      	ldr	r2, [r7, #0]
 8006d4c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006d4e:	697b      	ldr	r3, [r7, #20]
	}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08e      	sub	sp, #56	; 0x38
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d66:	2300      	movs	r3, #0
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <xQueueGenericSend+0x32>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d103      	bne.n	8006d98 <xQueueGenericSend+0x40>
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d101      	bne.n	8006d9c <xQueueGenericSend+0x44>
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e000      	b.n	8006d9e <xQueueGenericSend+0x46>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10a      	bne.n	8006db8 <xQueueGenericSend+0x60>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006db4:	bf00      	nop
 8006db6:	e7fe      	b.n	8006db6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d103      	bne.n	8006dc6 <xQueueGenericSend+0x6e>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d101      	bne.n	8006dca <xQueueGenericSend+0x72>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e000      	b.n	8006dcc <xQueueGenericSend+0x74>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d10a      	bne.n	8006de6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd4:	f383 8811 	msr	BASEPRI, r3
 8006dd8:	f3bf 8f6f 	isb	sy
 8006ddc:	f3bf 8f4f 	dsb	sy
 8006de0:	623b      	str	r3, [r7, #32]
}
 8006de2:	bf00      	nop
 8006de4:	e7fe      	b.n	8006de4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006de6:	f001 fd95 	bl	8008914 <xTaskGetSchedulerState>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d102      	bne.n	8006df6 <xQueueGenericSend+0x9e>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <xQueueGenericSend+0xa2>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <xQueueGenericSend+0xa4>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <xQueueGenericSend+0xbe>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	61fb      	str	r3, [r7, #28]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e16:	f002 fc95 	bl	8009744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d302      	bcc.n	8006e2c <xQueueGenericSend+0xd4>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d129      	bne.n	8006e80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e32:	f000 fc3b 	bl	80076ac <prvCopyDataToQueue>
 8006e36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d010      	beq.n	8006e62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e42:	3324      	adds	r3, #36	; 0x24
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 fba5 	bl	8008594 <xTaskRemoveFromEventList>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d013      	beq.n	8006e78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e50:	4b3f      	ldr	r3, [pc, #252]	; (8006f50 <xQueueGenericSend+0x1f8>)
 8006e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e56:	601a      	str	r2, [r3, #0]
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	e00a      	b.n	8006e78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e68:	4b39      	ldr	r3, [pc, #228]	; (8006f50 <xQueueGenericSend+0x1f8>)
 8006e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e78:	f002 fc94 	bl	80097a4 <vPortExitCritical>
				return pdPASS;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e063      	b.n	8006f48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d103      	bne.n	8006e8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e86:	f002 fc8d 	bl	80097a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e05c      	b.n	8006f48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e94:	f107 0314 	add.w	r3, r7, #20
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 fbdd 	bl	8008658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ea2:	f002 fc7f 	bl	80097a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ea6:	f001 f951 	bl	800814c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eaa:	f002 fc4b 	bl	8009744 <vPortEnterCritical>
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eb4:	b25b      	sxtb	r3, r3
 8006eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eba:	d103      	bne.n	8006ec4 <xQueueGenericSend+0x16c>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eca:	b25b      	sxtb	r3, r3
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed0:	d103      	bne.n	8006eda <xQueueGenericSend+0x182>
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eda:	f002 fc63 	bl	80097a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ede:	1d3a      	adds	r2, r7, #4
 8006ee0:	f107 0314 	add.w	r3, r7, #20
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 fbcc 	bl	8008684 <xTaskCheckForTimeOut>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d124      	bne.n	8006f3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ef4:	f000 fcd2 	bl	800789c <prvIsQueueFull>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d018      	beq.n	8006f30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	3310      	adds	r3, #16
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 faf4 	bl	80084f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f0e:	f000 fc5d 	bl	80077cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f12:	f001 f929 	bl	8008168 <xTaskResumeAll>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f47f af7c 	bne.w	8006e16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006f1e:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <xQueueGenericSend+0x1f8>)
 8006f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	e772      	b.n	8006e16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f32:	f000 fc4b 	bl	80077cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f36:	f001 f917 	bl	8008168 <xTaskResumeAll>
 8006f3a:	e76c      	b.n	8006e16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f3e:	f000 fc45 	bl	80077cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f42:	f001 f911 	bl	8008168 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3738      	adds	r7, #56	; 0x38
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b090      	sub	sp, #64	; 0x40
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d103      	bne.n	8006f90 <xQueueGenericSendFromISR+0x3c>
 8006f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <xQueueGenericSendFromISR+0x40>
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <xQueueGenericSendFromISR+0x42>
 8006f94:	2300      	movs	r3, #0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d103      	bne.n	8006fbe <xQueueGenericSendFromISR+0x6a>
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <xQueueGenericSendFromISR+0x6e>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <xQueueGenericSendFromISR+0x70>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	623b      	str	r3, [r7, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fde:	f002 fc93 	bl	8009908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006fe2:	f3ef 8211 	mrs	r2, BASEPRI
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	61fa      	str	r2, [r7, #28]
 8006ff8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ffa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ffc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	429a      	cmp	r2, r3
 8007008:	d302      	bcc.n	8007010 <xQueueGenericSendFromISR+0xbc>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d12f      	bne.n	8007070 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800701a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	68b9      	ldr	r1, [r7, #8]
 8007024:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007026:	f000 fb41 	bl	80076ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800702a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007032:	d112      	bne.n	800705a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d016      	beq.n	800706a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	3324      	adds	r3, #36	; 0x24
 8007040:	4618      	mov	r0, r3
 8007042:	f001 faa7 	bl	8008594 <xTaskRemoveFromEventList>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d00e      	beq.n	800706a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	e007      	b.n	800706a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800705a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800705e:	3301      	adds	r3, #1
 8007060:	b2db      	uxtb	r3, r3
 8007062:	b25a      	sxtb	r2, r3
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800706a:	2301      	movs	r3, #1
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800706e:	e001      	b.n	8007074 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007070:	2300      	movs	r3, #0
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007076:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800707e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007082:	4618      	mov	r0, r3
 8007084:	3740      	adds	r7, #64	; 0x40
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b08e      	sub	sp, #56	; 0x38
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	623b      	str	r3, [r7, #32]
}
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00a      	beq.n	80070d2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	61fb      	str	r3, [r7, #28]
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <xQueueGiveFromISR+0x58>
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <xQueueGiveFromISR+0x5c>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <xQueueGiveFromISR+0x5e>
 80070e6:	2300      	movs	r3, #0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <xQueueGiveFromISR+0x78>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	61bb      	str	r3, [r7, #24]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007102:	f002 fc01 	bl	8009908 <vPortValidateInterruptPriority>
	__asm volatile
 8007106:	f3ef 8211 	mrs	r2, BASEPRI
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	617a      	str	r2, [r7, #20]
 800711c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800711e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800712e:	429a      	cmp	r2, r3
 8007130:	d22b      	bcs.n	800718a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007144:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714c:	d112      	bne.n	8007174 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	2b00      	cmp	r3, #0
 8007154:	d016      	beq.n	8007184 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	3324      	adds	r3, #36	; 0x24
 800715a:	4618      	mov	r0, r3
 800715c:	f001 fa1a 	bl	8008594 <xTaskRemoveFromEventList>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00e      	beq.n	8007184 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00b      	beq.n	8007184 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2201      	movs	r2, #1
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	e007      	b.n	8007184 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007178:	3301      	adds	r3, #1
 800717a:	b2db      	uxtb	r3, r3
 800717c:	b25a      	sxtb	r2, r3
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007184:	2301      	movs	r3, #1
 8007186:	637b      	str	r3, [r7, #52]	; 0x34
 8007188:	e001      	b.n	800718e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800718a:	2300      	movs	r3, #0
 800718c:	637b      	str	r3, [r7, #52]	; 0x34
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007190:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f383 8811 	msr	BASEPRI, r3
}
 8007198:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800719c:	4618      	mov	r0, r3
 800719e:	3738      	adds	r7, #56	; 0x38
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08c      	sub	sp, #48	; 0x30
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071b0:	2300      	movs	r3, #0
 80071b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <xQueueReceive+0x30>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	623b      	str	r3, [r7, #32]
}
 80071d0:	bf00      	nop
 80071d2:	e7fe      	b.n	80071d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d103      	bne.n	80071e2 <xQueueReceive+0x3e>
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <xQueueReceive+0x42>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e000      	b.n	80071e8 <xQueueReceive+0x44>
 80071e6:	2300      	movs	r3, #0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <xQueueReceive+0x5e>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	61fb      	str	r3, [r7, #28]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007202:	f001 fb87 	bl	8008914 <xTaskGetSchedulerState>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <xQueueReceive+0x6e>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <xQueueReceive+0x72>
 8007212:	2301      	movs	r3, #1
 8007214:	e000      	b.n	8007218 <xQueueReceive+0x74>
 8007216:	2300      	movs	r3, #0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <xQueueReceive+0x8e>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	61bb      	str	r3, [r7, #24]
}
 800722e:	bf00      	nop
 8007230:	e7fe      	b.n	8007230 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007232:	f002 fa87 	bl	8009744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	2b00      	cmp	r3, #0
 8007240:	d01f      	beq.n	8007282 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007242:	68b9      	ldr	r1, [r7, #8]
 8007244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007246:	f000 fa9b 	bl	8007780 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	1e5a      	subs	r2, r3, #1
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00f      	beq.n	800727a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800725a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725c:	3310      	adds	r3, #16
 800725e:	4618      	mov	r0, r3
 8007260:	f001 f998 	bl	8008594 <xTaskRemoveFromEventList>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d007      	beq.n	800727a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800726a:	4b3d      	ldr	r3, [pc, #244]	; (8007360 <xQueueReceive+0x1bc>)
 800726c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	f3bf 8f4f 	dsb	sy
 8007276:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800727a:	f002 fa93 	bl	80097a4 <vPortExitCritical>
				return pdPASS;
 800727e:	2301      	movs	r3, #1
 8007280:	e069      	b.n	8007356 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d103      	bne.n	8007290 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007288:	f002 fa8c 	bl	80097a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800728c:	2300      	movs	r3, #0
 800728e:	e062      	b.n	8007356 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007292:	2b00      	cmp	r3, #0
 8007294:	d106      	bne.n	80072a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007296:	f107 0310 	add.w	r3, r7, #16
 800729a:	4618      	mov	r0, r3
 800729c:	f001 f9dc 	bl	8008658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072a0:	2301      	movs	r3, #1
 80072a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072a4:	f002 fa7e 	bl	80097a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072a8:	f000 ff50 	bl	800814c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072ac:	f002 fa4a 	bl	8009744 <vPortEnterCritical>
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072b6:	b25b      	sxtb	r3, r3
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072bc:	d103      	bne.n	80072c6 <xQueueReceive+0x122>
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072cc:	b25b      	sxtb	r3, r3
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d103      	bne.n	80072dc <xQueueReceive+0x138>
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072dc:	f002 fa62 	bl	80097a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072e0:	1d3a      	adds	r2, r7, #4
 80072e2:	f107 0310 	add.w	r3, r7, #16
 80072e6:	4611      	mov	r1, r2
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 f9cb 	bl	8008684 <xTaskCheckForTimeOut>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d123      	bne.n	800733c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072f6:	f000 fabb 	bl	8007870 <prvIsQueueEmpty>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d017      	beq.n	8007330 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007302:	3324      	adds	r3, #36	; 0x24
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	4611      	mov	r1, r2
 8007308:	4618      	mov	r0, r3
 800730a:	f001 f8f3 	bl	80084f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800730e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007310:	f000 fa5c 	bl	80077cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007314:	f000 ff28 	bl	8008168 <xTaskResumeAll>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d189      	bne.n	8007232 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800731e:	4b10      	ldr	r3, [pc, #64]	; (8007360 <xQueueReceive+0x1bc>)
 8007320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007324:	601a      	str	r2, [r3, #0]
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	e780      	b.n	8007232 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007332:	f000 fa4b 	bl	80077cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007336:	f000 ff17 	bl	8008168 <xTaskResumeAll>
 800733a:	e77a      	b.n	8007232 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800733c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800733e:	f000 fa45 	bl	80077cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007342:	f000 ff11 	bl	8008168 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007348:	f000 fa92 	bl	8007870 <prvIsQueueEmpty>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	f43f af6f 	beq.w	8007232 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007354:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007356:	4618      	mov	r0, r3
 8007358:	3730      	adds	r7, #48	; 0x30
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	e000ed04 	.word	0xe000ed04

08007364 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08e      	sub	sp, #56	; 0x38
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800736e:	2300      	movs	r3, #0
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007376:	2300      	movs	r3, #0
 8007378:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d10a      	bne.n	8007396 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	623b      	str	r3, [r7, #32]
}
 8007392:	bf00      	nop
 8007394:	e7fe      	b.n	8007394 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	61fb      	str	r3, [r7, #28]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073b4:	f001 faae 	bl	8008914 <xTaskGetSchedulerState>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d102      	bne.n	80073c4 <xQueueSemaphoreTake+0x60>
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <xQueueSemaphoreTake+0x64>
 80073c4:	2301      	movs	r3, #1
 80073c6:	e000      	b.n	80073ca <xQueueSemaphoreTake+0x66>
 80073c8:	2300      	movs	r3, #0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10a      	bne.n	80073e4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	61bb      	str	r3, [r7, #24]
}
 80073e0:	bf00      	nop
 80073e2:	e7fe      	b.n	80073e2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073e4:	f002 f9ae 	bl	8009744 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d024      	beq.n	800743e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	1e5a      	subs	r2, r3, #1
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007404:	f001 fc2e 	bl	8008c64 <pvTaskIncrementMutexHeldCount>
 8007408:	4602      	mov	r2, r0
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00f      	beq.n	8007436 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	3310      	adds	r3, #16
 800741a:	4618      	mov	r0, r3
 800741c:	f001 f8ba 	bl	8008594 <xTaskRemoveFromEventList>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d007      	beq.n	8007436 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007426:	4b54      	ldr	r3, [pc, #336]	; (8007578 <xQueueSemaphoreTake+0x214>)
 8007428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007436:	f002 f9b5 	bl	80097a4 <vPortExitCritical>
				return pdPASS;
 800743a:	2301      	movs	r3, #1
 800743c:	e097      	b.n	800756e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d111      	bne.n	8007468 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	617b      	str	r3, [r7, #20]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007460:	f002 f9a0 	bl	80097a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007464:	2300      	movs	r3, #0
 8007466:	e082      	b.n	800756e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800746e:	f107 030c 	add.w	r3, r7, #12
 8007472:	4618      	mov	r0, r3
 8007474:	f001 f8f0 	bl	8008658 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007478:	2301      	movs	r3, #1
 800747a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800747c:	f002 f992 	bl	80097a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007480:	f000 fe64 	bl	800814c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007484:	f002 f95e 	bl	8009744 <vPortEnterCritical>
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800748e:	b25b      	sxtb	r3, r3
 8007490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007494:	d103      	bne.n	800749e <xQueueSemaphoreTake+0x13a>
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074a4:	b25b      	sxtb	r3, r3
 80074a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074aa:	d103      	bne.n	80074b4 <xQueueSemaphoreTake+0x150>
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074b4:	f002 f976 	bl	80097a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074b8:	463a      	mov	r2, r7
 80074ba:	f107 030c 	add.w	r3, r7, #12
 80074be:	4611      	mov	r1, r2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f001 f8df 	bl	8008684 <xTaskCheckForTimeOut>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d132      	bne.n	8007532 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074ce:	f000 f9cf 	bl	8007870 <prvIsQueueEmpty>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d026      	beq.n	8007526 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d109      	bne.n	80074f4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80074e0:	f002 f930 	bl	8009744 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f001 fa31 	bl	8008950 <xTaskPriorityInherit>
 80074ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80074f0:	f002 f958 	bl	80097a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f6:	3324      	adds	r3, #36	; 0x24
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	4611      	mov	r1, r2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 fff9 	bl	80084f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007504:	f000 f962 	bl	80077cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007508:	f000 fe2e 	bl	8008168 <xTaskResumeAll>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	f47f af68 	bne.w	80073e4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007514:	4b18      	ldr	r3, [pc, #96]	; (8007578 <xQueueSemaphoreTake+0x214>)
 8007516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	e75e      	b.n	80073e4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007526:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007528:	f000 f950 	bl	80077cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800752c:	f000 fe1c 	bl	8008168 <xTaskResumeAll>
 8007530:	e758      	b.n	80073e4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007534:	f000 f94a 	bl	80077cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007538:	f000 fe16 	bl	8008168 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800753c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800753e:	f000 f997 	bl	8007870 <prvIsQueueEmpty>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	f43f af4d 	beq.w	80073e4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00d      	beq.n	800756c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007550:	f002 f8f8 	bl	8009744 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007554:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007556:	f000 f891 	bl	800767c <prvGetDisinheritPriorityAfterTimeout>
 800755a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007562:	4618      	mov	r0, r3
 8007564:	f001 faf0 	bl	8008b48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007568:	f002 f91c 	bl	80097a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800756c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800756e:	4618      	mov	r0, r3
 8007570:	3738      	adds	r7, #56	; 0x38
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	e000ed04 	.word	0xe000ed04

0800757c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08e      	sub	sp, #56	; 0x38
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	623b      	str	r3, [r7, #32]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d103      	bne.n	80075b6 <xQueueReceiveFromISR+0x3a>
 80075ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <xQueueReceiveFromISR+0x3e>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <xQueueReceiveFromISR+0x40>
 80075ba:	2300      	movs	r3, #0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	61fb      	str	r3, [r7, #28]
}
 80075d2:	bf00      	nop
 80075d4:	e7fe      	b.n	80075d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075d6:	f002 f997 	bl	8009908 <vPortValidateInterruptPriority>
	__asm volatile
 80075da:	f3ef 8211 	mrs	r2, BASEPRI
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	61ba      	str	r2, [r7, #24]
 80075f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80075f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d02f      	beq.n	8007662 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007610:	f000 f8b6 	bl	8007780 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	1e5a      	subs	r2, r3, #1
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800761c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d112      	bne.n	800764c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d016      	beq.n	800765c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	3310      	adds	r3, #16
 8007632:	4618      	mov	r0, r3
 8007634:	f000 ffae 	bl	8008594 <xTaskRemoveFromEventList>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00e      	beq.n	800765c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	e007      	b.n	800765c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800764c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007650:	3301      	adds	r3, #1
 8007652:	b2db      	uxtb	r3, r3
 8007654:	b25a      	sxtb	r2, r3
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800765c:	2301      	movs	r3, #1
 800765e:	637b      	str	r3, [r7, #52]	; 0x34
 8007660:	e001      	b.n	8007666 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007662:	2300      	movs	r3, #0
 8007664:	637b      	str	r3, [r7, #52]	; 0x34
 8007666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007668:	613b      	str	r3, [r7, #16]
	__asm volatile
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f383 8811 	msr	BASEPRI, r3
}
 8007670:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007674:	4618      	mov	r0, r3
 8007676:	3738      	adds	r7, #56	; 0x38
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	2b00      	cmp	r3, #0
 800768a:	d006      	beq.n	800769a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f1c3 0307 	rsb	r3, r3, #7
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	e001      	b.n	800769e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800769e:	68fb      	ldr	r3, [r7, #12]
	}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076b8:	2300      	movs	r3, #0
 80076ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10d      	bne.n	80076e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d14d      	bne.n	800776e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	4618      	mov	r0, r3
 80076d8:	f001 f9b0 	bl	8008a3c <xTaskPriorityDisinherit>
 80076dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	609a      	str	r2, [r3, #8]
 80076e4:	e043      	b.n	800776e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d119      	bne.n	8007720 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6858      	ldr	r0, [r3, #4]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	461a      	mov	r2, r3
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	f007 f89c 	bl	800e834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	441a      	add	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	429a      	cmp	r2, r3
 8007714:	d32b      	bcc.n	800776e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	605a      	str	r2, [r3, #4]
 800771e:	e026      	b.n	800776e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68d8      	ldr	r0, [r3, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007728:	461a      	mov	r2, r3
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	f007 f882 	bl	800e834 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	425b      	negs	r3, r3
 800773a:	441a      	add	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	429a      	cmp	r2, r3
 800774a:	d207      	bcs.n	800775c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	689a      	ldr	r2, [r3, #8]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	425b      	negs	r3, r3
 8007756:	441a      	add	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b02      	cmp	r3, #2
 8007760:	d105      	bne.n	800776e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	3b01      	subs	r3, #1
 800776c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007776:	697b      	ldr	r3, [r7, #20]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d018      	beq.n	80077c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	441a      	add	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d303      	bcc.n	80077b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68d9      	ldr	r1, [r3, #12]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	461a      	mov	r2, r3
 80077be:	6838      	ldr	r0, [r7, #0]
 80077c0:	f007 f838 	bl	800e834 <memcpy>
	}
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077d4:	f001 ffb6 	bl	8009744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077e0:	e011      	b.n	8007806 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d012      	beq.n	8007810 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3324      	adds	r3, #36	; 0x24
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 fed0 	bl	8008594 <xTaskRemoveFromEventList>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077fa:	f000 ffa5 	bl	8008748 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	3b01      	subs	r3, #1
 8007802:	b2db      	uxtb	r3, r3
 8007804:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800780a:	2b00      	cmp	r3, #0
 800780c:	dce9      	bgt.n	80077e2 <prvUnlockQueue+0x16>
 800780e:	e000      	b.n	8007812 <prvUnlockQueue+0x46>
					break;
 8007810:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	22ff      	movs	r2, #255	; 0xff
 8007816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800781a:	f001 ffc3 	bl	80097a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800781e:	f001 ff91 	bl	8009744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007828:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800782a:	e011      	b.n	8007850 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d012      	beq.n	800785a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3310      	adds	r3, #16
 8007838:	4618      	mov	r0, r3
 800783a:	f000 feab 	bl	8008594 <xTaskRemoveFromEventList>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007844:	f000 ff80 	bl	8008748 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	3b01      	subs	r3, #1
 800784c:	b2db      	uxtb	r3, r3
 800784e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007854:	2b00      	cmp	r3, #0
 8007856:	dce9      	bgt.n	800782c <prvUnlockQueue+0x60>
 8007858:	e000      	b.n	800785c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800785a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	22ff      	movs	r2, #255	; 0xff
 8007860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007864:	f001 ff9e 	bl	80097a4 <vPortExitCritical>
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007878:	f001 ff64 	bl	8009744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	2b00      	cmp	r3, #0
 8007882:	d102      	bne.n	800788a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007884:	2301      	movs	r3, #1
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	e001      	b.n	800788e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800788a:	2300      	movs	r3, #0
 800788c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800788e:	f001 ff89 	bl	80097a4 <vPortExitCritical>

	return xReturn;
 8007892:	68fb      	ldr	r3, [r7, #12]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078a4:	f001 ff4e 	bl	8009744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d102      	bne.n	80078ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078b4:	2301      	movs	r3, #1
 80078b6:	60fb      	str	r3, [r7, #12]
 80078b8:	e001      	b.n	80078be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078be:	f001 ff71 	bl	80097a4 <vPortExitCritical>

	return xReturn;
 80078c2:	68fb      	ldr	r3, [r7, #12]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
 80078da:	e014      	b.n	8007906 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078dc:	4a0f      	ldr	r2, [pc, #60]	; (800791c <vQueueAddToRegistry+0x50>)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10b      	bne.n	8007900 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078e8:	490c      	ldr	r1, [pc, #48]	; (800791c <vQueueAddToRegistry+0x50>)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80078f2:	4a0a      	ldr	r2, [pc, #40]	; (800791c <vQueueAddToRegistry+0x50>)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	00db      	lsls	r3, r3, #3
 80078f8:	4413      	add	r3, r2
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80078fe:	e006      	b.n	800790e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3301      	adds	r3, #1
 8007904:	60fb      	str	r3, [r7, #12]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b07      	cmp	r3, #7
 800790a:	d9e7      	bls.n	80078dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800790c:	bf00      	nop
 800790e:	bf00      	nop
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20009868 	.word	0x20009868

08007920 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007930:	f001 ff08 	bl	8009744 <vPortEnterCritical>
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800793a:	b25b      	sxtb	r3, r3
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d103      	bne.n	800794a <vQueueWaitForMessageRestricted+0x2a>
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007950:	b25b      	sxtb	r3, r3
 8007952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007956:	d103      	bne.n	8007960 <vQueueWaitForMessageRestricted+0x40>
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007960:	f001 ff20 	bl	80097a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	2b00      	cmp	r3, #0
 800796a:	d106      	bne.n	800797a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	3324      	adds	r3, #36	; 0x24
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	68b9      	ldr	r1, [r7, #8]
 8007974:	4618      	mov	r0, r3
 8007976:	f000 fde1 	bl	800853c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800797a:	6978      	ldr	r0, [r7, #20]
 800797c:	f7ff ff26 	bl	80077cc <prvUnlockQueue>
	}
 8007980:	bf00      	nop
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08e      	sub	sp, #56	; 0x38
 800798c:	af04      	add	r7, sp, #16
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10a      	bne.n	80079b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	623b      	str	r3, [r7, #32]
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <xTaskCreateStatic+0x46>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	61fb      	str	r3, [r7, #28]
}
 80079ca:	bf00      	nop
 80079cc:	e7fe      	b.n	80079cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079ce:	23b4      	movs	r3, #180	; 0xb4
 80079d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	2bb4      	cmp	r3, #180	; 0xb4
 80079d6:	d00a      	beq.n	80079ee <xTaskCreateStatic+0x66>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	61bb      	str	r3, [r7, #24]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80079ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80079f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01e      	beq.n	8007a34 <xTaskCreateStatic+0xac>
 80079f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01b      	beq.n	8007a34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	2202      	movs	r2, #2
 8007a0a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a0e:	2300      	movs	r3, #0
 8007a10:	9303      	str	r3, [sp, #12]
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	9302      	str	r3, [sp, #8]
 8007a16:	f107 0314 	add.w	r3, r7, #20
 8007a1a:	9301      	str	r3, [sp, #4]
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	9300      	str	r3, [sp, #0]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	68b9      	ldr	r1, [r7, #8]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 f850 	bl	8007acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a2e:	f000 f8eb 	bl	8007c08 <prvAddNewTaskToReadyList>
 8007a32:	e001      	b.n	8007a38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a38:	697b      	ldr	r3, [r7, #20]
	}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3728      	adds	r7, #40	; 0x28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b08c      	sub	sp, #48	; 0x30
 8007a46:	af04      	add	r7, sp, #16
 8007a48:	60f8      	str	r0, [r7, #12]
 8007a4a:	60b9      	str	r1, [r7, #8]
 8007a4c:	603b      	str	r3, [r7, #0]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 ff96 	bl	8009988 <pvPortMalloc>
 8007a5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00e      	beq.n	8007a82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a64:	20b4      	movs	r0, #180	; 0xb4
 8007a66:	f001 ff8f 	bl	8009988 <pvPortMalloc>
 8007a6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	697a      	ldr	r2, [r7, #20]
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30
 8007a78:	e005      	b.n	8007a86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a7a:	6978      	ldr	r0, [r7, #20]
 8007a7c:	f002 f850 	bl	8009b20 <vPortFree>
 8007a80:	e001      	b.n	8007a86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d017      	beq.n	8007abc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a94:	88fa      	ldrh	r2, [r7, #6]
 8007a96:	2300      	movs	r3, #0
 8007a98:	9303      	str	r3, [sp, #12]
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	9302      	str	r3, [sp, #8]
 8007a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f80e 	bl	8007acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ab0:	69f8      	ldr	r0, [r7, #28]
 8007ab2:	f000 f8a9 	bl	8007c08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	e002      	b.n	8007ac2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007abc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3720      	adds	r7, #32
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b088      	sub	sp, #32
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	f023 0307 	bic.w	r3, r3, #7
 8007af2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00a      	beq.n	8007b14 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	617b      	str	r3, [r7, #20]
}
 8007b10:	bf00      	nop
 8007b12:	e7fe      	b.n	8007b12 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d01f      	beq.n	8007b5a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	61fb      	str	r3, [r7, #28]
 8007b1e:	e012      	b.n	8007b46 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4413      	add	r3, r2
 8007b26:	7819      	ldrb	r1, [r3, #0]
 8007b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	3334      	adds	r3, #52	; 0x34
 8007b30:	460a      	mov	r2, r1
 8007b32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	4413      	add	r3, r2
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d006      	beq.n	8007b4e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	3301      	adds	r3, #1
 8007b44:	61fb      	str	r3, [r7, #28]
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	2b0f      	cmp	r3, #15
 8007b4a:	d9e9      	bls.n	8007b20 <prvInitialiseNewTask+0x54>
 8007b4c:	e000      	b.n	8007b50 <prvInitialiseNewTask+0x84>
			{
				break;
 8007b4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b58:	e003      	b.n	8007b62 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b64:	2b06      	cmp	r3, #6
 8007b66:	d901      	bls.n	8007b6c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b68:	2306      	movs	r3, #6
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b76:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b80:	3304      	adds	r3, #4
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe fe64 	bl	8006850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	3318      	adds	r3, #24
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe fe5f 	bl	8006850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	f1c3 0207 	rsb	r2, r3, #7
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ba6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	334c      	adds	r3, #76	; 0x4c
 8007bbc:	2260      	movs	r2, #96	; 0x60
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f006 fe45 	bl	800e850 <memset>
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	4a0c      	ldr	r2, [pc, #48]	; (8007bfc <prvInitialiseNewTask+0x130>)
 8007bca:	651a      	str	r2, [r3, #80]	; 0x50
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	4a0c      	ldr	r2, [pc, #48]	; (8007c00 <prvInitialiseNewTask+0x134>)
 8007bd0:	655a      	str	r2, [r3, #84]	; 0x54
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	4a0b      	ldr	r2, [pc, #44]	; (8007c04 <prvInitialiseNewTask+0x138>)
 8007bd6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	69b8      	ldr	r0, [r7, #24]
 8007bde:	f001 fc87 	bl	80094f0 <pxPortInitialiseStack>
 8007be2:	4602      	mov	r2, r0
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d002      	beq.n	8007bf4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bf2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bf4:	bf00      	nop
 8007bf6:	3720      	adds	r7, #32
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	0800f71c 	.word	0x0800f71c
 8007c00:	0800f73c 	.word	0x0800f73c
 8007c04:	0800f6fc 	.word	0x0800f6fc

08007c08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c10:	f001 fd98 	bl	8009744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c14:	4b2a      	ldr	r3, [pc, #168]	; (8007cc0 <prvAddNewTaskToReadyList+0xb8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	4a29      	ldr	r2, [pc, #164]	; (8007cc0 <prvAddNewTaskToReadyList+0xb8>)
 8007c1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c1e:	4b29      	ldr	r3, [pc, #164]	; (8007cc4 <prvAddNewTaskToReadyList+0xbc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d109      	bne.n	8007c3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c26:	4a27      	ldr	r2, [pc, #156]	; (8007cc4 <prvAddNewTaskToReadyList+0xbc>)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c2c:	4b24      	ldr	r3, [pc, #144]	; (8007cc0 <prvAddNewTaskToReadyList+0xb8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d110      	bne.n	8007c56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c34:	f000 fdac 	bl	8008790 <prvInitialiseTaskLists>
 8007c38:	e00d      	b.n	8007c56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c3a:	4b23      	ldr	r3, [pc, #140]	; (8007cc8 <prvAddNewTaskToReadyList+0xc0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d109      	bne.n	8007c56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c42:	4b20      	ldr	r3, [pc, #128]	; (8007cc4 <prvAddNewTaskToReadyList+0xbc>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d802      	bhi.n	8007c56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c50:	4a1c      	ldr	r2, [pc, #112]	; (8007cc4 <prvAddNewTaskToReadyList+0xbc>)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c56:	4b1d      	ldr	r3, [pc, #116]	; (8007ccc <prvAddNewTaskToReadyList+0xc4>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	4a1b      	ldr	r2, [pc, #108]	; (8007ccc <prvAddNewTaskToReadyList+0xc4>)
 8007c5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	2201      	movs	r2, #1
 8007c66:	409a      	lsls	r2, r3
 8007c68:	4b19      	ldr	r3, [pc, #100]	; (8007cd0 <prvAddNewTaskToReadyList+0xc8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	4a18      	ldr	r2, [pc, #96]	; (8007cd0 <prvAddNewTaskToReadyList+0xc8>)
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c76:	4613      	mov	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4a15      	ldr	r2, [pc, #84]	; (8007cd4 <prvAddNewTaskToReadyList+0xcc>)
 8007c80:	441a      	add	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3304      	adds	r3, #4
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f7fe fdee 	bl	800686a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c8e:	f001 fd89 	bl	80097a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c92:	4b0d      	ldr	r3, [pc, #52]	; (8007cc8 <prvAddNewTaskToReadyList+0xc0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00e      	beq.n	8007cb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c9a:	4b0a      	ldr	r3, [pc, #40]	; (8007cc4 <prvAddNewTaskToReadyList+0xbc>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d207      	bcs.n	8007cb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ca8:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <prvAddNewTaskToReadyList+0xd0>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cb8:	bf00      	nop
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20000914 	.word	0x20000914
 8007cc4:	20000814 	.word	0x20000814
 8007cc8:	20000920 	.word	0x20000920
 8007ccc:	20000930 	.word	0x20000930
 8007cd0:	2000091c 	.word	0x2000091c
 8007cd4:	20000818 	.word	0x20000818
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d017      	beq.n	8007d1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <vTaskDelay+0x60>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <vTaskDelay+0x30>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60bb      	str	r3, [r7, #8]
}
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d0c:	f000 fa1e 	bl	800814c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d10:	2100      	movs	r1, #0
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 ffba 	bl	8008c8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d18:	f000 fa26 	bl	8008168 <xTaskResumeAll>
 8007d1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d107      	bne.n	8007d34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007d24:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <vTaskDelay+0x64>)
 8007d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d34:	bf00      	nop
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	2000093c 	.word	0x2000093c
 8007d40:	e000ed04 	.word	0xe000ed04

08007d44 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007d4c:	f001 fcfa 	bl	8009744 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d102      	bne.n	8007d5c <vTaskSuspend+0x18>
 8007d56:	4b3c      	ldr	r3, [pc, #240]	; (8007e48 <vTaskSuspend+0x104>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	e000      	b.n	8007d5e <vTaskSuspend+0x1a>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	3304      	adds	r3, #4
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fe fddd 	bl	8006924 <uxListRemove>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d115      	bne.n	8007d9c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4935      	ldr	r1, [pc, #212]	; (8007e4c <vTaskSuspend+0x108>)
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	440b      	add	r3, r1
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10a      	bne.n	8007d9c <vTaskSuspend+0x58>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d90:	43da      	mvns	r2, r3
 8007d92:	4b2f      	ldr	r3, [pc, #188]	; (8007e50 <vTaskSuspend+0x10c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4013      	ands	r3, r2
 8007d98:	4a2d      	ldr	r2, [pc, #180]	; (8007e50 <vTaskSuspend+0x10c>)
 8007d9a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d004      	beq.n	8007dae <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3318      	adds	r3, #24
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe fdbb 	bl	8006924 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	4827      	ldr	r0, [pc, #156]	; (8007e54 <vTaskSuspend+0x110>)
 8007db6:	f7fe fd58 	bl	800686a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d103      	bne.n	8007dce <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007dce:	f001 fce9 	bl	80097a4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007dd2:	4b21      	ldr	r3, [pc, #132]	; (8007e58 <vTaskSuspend+0x114>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007dda:	f001 fcb3 	bl	8009744 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007dde:	f000 fd79 	bl	80088d4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007de2:	f001 fcdf 	bl	80097a4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007de6:	4b18      	ldr	r3, [pc, #96]	; (8007e48 <vTaskSuspend+0x104>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d127      	bne.n	8007e40 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007df0:	4b19      	ldr	r3, [pc, #100]	; (8007e58 <vTaskSuspend+0x114>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d017      	beq.n	8007e28 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007df8:	4b18      	ldr	r3, [pc, #96]	; (8007e5c <vTaskSuspend+0x118>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00a      	beq.n	8007e16 <vTaskSuspend+0xd2>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	60bb      	str	r3, [r7, #8]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8007e16:	4b12      	ldr	r3, [pc, #72]	; (8007e60 <vTaskSuspend+0x11c>)
 8007e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e26:	e00b      	b.n	8007e40 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007e28:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <vTaskSuspend+0x110>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <vTaskSuspend+0x120>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d103      	bne.n	8007e3c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8007e34:	4b04      	ldr	r3, [pc, #16]	; (8007e48 <vTaskSuspend+0x104>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
	}
 8007e3a:	e001      	b.n	8007e40 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007e3c:	f000 faf8 	bl	8008430 <vTaskSwitchContext>
	}
 8007e40:	bf00      	nop
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	20000814 	.word	0x20000814
 8007e4c:	20000818 	.word	0x20000818
 8007e50:	2000091c 	.word	0x2000091c
 8007e54:	20000900 	.word	0x20000900
 8007e58:	20000920 	.word	0x20000920
 8007e5c:	2000093c 	.word	0x2000093c
 8007e60:	e000ed04 	.word	0xe000ed04
 8007e64:	20000914 	.word	0x20000914

08007e68 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007e70:	2300      	movs	r3, #0
 8007e72:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10a      	bne.n	8007e94 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	60fb      	str	r3, [r7, #12]
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	4a0a      	ldr	r2, [pc, #40]	; (8007ec4 <prvTaskIsTaskSuspended+0x5c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d10a      	bne.n	8007eb4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea2:	4a09      	ldr	r2, [pc, #36]	; (8007ec8 <prvTaskIsTaskSuspended+0x60>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d005      	beq.n	8007eb4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d101      	bne.n	8007eb4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007eb4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	371c      	adds	r7, #28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20000900 	.word	0x20000900
 8007ec8:	200008d4 	.word	0x200008d4

08007ecc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d10a      	bne.n	8007ef4 <vTaskResume+0x28>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	60bb      	str	r3, [r7, #8]
}
 8007ef0:	bf00      	nop
 8007ef2:	e7fe      	b.n	8007ef2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007ef4:	4b20      	ldr	r3, [pc, #128]	; (8007f78 <vTaskResume+0xac>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d037      	beq.n	8007f6e <vTaskResume+0xa2>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d034      	beq.n	8007f6e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8007f04:	f001 fc1e 	bl	8009744 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f7ff ffad 	bl	8007e68 <prvTaskIsTaskSuspended>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d02a      	beq.n	8007f6a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fe fd03 	bl	8006924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f22:	2201      	movs	r2, #1
 8007f24:	409a      	lsls	r2, r3
 8007f26:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <vTaskResume+0xb0>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	4a13      	ldr	r2, [pc, #76]	; (8007f7c <vTaskResume+0xb0>)
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4a10      	ldr	r2, [pc, #64]	; (8007f80 <vTaskResume+0xb4>)
 8007f3e:	441a      	add	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f7fe fc8f 	bl	800686a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f50:	4b09      	ldr	r3, [pc, #36]	; (8007f78 <vTaskResume+0xac>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d307      	bcc.n	8007f6a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007f5a:	4b0a      	ldr	r3, [pc, #40]	; (8007f84 <vTaskResume+0xb8>)
 8007f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8007f6a:	f001 fc1b 	bl	80097a4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000814 	.word	0x20000814
 8007f7c:	2000091c 	.word	0x2000091c
 8007f80:	20000818 	.word	0x20000818
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08a      	sub	sp, #40	; 0x28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	61bb      	str	r3, [r7, #24]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fb4:	f001 fca8 	bl	8009908 <vPortValidateInterruptPriority>
	__asm volatile
 8007fb8:	f3ef 8211 	mrs	r2, BASEPRI
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	617a      	str	r2, [r7, #20]
 8007fce:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007fd0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fd2:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007fd4:	6a38      	ldr	r0, [r7, #32]
 8007fd6:	f7ff ff47 	bl	8007e68 <prvTaskIsTaskSuspended>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d02f      	beq.n	8008040 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe0:	4b1d      	ldr	r3, [pc, #116]	; (8008058 <xTaskResumeFromISR+0xd0>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d125      	bne.n	8008034 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	4b1b      	ldr	r3, [pc, #108]	; (800805c <xTaskResumeFromISR+0xd4>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d301      	bcc.n	8007ffa <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fc90 	bl	8006924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	2201      	movs	r2, #1
 800800a:	409a      	lsls	r2, r3
 800800c:	4b14      	ldr	r3, [pc, #80]	; (8008060 <xTaskResumeFromISR+0xd8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4313      	orrs	r3, r2
 8008012:	4a13      	ldr	r2, [pc, #76]	; (8008060 <xTaskResumeFromISR+0xd8>)
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4a10      	ldr	r2, [pc, #64]	; (8008064 <xTaskResumeFromISR+0xdc>)
 8008024:	441a      	add	r2, r3
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	3304      	adds	r3, #4
 800802a:	4619      	mov	r1, r3
 800802c:	4610      	mov	r0, r2
 800802e:	f7fe fc1c 	bl	800686a <vListInsertEnd>
 8008032:	e005      	b.n	8008040 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	3318      	adds	r3, #24
 8008038:	4619      	mov	r1, r3
 800803a:	480b      	ldr	r0, [pc, #44]	; (8008068 <xTaskResumeFromISR+0xe0>)
 800803c:	f7fe fc15 	bl	800686a <vListInsertEnd>
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f383 8811 	msr	BASEPRI, r3
}
 800804a:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800804e:	4618      	mov	r0, r3
 8008050:	3728      	adds	r7, #40	; 0x28
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	2000093c 	.word	0x2000093c
 800805c:	20000814 	.word	0x20000814
 8008060:	2000091c 	.word	0x2000091c
 8008064:	20000818 	.word	0x20000818
 8008068:	200008d4 	.word	0x200008d4

0800806c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008072:	2300      	movs	r3, #0
 8008074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800807a:	463a      	mov	r2, r7
 800807c:	1d39      	adds	r1, r7, #4
 800807e:	f107 0308 	add.w	r3, r7, #8
 8008082:	4618      	mov	r0, r3
 8008084:	f7f8 fa78 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	9202      	str	r2, [sp, #8]
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	2300      	movs	r3, #0
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	2300      	movs	r3, #0
 8008098:	460a      	mov	r2, r1
 800809a:	4924      	ldr	r1, [pc, #144]	; (800812c <vTaskStartScheduler+0xc0>)
 800809c:	4824      	ldr	r0, [pc, #144]	; (8008130 <vTaskStartScheduler+0xc4>)
 800809e:	f7ff fc73 	bl	8007988 <xTaskCreateStatic>
 80080a2:	4603      	mov	r3, r0
 80080a4:	4a23      	ldr	r2, [pc, #140]	; (8008134 <vTaskStartScheduler+0xc8>)
 80080a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080a8:	4b22      	ldr	r3, [pc, #136]	; (8008134 <vTaskStartScheduler+0xc8>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080b0:	2301      	movs	r3, #1
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	e001      	b.n	80080ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d102      	bne.n	80080c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080c0:	f000 fe4a 	bl	8008d58 <xTimerCreateTimerTask>
 80080c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d11b      	bne.n	8008104 <vTaskStartScheduler+0x98>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	613b      	str	r3, [r7, #16]
}
 80080de:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80080e0:	4b15      	ldr	r3, [pc, #84]	; (8008138 <vTaskStartScheduler+0xcc>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	334c      	adds	r3, #76	; 0x4c
 80080e6:	4a15      	ldr	r2, [pc, #84]	; (800813c <vTaskStartScheduler+0xd0>)
 80080e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80080ea:	4b15      	ldr	r3, [pc, #84]	; (8008140 <vTaskStartScheduler+0xd4>)
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295
 80080f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80080f2:	4b14      	ldr	r3, [pc, #80]	; (8008144 <vTaskStartScheduler+0xd8>)
 80080f4:	2201      	movs	r2, #1
 80080f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80080f8:	4b13      	ldr	r3, [pc, #76]	; (8008148 <vTaskStartScheduler+0xdc>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80080fe:	f001 fa7f 	bl	8009600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008102:	e00e      	b.n	8008122 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810a:	d10a      	bne.n	8008122 <vTaskStartScheduler+0xb6>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	60fb      	str	r3, [r7, #12]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <vTaskStartScheduler+0xb4>
}
 8008122:	bf00      	nop
 8008124:	3718      	adds	r7, #24
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	0800f2c8 	.word	0x0800f2c8
 8008130:	08008761 	.word	0x08008761
 8008134:	20000938 	.word	0x20000938
 8008138:	20000814 	.word	0x20000814
 800813c:	20000020 	.word	0x20000020
 8008140:	20000934 	.word	0x20000934
 8008144:	20000920 	.word	0x20000920
 8008148:	20000918 	.word	0x20000918

0800814c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008150:	4b04      	ldr	r3, [pc, #16]	; (8008164 <vTaskSuspendAll+0x18>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3301      	adds	r3, #1
 8008156:	4a03      	ldr	r2, [pc, #12]	; (8008164 <vTaskSuspendAll+0x18>)
 8008158:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800815a:	bf00      	nop
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	2000093c 	.word	0x2000093c

08008168 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008172:	2300      	movs	r3, #0
 8008174:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008176:	4b41      	ldr	r3, [pc, #260]	; (800827c <xTaskResumeAll+0x114>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10a      	bne.n	8008194 <xTaskResumeAll+0x2c>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	603b      	str	r3, [r7, #0]
}
 8008190:	bf00      	nop
 8008192:	e7fe      	b.n	8008192 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008194:	f001 fad6 	bl	8009744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008198:	4b38      	ldr	r3, [pc, #224]	; (800827c <xTaskResumeAll+0x114>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3b01      	subs	r3, #1
 800819e:	4a37      	ldr	r2, [pc, #220]	; (800827c <xTaskResumeAll+0x114>)
 80081a0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081a2:	4b36      	ldr	r3, [pc, #216]	; (800827c <xTaskResumeAll+0x114>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d161      	bne.n	800826e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081aa:	4b35      	ldr	r3, [pc, #212]	; (8008280 <xTaskResumeAll+0x118>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d05d      	beq.n	800826e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081b2:	e02e      	b.n	8008212 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b4:	4b33      	ldr	r3, [pc, #204]	; (8008284 <xTaskResumeAll+0x11c>)
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3318      	adds	r3, #24
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fe fbaf 	bl	8006924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	3304      	adds	r3, #4
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe fbaa 	bl	8006924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	2201      	movs	r2, #1
 80081d6:	409a      	lsls	r2, r3
 80081d8:	4b2b      	ldr	r3, [pc, #172]	; (8008288 <xTaskResumeAll+0x120>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4313      	orrs	r3, r2
 80081de:	4a2a      	ldr	r2, [pc, #168]	; (8008288 <xTaskResumeAll+0x120>)
 80081e0:	6013      	str	r3, [r2, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081e6:	4613      	mov	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4a27      	ldr	r2, [pc, #156]	; (800828c <xTaskResumeAll+0x124>)
 80081f0:	441a      	add	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3304      	adds	r3, #4
 80081f6:	4619      	mov	r1, r3
 80081f8:	4610      	mov	r0, r2
 80081fa:	f7fe fb36 	bl	800686a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008202:	4b23      	ldr	r3, [pc, #140]	; (8008290 <xTaskResumeAll+0x128>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	429a      	cmp	r2, r3
 800820a:	d302      	bcc.n	8008212 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800820c:	4b21      	ldr	r3, [pc, #132]	; (8008294 <xTaskResumeAll+0x12c>)
 800820e:	2201      	movs	r2, #1
 8008210:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008212:	4b1c      	ldr	r3, [pc, #112]	; (8008284 <xTaskResumeAll+0x11c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1cc      	bne.n	80081b4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008220:	f000 fb58 	bl	80088d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008224:	4b1c      	ldr	r3, [pc, #112]	; (8008298 <xTaskResumeAll+0x130>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d010      	beq.n	8008252 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008230:	f000 f846 	bl	80082c0 <xTaskIncrementTick>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800823a:	4b16      	ldr	r3, [pc, #88]	; (8008294 <xTaskResumeAll+0x12c>)
 800823c:	2201      	movs	r2, #1
 800823e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	3b01      	subs	r3, #1
 8008244:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1f1      	bne.n	8008230 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800824c:	4b12      	ldr	r3, [pc, #72]	; (8008298 <xTaskResumeAll+0x130>)
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008252:	4b10      	ldr	r3, [pc, #64]	; (8008294 <xTaskResumeAll+0x12c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d009      	beq.n	800826e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800825a:	2301      	movs	r3, #1
 800825c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800825e:	4b0f      	ldr	r3, [pc, #60]	; (800829c <xTaskResumeAll+0x134>)
 8008260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800826e:	f001 fa99 	bl	80097a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008272:	68bb      	ldr	r3, [r7, #8]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	2000093c 	.word	0x2000093c
 8008280:	20000914 	.word	0x20000914
 8008284:	200008d4 	.word	0x200008d4
 8008288:	2000091c 	.word	0x2000091c
 800828c:	20000818 	.word	0x20000818
 8008290:	20000814 	.word	0x20000814
 8008294:	20000928 	.word	0x20000928
 8008298:	20000924 	.word	0x20000924
 800829c:	e000ed04 	.word	0xe000ed04

080082a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082a6:	4b05      	ldr	r3, [pc, #20]	; (80082bc <xTaskGetTickCount+0x1c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082ac:	687b      	ldr	r3, [r7, #4]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	20000918 	.word	0x20000918

080082c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ca:	4b4e      	ldr	r3, [pc, #312]	; (8008404 <xTaskIncrementTick+0x144>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f040 808e 	bne.w	80083f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80082d4:	4b4c      	ldr	r3, [pc, #304]	; (8008408 <xTaskIncrementTick+0x148>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3301      	adds	r3, #1
 80082da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80082dc:	4a4a      	ldr	r2, [pc, #296]	; (8008408 <xTaskIncrementTick+0x148>)
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d120      	bne.n	800832a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80082e8:	4b48      	ldr	r3, [pc, #288]	; (800840c <xTaskIncrementTick+0x14c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00a      	beq.n	8008308 <xTaskIncrementTick+0x48>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	603b      	str	r3, [r7, #0]
}
 8008304:	bf00      	nop
 8008306:	e7fe      	b.n	8008306 <xTaskIncrementTick+0x46>
 8008308:	4b40      	ldr	r3, [pc, #256]	; (800840c <xTaskIncrementTick+0x14c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	60fb      	str	r3, [r7, #12]
 800830e:	4b40      	ldr	r3, [pc, #256]	; (8008410 <xTaskIncrementTick+0x150>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a3e      	ldr	r2, [pc, #248]	; (800840c <xTaskIncrementTick+0x14c>)
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	4a3e      	ldr	r2, [pc, #248]	; (8008410 <xTaskIncrementTick+0x150>)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	4b3d      	ldr	r3, [pc, #244]	; (8008414 <xTaskIncrementTick+0x154>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3301      	adds	r3, #1
 8008322:	4a3c      	ldr	r2, [pc, #240]	; (8008414 <xTaskIncrementTick+0x154>)
 8008324:	6013      	str	r3, [r2, #0]
 8008326:	f000 fad5 	bl	80088d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800832a:	4b3b      	ldr	r3, [pc, #236]	; (8008418 <xTaskIncrementTick+0x158>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	429a      	cmp	r2, r3
 8008332:	d348      	bcc.n	80083c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008334:	4b35      	ldr	r3, [pc, #212]	; (800840c <xTaskIncrementTick+0x14c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d104      	bne.n	8008348 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800833e:	4b36      	ldr	r3, [pc, #216]	; (8008418 <xTaskIncrementTick+0x158>)
 8008340:	f04f 32ff 	mov.w	r2, #4294967295
 8008344:	601a      	str	r2, [r3, #0]
					break;
 8008346:	e03e      	b.n	80083c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008348:	4b30      	ldr	r3, [pc, #192]	; (800840c <xTaskIncrementTick+0x14c>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	429a      	cmp	r2, r3
 800835e:	d203      	bcs.n	8008368 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008360:	4a2d      	ldr	r2, [pc, #180]	; (8008418 <xTaskIncrementTick+0x158>)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008366:	e02e      	b.n	80083c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	3304      	adds	r3, #4
 800836c:	4618      	mov	r0, r3
 800836e:	f7fe fad9 	bl	8006924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008376:	2b00      	cmp	r3, #0
 8008378:	d004      	beq.n	8008384 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	3318      	adds	r3, #24
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe fad0 	bl	8006924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	2201      	movs	r2, #1
 800838a:	409a      	lsls	r2, r3
 800838c:	4b23      	ldr	r3, [pc, #140]	; (800841c <xTaskIncrementTick+0x15c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4313      	orrs	r3, r2
 8008392:	4a22      	ldr	r2, [pc, #136]	; (800841c <xTaskIncrementTick+0x15c>)
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839a:	4613      	mov	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4a1f      	ldr	r2, [pc, #124]	; (8008420 <xTaskIncrementTick+0x160>)
 80083a4:	441a      	add	r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	3304      	adds	r3, #4
 80083aa:	4619      	mov	r1, r3
 80083ac:	4610      	mov	r0, r2
 80083ae:	f7fe fa5c 	bl	800686a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b6:	4b1b      	ldr	r3, [pc, #108]	; (8008424 <xTaskIncrementTick+0x164>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	429a      	cmp	r2, r3
 80083be:	d3b9      	bcc.n	8008334 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80083c0:	2301      	movs	r3, #1
 80083c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083c4:	e7b6      	b.n	8008334 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083c6:	4b17      	ldr	r3, [pc, #92]	; (8008424 <xTaskIncrementTick+0x164>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083cc:	4914      	ldr	r1, [pc, #80]	; (8008420 <xTaskIncrementTick+0x160>)
 80083ce:	4613      	mov	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	440b      	add	r3, r1
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d901      	bls.n	80083e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80083de:	2301      	movs	r3, #1
 80083e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80083e2:	4b11      	ldr	r3, [pc, #68]	; (8008428 <xTaskIncrementTick+0x168>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80083ea:	2301      	movs	r3, #1
 80083ec:	617b      	str	r3, [r7, #20]
 80083ee:	e004      	b.n	80083fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80083f0:	4b0e      	ldr	r3, [pc, #56]	; (800842c <xTaskIncrementTick+0x16c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3301      	adds	r3, #1
 80083f6:	4a0d      	ldr	r2, [pc, #52]	; (800842c <xTaskIncrementTick+0x16c>)
 80083f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80083fa:	697b      	ldr	r3, [r7, #20]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	2000093c 	.word	0x2000093c
 8008408:	20000918 	.word	0x20000918
 800840c:	200008cc 	.word	0x200008cc
 8008410:	200008d0 	.word	0x200008d0
 8008414:	2000092c 	.word	0x2000092c
 8008418:	20000934 	.word	0x20000934
 800841c:	2000091c 	.word	0x2000091c
 8008420:	20000818 	.word	0x20000818
 8008424:	20000814 	.word	0x20000814
 8008428:	20000928 	.word	0x20000928
 800842c:	20000924 	.word	0x20000924

08008430 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008436:	4b29      	ldr	r3, [pc, #164]	; (80084dc <vTaskSwitchContext+0xac>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800843e:	4b28      	ldr	r3, [pc, #160]	; (80084e0 <vTaskSwitchContext+0xb0>)
 8008440:	2201      	movs	r2, #1
 8008442:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008444:	e044      	b.n	80084d0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008446:	4b26      	ldr	r3, [pc, #152]	; (80084e0 <vTaskSwitchContext+0xb0>)
 8008448:	2200      	movs	r2, #0
 800844a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800844c:	4b25      	ldr	r3, [pc, #148]	; (80084e4 <vTaskSwitchContext+0xb4>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	fab3 f383 	clz	r3, r3
 8008458:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800845a:	7afb      	ldrb	r3, [r7, #11]
 800845c:	f1c3 031f 	rsb	r3, r3, #31
 8008460:	617b      	str	r3, [r7, #20]
 8008462:	4921      	ldr	r1, [pc, #132]	; (80084e8 <vTaskSwitchContext+0xb8>)
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10a      	bne.n	800848c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	607b      	str	r3, [r7, #4]
}
 8008488:	bf00      	nop
 800848a:	e7fe      	b.n	800848a <vTaskSwitchContext+0x5a>
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	4613      	mov	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4a14      	ldr	r2, [pc, #80]	; (80084e8 <vTaskSwitchContext+0xb8>)
 8008498:	4413      	add	r3, r2
 800849a:	613b      	str	r3, [r7, #16]
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	685a      	ldr	r2, [r3, #4]
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	605a      	str	r2, [r3, #4]
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	3308      	adds	r3, #8
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d104      	bne.n	80084bc <vTaskSwitchContext+0x8c>
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	605a      	str	r2, [r3, #4]
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <vTaskSwitchContext+0xbc>)
 80084c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084c6:	4b09      	ldr	r3, [pc, #36]	; (80084ec <vTaskSwitchContext+0xbc>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	334c      	adds	r3, #76	; 0x4c
 80084cc:	4a08      	ldr	r2, [pc, #32]	; (80084f0 <vTaskSwitchContext+0xc0>)
 80084ce:	6013      	str	r3, [r2, #0]
}
 80084d0:	bf00      	nop
 80084d2:	371c      	adds	r7, #28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	2000093c 	.word	0x2000093c
 80084e0:	20000928 	.word	0x20000928
 80084e4:	2000091c 	.word	0x2000091c
 80084e8:	20000818 	.word	0x20000818
 80084ec:	20000814 	.word	0x20000814
 80084f0:	20000020 	.word	0x20000020

080084f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10a      	bne.n	800851a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	60fb      	str	r3, [r7, #12]
}
 8008516:	bf00      	nop
 8008518:	e7fe      	b.n	8008518 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800851a:	4b07      	ldr	r3, [pc, #28]	; (8008538 <vTaskPlaceOnEventList+0x44>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3318      	adds	r3, #24
 8008520:	4619      	mov	r1, r3
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7fe f9c5 	bl	80068b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008528:	2101      	movs	r1, #1
 800852a:	6838      	ldr	r0, [r7, #0]
 800852c:	f000 fbae 	bl	8008c8c <prvAddCurrentTaskToDelayedList>
}
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	20000814 	.word	0x20000814

0800853c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	617b      	str	r3, [r7, #20]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008564:	4b0a      	ldr	r3, [pc, #40]	; (8008590 <vTaskPlaceOnEventListRestricted+0x54>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3318      	adds	r3, #24
 800856a:	4619      	mov	r1, r3
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f7fe f97c 	bl	800686a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008578:	f04f 33ff 	mov.w	r3, #4294967295
 800857c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	68b8      	ldr	r0, [r7, #8]
 8008582:	f000 fb83 	bl	8008c8c <prvAddCurrentTaskToDelayedList>
	}
 8008586:	bf00      	nop
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20000814 	.word	0x20000814

08008594 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10a      	bne.n	80085c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	60fb      	str	r3, [r7, #12]
}
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	3318      	adds	r3, #24
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fe f9ad 	bl	8006924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ca:	4b1d      	ldr	r3, [pc, #116]	; (8008640 <xTaskRemoveFromEventList+0xac>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d11c      	bne.n	800860c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	3304      	adds	r3, #4
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fe f9a4 	bl	8006924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	2201      	movs	r2, #1
 80085e2:	409a      	lsls	r2, r3
 80085e4:	4b17      	ldr	r3, [pc, #92]	; (8008644 <xTaskRemoveFromEventList+0xb0>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	4a16      	ldr	r2, [pc, #88]	; (8008644 <xTaskRemoveFromEventList+0xb0>)
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4a13      	ldr	r2, [pc, #76]	; (8008648 <xTaskRemoveFromEventList+0xb4>)
 80085fc:	441a      	add	r2, r3
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	3304      	adds	r3, #4
 8008602:	4619      	mov	r1, r3
 8008604:	4610      	mov	r0, r2
 8008606:	f7fe f930 	bl	800686a <vListInsertEnd>
 800860a:	e005      	b.n	8008618 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	3318      	adds	r3, #24
 8008610:	4619      	mov	r1, r3
 8008612:	480e      	ldr	r0, [pc, #56]	; (800864c <xTaskRemoveFromEventList+0xb8>)
 8008614:	f7fe f929 	bl	800686a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	4b0c      	ldr	r3, [pc, #48]	; (8008650 <xTaskRemoveFromEventList+0xbc>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	429a      	cmp	r2, r3
 8008624:	d905      	bls.n	8008632 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008626:	2301      	movs	r3, #1
 8008628:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800862a:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <xTaskRemoveFromEventList+0xc0>)
 800862c:	2201      	movs	r2, #1
 800862e:	601a      	str	r2, [r3, #0]
 8008630:	e001      	b.n	8008636 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008636:	697b      	ldr	r3, [r7, #20]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	2000093c 	.word	0x2000093c
 8008644:	2000091c 	.word	0x2000091c
 8008648:	20000818 	.word	0x20000818
 800864c:	200008d4 	.word	0x200008d4
 8008650:	20000814 	.word	0x20000814
 8008654:	20000928 	.word	0x20000928

08008658 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008660:	4b06      	ldr	r3, [pc, #24]	; (800867c <vTaskInternalSetTimeOutState+0x24>)
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008668:	4b05      	ldr	r3, [pc, #20]	; (8008680 <vTaskInternalSetTimeOutState+0x28>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	605a      	str	r2, [r3, #4]
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	2000092c 	.word	0x2000092c
 8008680:	20000918 	.word	0x20000918

08008684 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10a      	bne.n	80086aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	613b      	str	r3, [r7, #16]
}
 80086a6:	bf00      	nop
 80086a8:	e7fe      	b.n	80086a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10a      	bne.n	80086c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	60fb      	str	r3, [r7, #12]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80086c6:	f001 f83d 	bl	8009744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80086ca:	4b1d      	ldr	r3, [pc, #116]	; (8008740 <xTaskCheckForTimeOut+0xbc>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e2:	d102      	bne.n	80086ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80086e4:	2300      	movs	r3, #0
 80086e6:	61fb      	str	r3, [r7, #28]
 80086e8:	e023      	b.n	8008732 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	4b15      	ldr	r3, [pc, #84]	; (8008744 <xTaskCheckForTimeOut+0xc0>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d007      	beq.n	8008706 <xTaskCheckForTimeOut+0x82>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d302      	bcc.n	8008706 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008700:	2301      	movs	r3, #1
 8008702:	61fb      	str	r3, [r7, #28]
 8008704:	e015      	b.n	8008732 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	697a      	ldr	r2, [r7, #20]
 800870c:	429a      	cmp	r2, r3
 800870e:	d20b      	bcs.n	8008728 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	1ad2      	subs	r2, r2, r3
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff ff9b 	bl	8008658 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008722:	2300      	movs	r3, #0
 8008724:	61fb      	str	r3, [r7, #28]
 8008726:	e004      	b.n	8008732 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2200      	movs	r2, #0
 800872c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800872e:	2301      	movs	r3, #1
 8008730:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008732:	f001 f837 	bl	80097a4 <vPortExitCritical>

	return xReturn;
 8008736:	69fb      	ldr	r3, [r7, #28]
}
 8008738:	4618      	mov	r0, r3
 800873a:	3720      	adds	r7, #32
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20000918 	.word	0x20000918
 8008744:	2000092c 	.word	0x2000092c

08008748 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008748:	b480      	push	{r7}
 800874a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800874c:	4b03      	ldr	r3, [pc, #12]	; (800875c <vTaskMissedYield+0x14>)
 800874e:	2201      	movs	r2, #1
 8008750:	601a      	str	r2, [r3, #0]
}
 8008752:	bf00      	nop
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	20000928 	.word	0x20000928

08008760 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008768:	f000 f852 	bl	8008810 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800876c:	4b06      	ldr	r3, [pc, #24]	; (8008788 <prvIdleTask+0x28>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d9f9      	bls.n	8008768 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008774:	4b05      	ldr	r3, [pc, #20]	; (800878c <prvIdleTask+0x2c>)
 8008776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008784:	e7f0      	b.n	8008768 <prvIdleTask+0x8>
 8008786:	bf00      	nop
 8008788:	20000818 	.word	0x20000818
 800878c:	e000ed04 	.word	0xe000ed04

08008790 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008796:	2300      	movs	r3, #0
 8008798:	607b      	str	r3, [r7, #4]
 800879a:	e00c      	b.n	80087b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4a12      	ldr	r2, [pc, #72]	; (80087f0 <prvInitialiseTaskLists+0x60>)
 80087a8:	4413      	add	r3, r2
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7fe f830 	bl	8006810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	3301      	adds	r3, #1
 80087b4:	607b      	str	r3, [r7, #4]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b06      	cmp	r3, #6
 80087ba:	d9ef      	bls.n	800879c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80087bc:	480d      	ldr	r0, [pc, #52]	; (80087f4 <prvInitialiseTaskLists+0x64>)
 80087be:	f7fe f827 	bl	8006810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087c2:	480d      	ldr	r0, [pc, #52]	; (80087f8 <prvInitialiseTaskLists+0x68>)
 80087c4:	f7fe f824 	bl	8006810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087c8:	480c      	ldr	r0, [pc, #48]	; (80087fc <prvInitialiseTaskLists+0x6c>)
 80087ca:	f7fe f821 	bl	8006810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087ce:	480c      	ldr	r0, [pc, #48]	; (8008800 <prvInitialiseTaskLists+0x70>)
 80087d0:	f7fe f81e 	bl	8006810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087d4:	480b      	ldr	r0, [pc, #44]	; (8008804 <prvInitialiseTaskLists+0x74>)
 80087d6:	f7fe f81b 	bl	8006810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087da:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <prvInitialiseTaskLists+0x78>)
 80087dc:	4a05      	ldr	r2, [pc, #20]	; (80087f4 <prvInitialiseTaskLists+0x64>)
 80087de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087e0:	4b0a      	ldr	r3, [pc, #40]	; (800880c <prvInitialiseTaskLists+0x7c>)
 80087e2:	4a05      	ldr	r2, [pc, #20]	; (80087f8 <prvInitialiseTaskLists+0x68>)
 80087e4:	601a      	str	r2, [r3, #0]
}
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000818 	.word	0x20000818
 80087f4:	200008a4 	.word	0x200008a4
 80087f8:	200008b8 	.word	0x200008b8
 80087fc:	200008d4 	.word	0x200008d4
 8008800:	200008e8 	.word	0x200008e8
 8008804:	20000900 	.word	0x20000900
 8008808:	200008cc 	.word	0x200008cc
 800880c:	200008d0 	.word	0x200008d0

08008810 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008816:	e019      	b.n	800884c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008818:	f000 ff94 	bl	8009744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800881c:	4b10      	ldr	r3, [pc, #64]	; (8008860 <prvCheckTasksWaitingTermination+0x50>)
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	3304      	adds	r3, #4
 8008828:	4618      	mov	r0, r3
 800882a:	f7fe f87b 	bl	8006924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800882e:	4b0d      	ldr	r3, [pc, #52]	; (8008864 <prvCheckTasksWaitingTermination+0x54>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3b01      	subs	r3, #1
 8008834:	4a0b      	ldr	r2, [pc, #44]	; (8008864 <prvCheckTasksWaitingTermination+0x54>)
 8008836:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008838:	4b0b      	ldr	r3, [pc, #44]	; (8008868 <prvCheckTasksWaitingTermination+0x58>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3b01      	subs	r3, #1
 800883e:	4a0a      	ldr	r2, [pc, #40]	; (8008868 <prvCheckTasksWaitingTermination+0x58>)
 8008840:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008842:	f000 ffaf 	bl	80097a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f810 	bl	800886c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <prvCheckTasksWaitingTermination+0x58>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e1      	bne.n	8008818 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	200008e8 	.word	0x200008e8
 8008864:	20000914 	.word	0x20000914
 8008868:	200008fc 	.word	0x200008fc

0800886c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	334c      	adds	r3, #76	; 0x4c
 8008878:	4618      	mov	r0, r3
 800887a:	f006 f859 	bl	800e930 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d108      	bne.n	800889a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888c:	4618      	mov	r0, r3
 800888e:	f001 f947 	bl	8009b20 <vPortFree>
				vPortFree( pxTCB );
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f001 f944 	bl	8009b20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008898:	e018      	b.n	80088cc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d103      	bne.n	80088ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 f93b 	bl	8009b20 <vPortFree>
	}
 80088aa:	e00f      	b.n	80088cc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d00a      	beq.n	80088cc <prvDeleteTCB+0x60>
	__asm volatile
 80088b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ba:	f383 8811 	msr	BASEPRI, r3
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f3bf 8f4f 	dsb	sy
 80088c6:	60fb      	str	r3, [r7, #12]
}
 80088c8:	bf00      	nop
 80088ca:	e7fe      	b.n	80088ca <prvDeleteTCB+0x5e>
	}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088da:	4b0c      	ldr	r3, [pc, #48]	; (800890c <prvResetNextTaskUnblockTime+0x38>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d104      	bne.n	80088ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80088e4:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <prvResetNextTaskUnblockTime+0x3c>)
 80088e6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80088ec:	e008      	b.n	8008900 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088ee:	4b07      	ldr	r3, [pc, #28]	; (800890c <prvResetNextTaskUnblockTime+0x38>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	4a04      	ldr	r2, [pc, #16]	; (8008910 <prvResetNextTaskUnblockTime+0x3c>)
 80088fe:	6013      	str	r3, [r2, #0]
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	200008cc 	.word	0x200008cc
 8008910:	20000934 	.word	0x20000934

08008914 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800891a:	4b0b      	ldr	r3, [pc, #44]	; (8008948 <xTaskGetSchedulerState+0x34>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d102      	bne.n	8008928 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008922:	2301      	movs	r3, #1
 8008924:	607b      	str	r3, [r7, #4]
 8008926:	e008      	b.n	800893a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008928:	4b08      	ldr	r3, [pc, #32]	; (800894c <xTaskGetSchedulerState+0x38>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d102      	bne.n	8008936 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008930:	2302      	movs	r3, #2
 8008932:	607b      	str	r3, [r7, #4]
 8008934:	e001      	b.n	800893a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008936:	2300      	movs	r3, #0
 8008938:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800893a:	687b      	ldr	r3, [r7, #4]
	}
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	20000920 	.word	0x20000920
 800894c:	2000093c 	.word	0x2000093c

08008950 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800895c:	2300      	movs	r3, #0
 800895e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d05e      	beq.n	8008a24 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896a:	4b31      	ldr	r3, [pc, #196]	; (8008a30 <xTaskPriorityInherit+0xe0>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	429a      	cmp	r2, r3
 8008972:	d24e      	bcs.n	8008a12 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	2b00      	cmp	r3, #0
 800897a:	db06      	blt.n	800898a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800897c:	4b2c      	ldr	r3, [pc, #176]	; (8008a30 <xTaskPriorityInherit+0xe0>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	f1c3 0207 	rsb	r2, r3, #7
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	6959      	ldr	r1, [r3, #20]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4a26      	ldr	r2, [pc, #152]	; (8008a34 <xTaskPriorityInherit+0xe4>)
 800899c:	4413      	add	r3, r2
 800899e:	4299      	cmp	r1, r3
 80089a0:	d12f      	bne.n	8008a02 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	3304      	adds	r3, #4
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fd ffbc 	bl	8006924 <uxListRemove>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10a      	bne.n	80089c8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b6:	2201      	movs	r2, #1
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	43da      	mvns	r2, r3
 80089be:	4b1e      	ldr	r3, [pc, #120]	; (8008a38 <xTaskPriorityInherit+0xe8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4013      	ands	r3, r2
 80089c4:	4a1c      	ldr	r2, [pc, #112]	; (8008a38 <xTaskPriorityInherit+0xe8>)
 80089c6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80089c8:	4b19      	ldr	r3, [pc, #100]	; (8008a30 <xTaskPriorityInherit+0xe0>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d6:	2201      	movs	r2, #1
 80089d8:	409a      	lsls	r2, r3
 80089da:	4b17      	ldr	r3, [pc, #92]	; (8008a38 <xTaskPriorityInherit+0xe8>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4313      	orrs	r3, r2
 80089e0:	4a15      	ldr	r2, [pc, #84]	; (8008a38 <xTaskPriorityInherit+0xe8>)
 80089e2:	6013      	str	r3, [r2, #0]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e8:	4613      	mov	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4a10      	ldr	r2, [pc, #64]	; (8008a34 <xTaskPriorityInherit+0xe4>)
 80089f2:	441a      	add	r2, r3
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	3304      	adds	r3, #4
 80089f8:	4619      	mov	r1, r3
 80089fa:	4610      	mov	r0, r2
 80089fc:	f7fd ff35 	bl	800686a <vListInsertEnd>
 8008a00:	e004      	b.n	8008a0c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a02:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <xTaskPriorityInherit+0xe0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	e008      	b.n	8008a24 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a16:	4b06      	ldr	r3, [pc, #24]	; (8008a30 <xTaskPriorityInherit+0xe0>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d201      	bcs.n	8008a24 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a20:	2301      	movs	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a24:	68fb      	ldr	r3, [r7, #12]
	}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000814 	.word	0x20000814
 8008a34:	20000818 	.word	0x20000818
 8008a38:	2000091c 	.word	0x2000091c

08008a3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b086      	sub	sp, #24
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d06e      	beq.n	8008b30 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a52:	4b3a      	ldr	r3, [pc, #232]	; (8008b3c <xTaskPriorityDisinherit+0x100>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d00a      	beq.n	8008a72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	60fb      	str	r3, [r7, #12]
}
 8008a6e:	bf00      	nop
 8008a70:	e7fe      	b.n	8008a70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10a      	bne.n	8008a90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	60bb      	str	r3, [r7, #8]
}
 8008a8c:	bf00      	nop
 8008a8e:	e7fe      	b.n	8008a8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a94:	1e5a      	subs	r2, r3, #1
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d044      	beq.n	8008b30 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d140      	bne.n	8008b30 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f7fd ff36 	bl	8006924 <uxListRemove>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d115      	bne.n	8008aea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac2:	491f      	ldr	r1, [pc, #124]	; (8008b40 <xTaskPriorityDisinherit+0x104>)
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	440b      	add	r3, r1
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10a      	bne.n	8008aea <xTaskPriorityDisinherit+0xae>
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	2201      	movs	r2, #1
 8008ada:	fa02 f303 	lsl.w	r3, r2, r3
 8008ade:	43da      	mvns	r2, r3
 8008ae0:	4b18      	ldr	r3, [pc, #96]	; (8008b44 <xTaskPriorityDisinherit+0x108>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	4a17      	ldr	r2, [pc, #92]	; (8008b44 <xTaskPriorityDisinherit+0x108>)
 8008ae8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	f1c3 0207 	rsb	r2, r3, #7
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b02:	2201      	movs	r2, #1
 8008b04:	409a      	lsls	r2, r3
 8008b06:	4b0f      	ldr	r3, [pc, #60]	; (8008b44 <xTaskPriorityDisinherit+0x108>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	4a0d      	ldr	r2, [pc, #52]	; (8008b44 <xTaskPriorityDisinherit+0x108>)
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b14:	4613      	mov	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	4413      	add	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4a08      	ldr	r2, [pc, #32]	; (8008b40 <xTaskPriorityDisinherit+0x104>)
 8008b1e:	441a      	add	r2, r3
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f7fd fe9f 	bl	800686a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b30:	697b      	ldr	r3, [r7, #20]
	}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20000814 	.word	0x20000814
 8008b40:	20000818 	.word	0x20000818
 8008b44:	2000091c 	.word	0x2000091c

08008b48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b56:	2301      	movs	r3, #1
 8008b58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d077      	beq.n	8008c50 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10a      	bne.n	8008b7e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	60fb      	str	r3, [r7, #12]
}
 8008b7a:	bf00      	nop
 8008b7c:	e7fe      	b.n	8008b7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d902      	bls.n	8008b8e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	61fb      	str	r3, [r7, #28]
 8008b8c:	e002      	b.n	8008b94 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b92:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b98:	69fa      	ldr	r2, [r7, #28]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d058      	beq.n	8008c50 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d153      	bne.n	8008c50 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008ba8:	4b2b      	ldr	r3, [pc, #172]	; (8008c58 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d10a      	bne.n	8008bc8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	60bb      	str	r3, [r7, #8]
}
 8008bc4:	bf00      	nop
 8008bc6:	e7fe      	b.n	8008bc6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bcc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	69fa      	ldr	r2, [r7, #28]
 8008bd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	db04      	blt.n	8008be6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	f1c3 0207 	rsb	r2, r3, #7
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	6959      	ldr	r1, [r3, #20]
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	4613      	mov	r3, r2
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4a19      	ldr	r2, [pc, #100]	; (8008c5c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008bf6:	4413      	add	r3, r2
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d129      	bne.n	8008c50 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	3304      	adds	r3, #4
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fd fe8f 	bl	8006924 <uxListRemove>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10a      	bne.n	8008c22 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c10:	2201      	movs	r2, #1
 8008c12:	fa02 f303 	lsl.w	r3, r2, r3
 8008c16:	43da      	mvns	r2, r3
 8008c18:	4b11      	ldr	r3, [pc, #68]	; (8008c60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	4a10      	ldr	r2, [pc, #64]	; (8008c60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c20:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c26:	2201      	movs	r2, #1
 8008c28:	409a      	lsls	r2, r3
 8008c2a:	4b0d      	ldr	r3, [pc, #52]	; (8008c60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	4a0b      	ldr	r2, [pc, #44]	; (8008c60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c38:	4613      	mov	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4a06      	ldr	r2, [pc, #24]	; (8008c5c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008c42:	441a      	add	r2, r3
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	3304      	adds	r3, #4
 8008c48:	4619      	mov	r1, r3
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	f7fd fe0d 	bl	800686a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c50:	bf00      	nop
 8008c52:	3720      	adds	r7, #32
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	20000814 	.word	0x20000814
 8008c5c:	20000818 	.word	0x20000818
 8008c60:	2000091c 	.word	0x2000091c

08008c64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c64:	b480      	push	{r7}
 8008c66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c68:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d004      	beq.n	8008c7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c70:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c76:	3201      	adds	r2, #1
 8008c78:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008c7a:	4b03      	ldr	r3, [pc, #12]	; (8008c88 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
	}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	20000814 	.word	0x20000814

08008c8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008c96:	4b29      	ldr	r3, [pc, #164]	; (8008d3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c9c:	4b28      	ldr	r3, [pc, #160]	; (8008d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fd fe3e 	bl	8006924 <uxListRemove>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10b      	bne.n	8008cc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008cae:	4b24      	ldr	r3, [pc, #144]	; (8008d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cba:	43da      	mvns	r2, r3
 8008cbc:	4b21      	ldr	r3, [pc, #132]	; (8008d44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	4a20      	ldr	r2, [pc, #128]	; (8008d44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008cc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ccc:	d10a      	bne.n	8008ce4 <prvAddCurrentTaskToDelayedList+0x58>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d007      	beq.n	8008ce4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cd4:	4b1a      	ldr	r3, [pc, #104]	; (8008d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4619      	mov	r1, r3
 8008cdc:	481a      	ldr	r0, [pc, #104]	; (8008d48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008cde:	f7fd fdc4 	bl	800686a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ce2:	e026      	b.n	8008d32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4413      	add	r3, r2
 8008cea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008cec:	4b14      	ldr	r3, [pc, #80]	; (8008d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d209      	bcs.n	8008d10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cfc:	4b13      	ldr	r3, [pc, #76]	; (8008d4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3304      	adds	r3, #4
 8008d06:	4619      	mov	r1, r3
 8008d08:	4610      	mov	r0, r2
 8008d0a:	f7fd fdd2 	bl	80068b2 <vListInsert>
}
 8008d0e:	e010      	b.n	8008d32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d10:	4b0f      	ldr	r3, [pc, #60]	; (8008d50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	4b0a      	ldr	r3, [pc, #40]	; (8008d40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f7fd fdc8 	bl	80068b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d22:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d202      	bcs.n	8008d32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008d2c:	4a09      	ldr	r2, [pc, #36]	; (8008d54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6013      	str	r3, [r2, #0]
}
 8008d32:	bf00      	nop
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	20000918 	.word	0x20000918
 8008d40:	20000814 	.word	0x20000814
 8008d44:	2000091c 	.word	0x2000091c
 8008d48:	20000900 	.word	0x20000900
 8008d4c:	200008d0 	.word	0x200008d0
 8008d50:	200008cc 	.word	0x200008cc
 8008d54:	20000934 	.word	0x20000934

08008d58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	; 0x28
 8008d5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d62:	f000 fb85 	bl	8009470 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d66:	4b1c      	ldr	r3, [pc, #112]	; (8008dd8 <xTimerCreateTimerTask+0x80>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d021      	beq.n	8008db2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d76:	1d3a      	adds	r2, r7, #4
 8008d78:	f107 0108 	add.w	r1, r7, #8
 8008d7c:	f107 030c 	add.w	r3, r7, #12
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7f7 fc13 	bl	80005ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	9202      	str	r2, [sp, #8]
 8008d8e:	9301      	str	r3, [sp, #4]
 8008d90:	2305      	movs	r3, #5
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	2300      	movs	r3, #0
 8008d96:	460a      	mov	r2, r1
 8008d98:	4910      	ldr	r1, [pc, #64]	; (8008ddc <xTimerCreateTimerTask+0x84>)
 8008d9a:	4811      	ldr	r0, [pc, #68]	; (8008de0 <xTimerCreateTimerTask+0x88>)
 8008d9c:	f7fe fdf4 	bl	8007988 <xTaskCreateStatic>
 8008da0:	4603      	mov	r3, r0
 8008da2:	4a10      	ldr	r2, [pc, #64]	; (8008de4 <xTimerCreateTimerTask+0x8c>)
 8008da4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008da6:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <xTimerCreateTimerTask+0x8c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dae:	2301      	movs	r3, #1
 8008db0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	613b      	str	r3, [r7, #16]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008dce:	697b      	ldr	r3, [r7, #20]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3718      	adds	r7, #24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	20000970 	.word	0x20000970
 8008ddc:	0800f2d0 	.word	0x0800f2d0
 8008de0:	08009051 	.word	0x08009051
 8008de4:	20000974 	.word	0x20000974

08008de8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008df6:	2028      	movs	r0, #40	; 0x28
 8008df8:	f000 fdc6 	bl	8009988 <pvPortMalloc>
 8008dfc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00d      	beq.n	8008e20 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	9301      	str	r3, [sp, #4]
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	9300      	str	r3, [sp, #0]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	68b9      	ldr	r1, [r7, #8]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 f843 	bl	8008ea6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008e20:	697b      	ldr	r3, [r7, #20]
	}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b08a      	sub	sp, #40	; 0x28
 8008e2e:	af02      	add	r7, sp, #8
 8008e30:	60f8      	str	r0, [r7, #12]
 8008e32:	60b9      	str	r1, [r7, #8]
 8008e34:	607a      	str	r2, [r7, #4]
 8008e36:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008e38:	2328      	movs	r3, #40	; 0x28
 8008e3a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	2b28      	cmp	r3, #40	; 0x28
 8008e40:	d00a      	beq.n	8008e58 <xTimerCreateStatic+0x2e>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	61bb      	str	r3, [r7, #24]
}
 8008e54:	bf00      	nop
 8008e56:	e7fe      	b.n	8008e56 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10a      	bne.n	8008e76 <xTimerCreateStatic+0x4c>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	617b      	str	r3, [r7, #20]
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00d      	beq.n	8008e9c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	68b9      	ldr	r1, [r7, #8]
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f000 f805 	bl	8008ea6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008e9c:	69fb      	ldr	r3, [r7, #28]
	}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3720      	adds	r7, #32
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b086      	sub	sp, #24
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
 8008eb2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10a      	bne.n	8008ed0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	617b      	str	r3, [r7, #20]
}
 8008ecc:	bf00      	nop
 8008ece:	e7fe      	b.n	8008ece <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d01e      	beq.n	8008f14 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008ed6:	f000 facb 	bl	8009470 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	6a3a      	ldr	r2, [r7, #32]
 8008ef0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fd fcaa 	bl	8006850 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d008      	beq.n	8008f14 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f08:	f043 0304 	orr.w	r3, r3, #4
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008f14:	bf00      	nop
 8008f16:	3718      	adds	r7, #24
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08a      	sub	sp, #40	; 0x28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10a      	bne.n	8008f4a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f38:	f383 8811 	msr	BASEPRI, r3
 8008f3c:	f3bf 8f6f 	isb	sy
 8008f40:	f3bf 8f4f 	dsb	sy
 8008f44:	623b      	str	r3, [r7, #32]
}
 8008f46:	bf00      	nop
 8008f48:	e7fe      	b.n	8008f48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f4a:	4b1a      	ldr	r3, [pc, #104]	; (8008fb4 <xTimerGenericCommand+0x98>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d02a      	beq.n	8008fa8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b05      	cmp	r3, #5
 8008f62:	dc18      	bgt.n	8008f96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008f64:	f7ff fcd6 	bl	8008914 <xTaskGetSchedulerState>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d109      	bne.n	8008f82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008f6e:	4b11      	ldr	r3, [pc, #68]	; (8008fb4 <xTimerGenericCommand+0x98>)
 8008f70:	6818      	ldr	r0, [r3, #0]
 8008f72:	f107 0114 	add.w	r1, r7, #20
 8008f76:	2300      	movs	r3, #0
 8008f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f7a:	f7fd feed 	bl	8006d58 <xQueueGenericSend>
 8008f7e:	6278      	str	r0, [r7, #36]	; 0x24
 8008f80:	e012      	b.n	8008fa8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008f82:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <xTimerGenericCommand+0x98>)
 8008f84:	6818      	ldr	r0, [r3, #0]
 8008f86:	f107 0114 	add.w	r1, r7, #20
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f7fd fee3 	bl	8006d58 <xQueueGenericSend>
 8008f92:	6278      	str	r0, [r7, #36]	; 0x24
 8008f94:	e008      	b.n	8008fa8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008f96:	4b07      	ldr	r3, [pc, #28]	; (8008fb4 <xTimerGenericCommand+0x98>)
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	f107 0114 	add.w	r1, r7, #20
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	f7fd ffd7 	bl	8006f54 <xQueueGenericSendFromISR>
 8008fa6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3728      	adds	r7, #40	; 0x28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20000970 	.word	0x20000970

08008fb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fc2:	4b22      	ldr	r3, [pc, #136]	; (800904c <prvProcessExpiredTimer+0x94>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	3304      	adds	r3, #4
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fd fca7 	bl	8006924 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d022      	beq.n	800902a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	699a      	ldr	r2, [r3, #24]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	18d1      	adds	r1, r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	6978      	ldr	r0, [r7, #20]
 8008ff2:	f000 f8d1 	bl	8009198 <prvInsertTimerInActiveList>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d01f      	beq.n	800903c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	2300      	movs	r3, #0
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	2100      	movs	r1, #0
 8009006:	6978      	ldr	r0, [r7, #20]
 8009008:	f7ff ff88 	bl	8008f1c <xTimerGenericCommand>
 800900c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d113      	bne.n	800903c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	60fb      	str	r3, [r7, #12]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009030:	f023 0301 	bic.w	r3, r3, #1
 8009034:	b2da      	uxtb	r2, r3
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	6a1b      	ldr	r3, [r3, #32]
 8009040:	6978      	ldr	r0, [r7, #20]
 8009042:	4798      	blx	r3
}
 8009044:	bf00      	nop
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	20000968 	.word	0x20000968

08009050 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009058:	f107 0308 	add.w	r3, r7, #8
 800905c:	4618      	mov	r0, r3
 800905e:	f000 f857 	bl	8009110 <prvGetNextExpireTime>
 8009062:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	4619      	mov	r1, r3
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 f803 	bl	8009074 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800906e:	f000 f8d5 	bl	800921c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009072:	e7f1      	b.n	8009058 <prvTimerTask+0x8>

08009074 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800907e:	f7ff f865 	bl	800814c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009082:	f107 0308 	add.w	r3, r7, #8
 8009086:	4618      	mov	r0, r3
 8009088:	f000 f866 	bl	8009158 <prvSampleTimeNow>
 800908c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d130      	bne.n	80090f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10a      	bne.n	80090b0 <prvProcessTimerOrBlockTask+0x3c>
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d806      	bhi.n	80090b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090a2:	f7ff f861 	bl	8008168 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090a6:	68f9      	ldr	r1, [r7, #12]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7ff ff85 	bl	8008fb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80090ae:	e024      	b.n	80090fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d008      	beq.n	80090c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80090b6:	4b13      	ldr	r3, [pc, #76]	; (8009104 <prvProcessTimerOrBlockTask+0x90>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <prvProcessTimerOrBlockTask+0x50>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e000      	b.n	80090c6 <prvProcessTimerOrBlockTask+0x52>
 80090c4:	2300      	movs	r3, #0
 80090c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80090c8:	4b0f      	ldr	r3, [pc, #60]	; (8009108 <prvProcessTimerOrBlockTask+0x94>)
 80090ca:	6818      	ldr	r0, [r3, #0]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	683a      	ldr	r2, [r7, #0]
 80090d4:	4619      	mov	r1, r3
 80090d6:	f7fe fc23 	bl	8007920 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80090da:	f7ff f845 	bl	8008168 <xTaskResumeAll>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10a      	bne.n	80090fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80090e4:	4b09      	ldr	r3, [pc, #36]	; (800910c <prvProcessTimerOrBlockTask+0x98>)
 80090e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	f3bf 8f6f 	isb	sy
}
 80090f4:	e001      	b.n	80090fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80090f6:	f7ff f837 	bl	8008168 <xTaskResumeAll>
}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	2000096c 	.word	0x2000096c
 8009108:	20000970 	.word	0x20000970
 800910c:	e000ed04 	.word	0xe000ed04

08009110 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009118:	4b0e      	ldr	r3, [pc, #56]	; (8009154 <prvGetNextExpireTime+0x44>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d101      	bne.n	8009126 <prvGetNextExpireTime+0x16>
 8009122:	2201      	movs	r2, #1
 8009124:	e000      	b.n	8009128 <prvGetNextExpireTime+0x18>
 8009126:	2200      	movs	r2, #0
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d105      	bne.n	8009140 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009134:	4b07      	ldr	r3, [pc, #28]	; (8009154 <prvGetNextExpireTime+0x44>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	60fb      	str	r3, [r7, #12]
 800913e:	e001      	b.n	8009144 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009144:	68fb      	ldr	r3, [r7, #12]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	20000968 	.word	0x20000968

08009158 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009160:	f7ff f89e 	bl	80082a0 <xTaskGetTickCount>
 8009164:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009166:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <prvSampleTimeNow+0x3c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	429a      	cmp	r2, r3
 800916e:	d205      	bcs.n	800917c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009170:	f000 f91a 	bl	80093a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2201      	movs	r2, #1
 8009178:	601a      	str	r2, [r3, #0]
 800917a:	e002      	b.n	8009182 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009182:	4a04      	ldr	r2, [pc, #16]	; (8009194 <prvSampleTimeNow+0x3c>)
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009188:	68fb      	ldr	r3, [r7, #12]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20000978 	.word	0x20000978

08009198 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091a6:	2300      	movs	r3, #0
 80091a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80091b6:	68ba      	ldr	r2, [r7, #8]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d812      	bhi.n	80091e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	1ad2      	subs	r2, r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d302      	bcc.n	80091d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80091cc:	2301      	movs	r3, #1
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	e01b      	b.n	800920a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80091d2:	4b10      	ldr	r3, [pc, #64]	; (8009214 <prvInsertTimerInActiveList+0x7c>)
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3304      	adds	r3, #4
 80091da:	4619      	mov	r1, r3
 80091dc:	4610      	mov	r0, r2
 80091de:	f7fd fb68 	bl	80068b2 <vListInsert>
 80091e2:	e012      	b.n	800920a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d206      	bcs.n	80091fa <prvInsertTimerInActiveList+0x62>
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d302      	bcc.n	80091fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80091f4:	2301      	movs	r3, #1
 80091f6:	617b      	str	r3, [r7, #20]
 80091f8:	e007      	b.n	800920a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091fa:	4b07      	ldr	r3, [pc, #28]	; (8009218 <prvInsertTimerInActiveList+0x80>)
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3304      	adds	r3, #4
 8009202:	4619      	mov	r1, r3
 8009204:	4610      	mov	r0, r2
 8009206:	f7fd fb54 	bl	80068b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800920a:	697b      	ldr	r3, [r7, #20]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	2000096c 	.word	0x2000096c
 8009218:	20000968 	.word	0x20000968

0800921c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08c      	sub	sp, #48	; 0x30
 8009220:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009222:	e0ae      	b.n	8009382 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b00      	cmp	r3, #0
 8009228:	f2c0 80aa 	blt.w	8009380 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d004      	beq.n	8009242 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	3304      	adds	r3, #4
 800923c:	4618      	mov	r0, r3
 800923e:	f7fd fb71 	bl	8006924 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009242:	1d3b      	adds	r3, r7, #4
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff ff87 	bl	8009158 <prvSampleTimeNow>
 800924a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	2b09      	cmp	r3, #9
 8009250:	f200 8097 	bhi.w	8009382 <prvProcessReceivedCommands+0x166>
 8009254:	a201      	add	r2, pc, #4	; (adr r2, 800925c <prvProcessReceivedCommands+0x40>)
 8009256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925a:	bf00      	nop
 800925c:	08009285 	.word	0x08009285
 8009260:	08009285 	.word	0x08009285
 8009264:	08009285 	.word	0x08009285
 8009268:	080092f9 	.word	0x080092f9
 800926c:	0800930d 	.word	0x0800930d
 8009270:	08009357 	.word	0x08009357
 8009274:	08009285 	.word	0x08009285
 8009278:	08009285 	.word	0x08009285
 800927c:	080092f9 	.word	0x080092f9
 8009280:	0800930d 	.word	0x0800930d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800928a:	f043 0301 	orr.w	r3, r3, #1
 800928e:	b2da      	uxtb	r2, r3
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	18d1      	adds	r1, r2, r3
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6a3a      	ldr	r2, [r7, #32]
 80092a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092a4:	f7ff ff78 	bl	8009198 <prvInsertTimerInActiveList>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d069      	beq.n	8009382 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d05e      	beq.n	8009382 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	441a      	add	r2, r3
 80092cc:	2300      	movs	r3, #0
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	2300      	movs	r3, #0
 80092d2:	2100      	movs	r1, #0
 80092d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092d6:	f7ff fe21 	bl	8008f1c <xTimerGenericCommand>
 80092da:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d14f      	bne.n	8009382 <prvProcessReceivedCommands+0x166>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	61bb      	str	r3, [r7, #24]
}
 80092f4:	bf00      	nop
 80092f6:	e7fe      	b.n	80092f6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092fe:	f023 0301 	bic.w	r3, r3, #1
 8009302:	b2da      	uxtb	r2, r3
 8009304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800930a:	e03a      	b.n	8009382 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009312:	f043 0301 	orr.w	r3, r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d10a      	bne.n	8009342 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	617b      	str	r3, [r7, #20]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009344:	699a      	ldr	r2, [r3, #24]
 8009346:	6a3b      	ldr	r3, [r7, #32]
 8009348:	18d1      	adds	r1, r2, r3
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	6a3a      	ldr	r2, [r7, #32]
 800934e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009350:	f7ff ff22 	bl	8009198 <prvInsertTimerInActiveList>
					break;
 8009354:	e015      	b.n	8009382 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800935c:	f003 0302 	and.w	r3, r3, #2
 8009360:	2b00      	cmp	r3, #0
 8009362:	d103      	bne.n	800936c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8009364:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009366:	f000 fbdb 	bl	8009b20 <vPortFree>
 800936a:	e00a      	b.n	8009382 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009372:	f023 0301 	bic.w	r3, r3, #1
 8009376:	b2da      	uxtb	r2, r3
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800937e:	e000      	b.n	8009382 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009380:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009382:	4b08      	ldr	r3, [pc, #32]	; (80093a4 <prvProcessReceivedCommands+0x188>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f107 0108 	add.w	r1, r7, #8
 800938a:	2200      	movs	r2, #0
 800938c:	4618      	mov	r0, r3
 800938e:	f7fd ff09 	bl	80071a4 <xQueueReceive>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	f47f af45 	bne.w	8009224 <prvProcessReceivedCommands+0x8>
	}
}
 800939a:	bf00      	nop
 800939c:	bf00      	nop
 800939e:	3728      	adds	r7, #40	; 0x28
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20000970 	.word	0x20000970

080093a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093ae:	e048      	b.n	8009442 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093b0:	4b2d      	ldr	r3, [pc, #180]	; (8009468 <prvSwitchTimerLists+0xc0>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093ba:	4b2b      	ldr	r3, [pc, #172]	; (8009468 <prvSwitchTimerLists+0xc0>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fd faab 	bl	8006924 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6a1b      	ldr	r3, [r3, #32]
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093dc:	f003 0304 	and.w	r3, r3, #4
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d02e      	beq.n	8009442 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	699b      	ldr	r3, [r3, #24]
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	4413      	add	r3, r2
 80093ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80093ee:	68ba      	ldr	r2, [r7, #8]
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d90e      	bls.n	8009414 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	68fa      	ldr	r2, [r7, #12]
 8009400:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009402:	4b19      	ldr	r3, [pc, #100]	; (8009468 <prvSwitchTimerLists+0xc0>)
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	3304      	adds	r3, #4
 800940a:	4619      	mov	r1, r3
 800940c:	4610      	mov	r0, r2
 800940e:	f7fd fa50 	bl	80068b2 <vListInsert>
 8009412:	e016      	b.n	8009442 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009414:	2300      	movs	r3, #0
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	693a      	ldr	r2, [r7, #16]
 800941c:	2100      	movs	r1, #0
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7ff fd7c 	bl	8008f1c <xTimerGenericCommand>
 8009424:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10a      	bne.n	8009442 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	603b      	str	r3, [r7, #0]
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009442:	4b09      	ldr	r3, [pc, #36]	; (8009468 <prvSwitchTimerLists+0xc0>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1b1      	bne.n	80093b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800944c:	4b06      	ldr	r3, [pc, #24]	; (8009468 <prvSwitchTimerLists+0xc0>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009452:	4b06      	ldr	r3, [pc, #24]	; (800946c <prvSwitchTimerLists+0xc4>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a04      	ldr	r2, [pc, #16]	; (8009468 <prvSwitchTimerLists+0xc0>)
 8009458:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800945a:	4a04      	ldr	r2, [pc, #16]	; (800946c <prvSwitchTimerLists+0xc4>)
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	6013      	str	r3, [r2, #0]
}
 8009460:	bf00      	nop
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20000968 	.word	0x20000968
 800946c:	2000096c 	.word	0x2000096c

08009470 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009476:	f000 f965 	bl	8009744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800947a:	4b15      	ldr	r3, [pc, #84]	; (80094d0 <prvCheckForValidListAndQueue+0x60>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d120      	bne.n	80094c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009482:	4814      	ldr	r0, [pc, #80]	; (80094d4 <prvCheckForValidListAndQueue+0x64>)
 8009484:	f7fd f9c4 	bl	8006810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009488:	4813      	ldr	r0, [pc, #76]	; (80094d8 <prvCheckForValidListAndQueue+0x68>)
 800948a:	f7fd f9c1 	bl	8006810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <prvCheckForValidListAndQueue+0x6c>)
 8009490:	4a10      	ldr	r2, [pc, #64]	; (80094d4 <prvCheckForValidListAndQueue+0x64>)
 8009492:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009494:	4b12      	ldr	r3, [pc, #72]	; (80094e0 <prvCheckForValidListAndQueue+0x70>)
 8009496:	4a10      	ldr	r2, [pc, #64]	; (80094d8 <prvCheckForValidListAndQueue+0x68>)
 8009498:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800949a:	2300      	movs	r3, #0
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	4b11      	ldr	r3, [pc, #68]	; (80094e4 <prvCheckForValidListAndQueue+0x74>)
 80094a0:	4a11      	ldr	r2, [pc, #68]	; (80094e8 <prvCheckForValidListAndQueue+0x78>)
 80094a2:	210c      	movs	r1, #12
 80094a4:	200a      	movs	r0, #10
 80094a6:	f7fd facf 	bl	8006a48 <xQueueGenericCreateStatic>
 80094aa:	4603      	mov	r3, r0
 80094ac:	4a08      	ldr	r2, [pc, #32]	; (80094d0 <prvCheckForValidListAndQueue+0x60>)
 80094ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80094b0:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <prvCheckForValidListAndQueue+0x60>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d005      	beq.n	80094c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80094b8:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <prvCheckForValidListAndQueue+0x60>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	490b      	ldr	r1, [pc, #44]	; (80094ec <prvCheckForValidListAndQueue+0x7c>)
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe fa04 	bl	80078cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094c4:	f000 f96e 	bl	80097a4 <vPortExitCritical>
}
 80094c8:	bf00      	nop
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20000970 	.word	0x20000970
 80094d4:	20000940 	.word	0x20000940
 80094d8:	20000954 	.word	0x20000954
 80094dc:	20000968 	.word	0x20000968
 80094e0:	2000096c 	.word	0x2000096c
 80094e4:	200009f4 	.word	0x200009f4
 80094e8:	2000097c 	.word	0x2000097c
 80094ec:	0800f2d8 	.word	0x0800f2d8

080094f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3b04      	subs	r3, #4
 8009500:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	3b04      	subs	r3, #4
 800950e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f023 0201 	bic.w	r2, r3, #1
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	3b04      	subs	r3, #4
 800951e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009520:	4a0c      	ldr	r2, [pc, #48]	; (8009554 <pxPortInitialiseStack+0x64>)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3b14      	subs	r3, #20
 800952a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3b04      	subs	r3, #4
 8009536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f06f 0202 	mvn.w	r2, #2
 800953e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3b20      	subs	r3, #32
 8009544:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009546:	68fb      	ldr	r3, [r7, #12]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	08009559 	.word	0x08009559

08009558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009562:	4b12      	ldr	r3, [pc, #72]	; (80095ac <prvTaskExitError+0x54>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800956a:	d00a      	beq.n	8009582 <prvTaskExitError+0x2a>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	60fb      	str	r3, [r7, #12]
}
 800957e:	bf00      	nop
 8009580:	e7fe      	b.n	8009580 <prvTaskExitError+0x28>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	60bb      	str	r3, [r7, #8]
}
 8009594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009596:	bf00      	nop
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d0fc      	beq.n	8009598 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800959e:	bf00      	nop
 80095a0:	bf00      	nop
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	20000014 	.word	0x20000014

080095b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80095b0:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <pxCurrentTCBConst2>)
 80095b2:	6819      	ldr	r1, [r3, #0]
 80095b4:	6808      	ldr	r0, [r1, #0]
 80095b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ba:	f380 8809 	msr	PSP, r0
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f04f 0000 	mov.w	r0, #0
 80095c6:	f380 8811 	msr	BASEPRI, r0
 80095ca:	4770      	bx	lr
 80095cc:	f3af 8000 	nop.w

080095d0 <pxCurrentTCBConst2>:
 80095d0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80095d4:	bf00      	nop
 80095d6:	bf00      	nop

080095d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80095d8:	4808      	ldr	r0, [pc, #32]	; (80095fc <prvPortStartFirstTask+0x24>)
 80095da:	6800      	ldr	r0, [r0, #0]
 80095dc:	6800      	ldr	r0, [r0, #0]
 80095de:	f380 8808 	msr	MSP, r0
 80095e2:	f04f 0000 	mov.w	r0, #0
 80095e6:	f380 8814 	msr	CONTROL, r0
 80095ea:	b662      	cpsie	i
 80095ec:	b661      	cpsie	f
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	df00      	svc	0
 80095f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80095fa:	bf00      	nop
 80095fc:	e000ed08 	.word	0xe000ed08

08009600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009606:	4b46      	ldr	r3, [pc, #280]	; (8009720 <xPortStartScheduler+0x120>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a46      	ldr	r2, [pc, #280]	; (8009724 <xPortStartScheduler+0x124>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d10a      	bne.n	8009626 <xPortStartScheduler+0x26>
	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	613b      	str	r3, [r7, #16]
}
 8009622:	bf00      	nop
 8009624:	e7fe      	b.n	8009624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009626:	4b3e      	ldr	r3, [pc, #248]	; (8009720 <xPortStartScheduler+0x120>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a3f      	ldr	r2, [pc, #252]	; (8009728 <xPortStartScheduler+0x128>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d10a      	bne.n	8009646 <xPortStartScheduler+0x46>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009634:	f383 8811 	msr	BASEPRI, r3
 8009638:	f3bf 8f6f 	isb	sy
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	60fb      	str	r3, [r7, #12]
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009646:	4b39      	ldr	r3, [pc, #228]	; (800972c <xPortStartScheduler+0x12c>)
 8009648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	b2db      	uxtb	r3, r3
 8009650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	22ff      	movs	r2, #255	; 0xff
 8009656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	b2db      	uxtb	r3, r3
 800965e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009660:	78fb      	ldrb	r3, [r7, #3]
 8009662:	b2db      	uxtb	r3, r3
 8009664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009668:	b2da      	uxtb	r2, r3
 800966a:	4b31      	ldr	r3, [pc, #196]	; (8009730 <xPortStartScheduler+0x130>)
 800966c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800966e:	4b31      	ldr	r3, [pc, #196]	; (8009734 <xPortStartScheduler+0x134>)
 8009670:	2207      	movs	r2, #7
 8009672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009674:	e009      	b.n	800968a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009676:	4b2f      	ldr	r3, [pc, #188]	; (8009734 <xPortStartScheduler+0x134>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3b01      	subs	r3, #1
 800967c:	4a2d      	ldr	r2, [pc, #180]	; (8009734 <xPortStartScheduler+0x134>)
 800967e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	b2db      	uxtb	r3, r3
 8009684:	005b      	lsls	r3, r3, #1
 8009686:	b2db      	uxtb	r3, r3
 8009688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800968a:	78fb      	ldrb	r3, [r7, #3]
 800968c:	b2db      	uxtb	r3, r3
 800968e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009692:	2b80      	cmp	r3, #128	; 0x80
 8009694:	d0ef      	beq.n	8009676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009696:	4b27      	ldr	r3, [pc, #156]	; (8009734 <xPortStartScheduler+0x134>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f1c3 0307 	rsb	r3, r3, #7
 800969e:	2b04      	cmp	r3, #4
 80096a0:	d00a      	beq.n	80096b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	60bb      	str	r3, [r7, #8]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80096b8:	4b1e      	ldr	r3, [pc, #120]	; (8009734 <xPortStartScheduler+0x134>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	021b      	lsls	r3, r3, #8
 80096be:	4a1d      	ldr	r2, [pc, #116]	; (8009734 <xPortStartScheduler+0x134>)
 80096c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096c2:	4b1c      	ldr	r3, [pc, #112]	; (8009734 <xPortStartScheduler+0x134>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096ca:	4a1a      	ldr	r2, [pc, #104]	; (8009734 <xPortStartScheduler+0x134>)
 80096cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096d6:	4b18      	ldr	r3, [pc, #96]	; (8009738 <xPortStartScheduler+0x138>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a17      	ldr	r2, [pc, #92]	; (8009738 <xPortStartScheduler+0x138>)
 80096dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80096e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096e2:	4b15      	ldr	r3, [pc, #84]	; (8009738 <xPortStartScheduler+0x138>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a14      	ldr	r2, [pc, #80]	; (8009738 <xPortStartScheduler+0x138>)
 80096e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80096ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80096ee:	f000 f8dd 	bl	80098ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80096f2:	4b12      	ldr	r3, [pc, #72]	; (800973c <xPortStartScheduler+0x13c>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80096f8:	f000 f8fc 	bl	80098f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096fc:	4b10      	ldr	r3, [pc, #64]	; (8009740 <xPortStartScheduler+0x140>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a0f      	ldr	r2, [pc, #60]	; (8009740 <xPortStartScheduler+0x140>)
 8009702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009708:	f7ff ff66 	bl	80095d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800970c:	f7fe fe90 	bl	8008430 <vTaskSwitchContext>
	prvTaskExitError();
 8009710:	f7ff ff22 	bl	8009558 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3718      	adds	r7, #24
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	e000ed00 	.word	0xe000ed00
 8009724:	410fc271 	.word	0x410fc271
 8009728:	410fc270 	.word	0x410fc270
 800972c:	e000e400 	.word	0xe000e400
 8009730:	20000a3c 	.word	0x20000a3c
 8009734:	20000a40 	.word	0x20000a40
 8009738:	e000ed20 	.word	0xe000ed20
 800973c:	20000014 	.word	0x20000014
 8009740:	e000ef34 	.word	0xe000ef34

08009744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	607b      	str	r3, [r7, #4]
}
 800975c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800975e:	4b0f      	ldr	r3, [pc, #60]	; (800979c <vPortEnterCritical+0x58>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3301      	adds	r3, #1
 8009764:	4a0d      	ldr	r2, [pc, #52]	; (800979c <vPortEnterCritical+0x58>)
 8009766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009768:	4b0c      	ldr	r3, [pc, #48]	; (800979c <vPortEnterCritical+0x58>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d10f      	bne.n	8009790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009770:	4b0b      	ldr	r3, [pc, #44]	; (80097a0 <vPortEnterCritical+0x5c>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00a      	beq.n	8009790 <vPortEnterCritical+0x4c>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	603b      	str	r3, [r7, #0]
}
 800978c:	bf00      	nop
 800978e:	e7fe      	b.n	800978e <vPortEnterCritical+0x4a>
	}
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	20000014 	.word	0x20000014
 80097a0:	e000ed04 	.word	0xe000ed04

080097a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80097aa:	4b12      	ldr	r3, [pc, #72]	; (80097f4 <vPortExitCritical+0x50>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10a      	bne.n	80097c8 <vPortExitCritical+0x24>
	__asm volatile
 80097b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b6:	f383 8811 	msr	BASEPRI, r3
 80097ba:	f3bf 8f6f 	isb	sy
 80097be:	f3bf 8f4f 	dsb	sy
 80097c2:	607b      	str	r3, [r7, #4]
}
 80097c4:	bf00      	nop
 80097c6:	e7fe      	b.n	80097c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80097c8:	4b0a      	ldr	r3, [pc, #40]	; (80097f4 <vPortExitCritical+0x50>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	4a09      	ldr	r2, [pc, #36]	; (80097f4 <vPortExitCritical+0x50>)
 80097d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80097d2:	4b08      	ldr	r3, [pc, #32]	; (80097f4 <vPortExitCritical+0x50>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d105      	bne.n	80097e6 <vPortExitCritical+0x42>
 80097da:	2300      	movs	r3, #0
 80097dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	f383 8811 	msr	BASEPRI, r3
}
 80097e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80097e6:	bf00      	nop
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	20000014 	.word	0x20000014
	...

08009800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009800:	f3ef 8009 	mrs	r0, PSP
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	4b15      	ldr	r3, [pc, #84]	; (8009860 <pxCurrentTCBConst>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	f01e 0f10 	tst.w	lr, #16
 8009810:	bf08      	it	eq
 8009812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981a:	6010      	str	r0, [r2, #0]
 800981c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009824:	f380 8811 	msr	BASEPRI, r0
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f7fe fdfe 	bl	8008430 <vTaskSwitchContext>
 8009834:	f04f 0000 	mov.w	r0, #0
 8009838:	f380 8811 	msr	BASEPRI, r0
 800983c:	bc09      	pop	{r0, r3}
 800983e:	6819      	ldr	r1, [r3, #0]
 8009840:	6808      	ldr	r0, [r1, #0]
 8009842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009846:	f01e 0f10 	tst.w	lr, #16
 800984a:	bf08      	it	eq
 800984c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009850:	f380 8809 	msr	PSP, r0
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	f3af 8000 	nop.w

08009860 <pxCurrentTCBConst>:
 8009860:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop

08009868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	607b      	str	r3, [r7, #4]
}
 8009880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009882:	f7fe fd1d 	bl	80082c0 <xTaskIncrementTick>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800988c:	4b06      	ldr	r3, [pc, #24]	; (80098a8 <SysTick_Handler+0x40>)
 800988e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	2300      	movs	r3, #0
 8009896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	f383 8811 	msr	BASEPRI, r3
}
 800989e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80098a0:	bf00      	nop
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	e000ed04 	.word	0xe000ed04

080098ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80098ac:	b480      	push	{r7}
 80098ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098b0:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <vPortSetupTimerInterrupt+0x34>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098b6:	4b0b      	ldr	r3, [pc, #44]	; (80098e4 <vPortSetupTimerInterrupt+0x38>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098bc:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <vPortSetupTimerInterrupt+0x3c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a0a      	ldr	r2, [pc, #40]	; (80098ec <vPortSetupTimerInterrupt+0x40>)
 80098c2:	fba2 2303 	umull	r2, r3, r2, r3
 80098c6:	099b      	lsrs	r3, r3, #6
 80098c8:	4a09      	ldr	r2, [pc, #36]	; (80098f0 <vPortSetupTimerInterrupt+0x44>)
 80098ca:	3b01      	subs	r3, #1
 80098cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80098ce:	4b04      	ldr	r3, [pc, #16]	; (80098e0 <vPortSetupTimerInterrupt+0x34>)
 80098d0:	2207      	movs	r2, #7
 80098d2:	601a      	str	r2, [r3, #0]
}
 80098d4:	bf00      	nop
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	e000e010 	.word	0xe000e010
 80098e4:	e000e018 	.word	0xe000e018
 80098e8:	20000008 	.word	0x20000008
 80098ec:	10624dd3 	.word	0x10624dd3
 80098f0:	e000e014 	.word	0xe000e014

080098f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80098f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009904 <vPortEnableVFP+0x10>
 80098f8:	6801      	ldr	r1, [r0, #0]
 80098fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80098fe:	6001      	str	r1, [r0, #0]
 8009900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009902:	bf00      	nop
 8009904:	e000ed88 	.word	0xe000ed88

08009908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800990e:	f3ef 8305 	mrs	r3, IPSR
 8009912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2b0f      	cmp	r3, #15
 8009918:	d914      	bls.n	8009944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800991a:	4a17      	ldr	r2, [pc, #92]	; (8009978 <vPortValidateInterruptPriority+0x70>)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4413      	add	r3, r2
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009924:	4b15      	ldr	r3, [pc, #84]	; (800997c <vPortValidateInterruptPriority+0x74>)
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	7afa      	ldrb	r2, [r7, #11]
 800992a:	429a      	cmp	r2, r3
 800992c:	d20a      	bcs.n	8009944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800992e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	607b      	str	r3, [r7, #4]
}
 8009940:	bf00      	nop
 8009942:	e7fe      	b.n	8009942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009944:	4b0e      	ldr	r3, [pc, #56]	; (8009980 <vPortValidateInterruptPriority+0x78>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800994c:	4b0d      	ldr	r3, [pc, #52]	; (8009984 <vPortValidateInterruptPriority+0x7c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	429a      	cmp	r2, r3
 8009952:	d90a      	bls.n	800996a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	603b      	str	r3, [r7, #0]
}
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <vPortValidateInterruptPriority+0x60>
	}
 800996a:	bf00      	nop
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	e000e3f0 	.word	0xe000e3f0
 800997c:	20000a3c 	.word	0x20000a3c
 8009980:	e000ed0c 	.word	0xe000ed0c
 8009984:	20000a40 	.word	0x20000a40

08009988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08a      	sub	sp, #40	; 0x28
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009990:	2300      	movs	r3, #0
 8009992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009994:	f7fe fbda 	bl	800814c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009998:	4b5b      	ldr	r3, [pc, #364]	; (8009b08 <pvPortMalloc+0x180>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099a0:	f000 f920 	bl	8009be4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099a4:	4b59      	ldr	r3, [pc, #356]	; (8009b0c <pvPortMalloc+0x184>)
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4013      	ands	r3, r2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f040 8093 	bne.w	8009ad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d01d      	beq.n	80099f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80099b8:	2208      	movs	r2, #8
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4413      	add	r3, r2
 80099be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f003 0307 	and.w	r3, r3, #7
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d014      	beq.n	80099f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f023 0307 	bic.w	r3, r3, #7
 80099d0:	3308      	adds	r3, #8
 80099d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f003 0307 	and.w	r3, r3, #7
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00a      	beq.n	80099f4 <pvPortMalloc+0x6c>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	617b      	str	r3, [r7, #20]
}
 80099f0:	bf00      	nop
 80099f2:	e7fe      	b.n	80099f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d06e      	beq.n	8009ad8 <pvPortMalloc+0x150>
 80099fa:	4b45      	ldr	r3, [pc, #276]	; (8009b10 <pvPortMalloc+0x188>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d869      	bhi.n	8009ad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a04:	4b43      	ldr	r3, [pc, #268]	; (8009b14 <pvPortMalloc+0x18c>)
 8009a06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009a08:	4b42      	ldr	r3, [pc, #264]	; (8009b14 <pvPortMalloc+0x18c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a0e:	e004      	b.n	8009a1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d903      	bls.n	8009a2c <pvPortMalloc+0xa4>
 8009a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1f1      	bne.n	8009a10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a2c:	4b36      	ldr	r3, [pc, #216]	; (8009b08 <pvPortMalloc+0x180>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d050      	beq.n	8009ad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2208      	movs	r2, #8
 8009a3c:	4413      	add	r3, r2
 8009a3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	6a3b      	ldr	r3, [r7, #32]
 8009a46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	1ad2      	subs	r2, r2, r3
 8009a50:	2308      	movs	r3, #8
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d91f      	bls.n	8009a98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	f003 0307 	and.w	r3, r3, #7
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <pvPortMalloc+0xf8>
	__asm volatile
 8009a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	613b      	str	r3, [r7, #16]
}
 8009a7c:	bf00      	nop
 8009a7e:	e7fe      	b.n	8009a7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	685a      	ldr	r2, [r3, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	1ad2      	subs	r2, r2, r3
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a92:	69b8      	ldr	r0, [r7, #24]
 8009a94:	f000 f908 	bl	8009ca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a98:	4b1d      	ldr	r3, [pc, #116]	; (8009b10 <pvPortMalloc+0x188>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	4a1b      	ldr	r2, [pc, #108]	; (8009b10 <pvPortMalloc+0x188>)
 8009aa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009aa6:	4b1a      	ldr	r3, [pc, #104]	; (8009b10 <pvPortMalloc+0x188>)
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	4b1b      	ldr	r3, [pc, #108]	; (8009b18 <pvPortMalloc+0x190>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d203      	bcs.n	8009aba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ab2:	4b17      	ldr	r3, [pc, #92]	; (8009b10 <pvPortMalloc+0x188>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a18      	ldr	r2, [pc, #96]	; (8009b18 <pvPortMalloc+0x190>)
 8009ab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <pvPortMalloc+0x184>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ace:	4b13      	ldr	r3, [pc, #76]	; (8009b1c <pvPortMalloc+0x194>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	4a11      	ldr	r2, [pc, #68]	; (8009b1c <pvPortMalloc+0x194>)
 8009ad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ad8:	f7fe fb46 	bl	8008168 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	f003 0307 	and.w	r3, r3, #7
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00a      	beq.n	8009afc <pvPortMalloc+0x174>
	__asm volatile
 8009ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aea:	f383 8811 	msr	BASEPRI, r3
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	60fb      	str	r3, [r7, #12]
}
 8009af8:	bf00      	nop
 8009afa:	e7fe      	b.n	8009afa <pvPortMalloc+0x172>
	return pvReturn;
 8009afc:	69fb      	ldr	r3, [r7, #28]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3728      	adds	r7, #40	; 0x28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	20007f7c 	.word	0x20007f7c
 8009b0c:	20007f90 	.word	0x20007f90
 8009b10:	20007f80 	.word	0x20007f80
 8009b14:	20007f74 	.word	0x20007f74
 8009b18:	20007f84 	.word	0x20007f84
 8009b1c:	20007f88 	.word	0x20007f88

08009b20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b086      	sub	sp, #24
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d04d      	beq.n	8009bce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b32:	2308      	movs	r3, #8
 8009b34:	425b      	negs	r3, r3
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	4413      	add	r3, r2
 8009b3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	685a      	ldr	r2, [r3, #4]
 8009b44:	4b24      	ldr	r3, [pc, #144]	; (8009bd8 <vPortFree+0xb8>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4013      	ands	r3, r2
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10a      	bne.n	8009b64 <vPortFree+0x44>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	60fb      	str	r3, [r7, #12]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00a      	beq.n	8009b82 <vPortFree+0x62>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	60bb      	str	r3, [r7, #8]
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	4b14      	ldr	r3, [pc, #80]	; (8009bd8 <vPortFree+0xb8>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d01e      	beq.n	8009bce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d11a      	bne.n	8009bce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	4b0e      	ldr	r3, [pc, #56]	; (8009bd8 <vPortFree+0xb8>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	43db      	mvns	r3, r3
 8009ba2:	401a      	ands	r2, r3
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ba8:	f7fe fad0 	bl	800814c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <vPortFree+0xbc>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	4a09      	ldr	r2, [pc, #36]	; (8009bdc <vPortFree+0xbc>)
 8009bb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bba:	6938      	ldr	r0, [r7, #16]
 8009bbc:	f000 f874 	bl	8009ca8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009bc0:	4b07      	ldr	r3, [pc, #28]	; (8009be0 <vPortFree+0xc0>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	4a06      	ldr	r2, [pc, #24]	; (8009be0 <vPortFree+0xc0>)
 8009bc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009bca:	f7fe facd 	bl	8008168 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009bce:	bf00      	nop
 8009bd0:	3718      	adds	r7, #24
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20007f90 	.word	0x20007f90
 8009bdc:	20007f80 	.word	0x20007f80
 8009be0:	20007f8c 	.word	0x20007f8c

08009be4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bea:	f247 5330 	movw	r3, #30000	; 0x7530
 8009bee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009bf0:	4b27      	ldr	r3, [pc, #156]	; (8009c90 <prvHeapInit+0xac>)
 8009bf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f003 0307 	and.w	r3, r3, #7
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00c      	beq.n	8009c18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3307      	adds	r3, #7
 8009c02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f023 0307 	bic.w	r3, r3, #7
 8009c0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	4a1f      	ldr	r2, [pc, #124]	; (8009c90 <prvHeapInit+0xac>)
 8009c14:	4413      	add	r3, r2
 8009c16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c1c:	4a1d      	ldr	r2, [pc, #116]	; (8009c94 <prvHeapInit+0xb0>)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c22:	4b1c      	ldr	r3, [pc, #112]	; (8009c94 <prvHeapInit+0xb0>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c30:	2208      	movs	r2, #8
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	1a9b      	subs	r3, r3, r2
 8009c36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f023 0307 	bic.w	r3, r3, #7
 8009c3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4a15      	ldr	r2, [pc, #84]	; (8009c98 <prvHeapInit+0xb4>)
 8009c44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009c46:	4b14      	ldr	r3, [pc, #80]	; (8009c98 <prvHeapInit+0xb4>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c4e:	4b12      	ldr	r3, [pc, #72]	; (8009c98 <prvHeapInit+0xb4>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2200      	movs	r2, #0
 8009c54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	68fa      	ldr	r2, [r7, #12]
 8009c5e:	1ad2      	subs	r2, r2, r3
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c64:	4b0c      	ldr	r3, [pc, #48]	; (8009c98 <prvHeapInit+0xb4>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	4a0a      	ldr	r2, [pc, #40]	; (8009c9c <prvHeapInit+0xb8>)
 8009c72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	4a09      	ldr	r2, [pc, #36]	; (8009ca0 <prvHeapInit+0xbc>)
 8009c7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c7c:	4b09      	ldr	r3, [pc, #36]	; (8009ca4 <prvHeapInit+0xc0>)
 8009c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c82:	601a      	str	r2, [r3, #0]
}
 8009c84:	bf00      	nop
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	20000a44 	.word	0x20000a44
 8009c94:	20007f74 	.word	0x20007f74
 8009c98:	20007f7c 	.word	0x20007f7c
 8009c9c:	20007f84 	.word	0x20007f84
 8009ca0:	20007f80 	.word	0x20007f80
 8009ca4:	20007f90 	.word	0x20007f90

08009ca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cb0:	4b28      	ldr	r3, [pc, #160]	; (8009d54 <prvInsertBlockIntoFreeList+0xac>)
 8009cb2:	60fb      	str	r3, [r7, #12]
 8009cb4:	e002      	b.n	8009cbc <prvInsertBlockIntoFreeList+0x14>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d8f7      	bhi.n	8009cb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d108      	bne.n	8009cea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	441a      	add	r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	441a      	add	r2, r3
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d118      	bne.n	8009d30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	4b15      	ldr	r3, [pc, #84]	; (8009d58 <prvInsertBlockIntoFreeList+0xb0>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d00d      	beq.n	8009d26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685a      	ldr	r2, [r3, #4]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	441a      	add	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	601a      	str	r2, [r3, #0]
 8009d24:	e008      	b.n	8009d38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d26:	4b0c      	ldr	r3, [pc, #48]	; (8009d58 <prvInsertBlockIntoFreeList+0xb0>)
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	e003      	b.n	8009d38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d002      	beq.n	8009d46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d46:	bf00      	nop
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	20007f74 	.word	0x20007f74
 8009d58:	20007f7c 	.word	0x20007f7c

08009d5c <ThreadM95Task>:




void ThreadM95Task(void const * argument)
{
 8009d5c:	b590      	push	{r4, r7, lr}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af02      	add	r7, sp, #8
 8009d62:	6078      	str	r0, [r7, #4]
	osThreadSuspend(M95TaskHandle);
 8009d64:	4b80      	ldr	r3, [pc, #512]	; (8009f68 <ThreadM95Task+0x20c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fc fd23 	bl	80067b4 <osThreadSuspend>
	osSemaphoreWait(TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 8009d6e:	4b7f      	ldr	r3, [pc, #508]	; (8009f6c <ThreadM95Task+0x210>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f04f 31ff 	mov.w	r1, #4294967295
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7fc fbbc 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(Ring_Center_TimerHandle, 90000); // запускаем таймер для перезагрузки по его окончанию
 8009d7c:	4b7c      	ldr	r3, [pc, #496]	; (8009f70 <ThreadM95Task+0x214>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	497c      	ldr	r1, [pc, #496]	; (8009f74 <ThreadM95Task+0x218>)
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fc fa5a 	bl	800623c <osTimerStart>


	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8009d88:	4b7b      	ldr	r3, [pc, #492]	; (8009f78 <ThreadM95Task+0x21c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fc faeb 	bl	800636c <osMutexWait>

	fm25v02_write(2*VERSION_REG, 1); // записываем версию прошивки для бутлоадера старший байт
 8009d96:	2101      	movs	r1, #1
 8009d98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009d9c:	f001 fbb8 	bl	800b510 <fm25v02_write>
	fm25v02_write(2*VERSION_REG+1, 1); // записываем версию прошивки для бутлоадера младший байт
 8009da0:	2101      	movs	r1, #1
 8009da2:	f242 0001 	movw	r0, #8193	; 0x2001
 8009da6:	f001 fbb3 	bl	800b510 <fm25v02_write>

	fm25v02_write(2*BOOTLOADER_VERSION_REG, 0); // записываем версию прошивки бутлоадера старший байт
 8009daa:	2100      	movs	r1, #0
 8009dac:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009db0:	f001 fbae 	bl	800b510 <fm25v02_write>
	fm25v02_write(2*BOOTLOADER_VERSION_REG+1, 255); // записываем версию прошивки бутлоадера младший байт
 8009db4:	21ff      	movs	r1, #255	; 0xff
 8009db6:	f240 2001 	movw	r0, #513	; 0x201
 8009dba:	f001 fba9 	bl	800b510 <fm25v02_write>

	osMutexRelease(Fm25v02MutexHandle);
 8009dbe:	4b6e      	ldr	r3, [pc, #440]	; (8009f78 <ThreadM95Task+0x21c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fc fb20 	bl	8006408 <osMutexRelease>


	for(;;)
	{

		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8009dc8:	4b6b      	ldr	r3, [pc, #428]	; (8009f78 <ThreadM95Task+0x21c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7fc facb 	bl	800636c <osMutexWait>

		fm25v02_read(2*IP_1_REG+1, &ip1); // читаем значение IP адреса сервера из памяти
 8009dd6:	4969      	ldr	r1, [pc, #420]	; (8009f7c <ThreadM95Task+0x220>)
 8009dd8:	f242 105f 	movw	r0, #8543	; 0x215f
 8009ddc:	f001 fb5e 	bl	800b49c <fm25v02_read>
		fm25v02_read(2*IP_2_REG+1, &ip2);
 8009de0:	4967      	ldr	r1, [pc, #412]	; (8009f80 <ThreadM95Task+0x224>)
 8009de2:	f242 1061 	movw	r0, #8545	; 0x2161
 8009de6:	f001 fb59 	bl	800b49c <fm25v02_read>
		fm25v02_read(2*IP_3_REG+1, &ip3);
 8009dea:	4966      	ldr	r1, [pc, #408]	; (8009f84 <ThreadM95Task+0x228>)
 8009dec:	f242 1063 	movw	r0, #8547	; 0x2163
 8009df0:	f001 fb54 	bl	800b49c <fm25v02_read>
		fm25v02_read(2*IP_4_REG+1, &ip4);
 8009df4:	4964      	ldr	r1, [pc, #400]	; (8009f88 <ThreadM95Task+0x22c>)
 8009df6:	f242 1065 	movw	r0, #8549	; 0x2165
 8009dfa:	f001 fb4f 	bl	800b49c <fm25v02_read>
		fm25v02_read(2*PORT_HIGH_REG+1, &port_high_reg); // читаем значение старшего байта порта сервера
 8009dfe:	4963      	ldr	r1, [pc, #396]	; (8009f8c <ThreadM95Task+0x230>)
 8009e00:	f242 1067 	movw	r0, #8551	; 0x2167
 8009e04:	f001 fb4a 	bl	800b49c <fm25v02_read>
		fm25v02_read(2*PORT_LOW_REG+1, &port_low_reg); // читаем занчение младшего байта порта сервера
 8009e08:	4961      	ldr	r1, [pc, #388]	; (8009f90 <ThreadM95Task+0x234>)
 8009e0a:	f242 1069 	movw	r0, #8553	; 0x2169
 8009e0e:	f001 fb45 	bl	800b49c <fm25v02_read>

		osMutexRelease(Fm25v02MutexHandle);
 8009e12:	4b59      	ldr	r3, [pc, #356]	; (8009f78 <ThreadM95Task+0x21c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7fc faf6 	bl	8006408 <osMutexRelease>

		port = (((uint16_t)port_high_reg)<<8)|((uint16_t)port_low_reg); // вычисляем общее значение регистра порта
 8009e1c:	4b5b      	ldr	r3, [pc, #364]	; (8009f8c <ThreadM95Task+0x230>)
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	021b      	lsls	r3, r3, #8
 8009e24:	b21a      	sxth	r2, r3
 8009e26:	4b5a      	ldr	r3, [pc, #360]	; (8009f90 <ThreadM95Task+0x234>)
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	b21b      	sxth	r3, r3
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	b21b      	sxth	r3, r3
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	4b57      	ldr	r3, [pc, #348]	; (8009f94 <ThreadM95Task+0x238>)
 8009e36:	801a      	strh	r2, [r3, #0]

		if ( (ip1==0)&&(ip2==0)&&(ip3==0)&&(ip4==0)&&(port==0) ) // Если значения ip адреса сервера и его номера порта при инициализации нулевые, то выставляем их значения по умолчанию
 8009e38:	4b50      	ldr	r3, [pc, #320]	; (8009f7c <ThreadM95Task+0x220>)
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d123      	bne.n	8009e8a <ThreadM95Task+0x12e>
 8009e42:	4b4f      	ldr	r3, [pc, #316]	; (8009f80 <ThreadM95Task+0x224>)
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d11e      	bne.n	8009e8a <ThreadM95Task+0x12e>
 8009e4c:	4b4d      	ldr	r3, [pc, #308]	; (8009f84 <ThreadM95Task+0x228>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d119      	bne.n	8009e8a <ThreadM95Task+0x12e>
 8009e56:	4b4c      	ldr	r3, [pc, #304]	; (8009f88 <ThreadM95Task+0x22c>)
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d114      	bne.n	8009e8a <ThreadM95Task+0x12e>
 8009e60:	4b4c      	ldr	r3, [pc, #304]	; (8009f94 <ThreadM95Task+0x238>)
 8009e62:	881b      	ldrh	r3, [r3, #0]
 8009e64:	b29b      	uxth	r3, r3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10f      	bne.n	8009e8a <ThreadM95Task+0x12e>
		{
			// сервер сигнализации
			ip1 = 195;    // значение по умолчанию
 8009e6a:	4b44      	ldr	r3, [pc, #272]	; (8009f7c <ThreadM95Task+0x220>)
 8009e6c:	22c3      	movs	r2, #195	; 0xc3
 8009e6e:	701a      	strb	r2, [r3, #0]
			ip2 = 208;    // значение по умолчанию
 8009e70:	4b43      	ldr	r3, [pc, #268]	; (8009f80 <ThreadM95Task+0x224>)
 8009e72:	22d0      	movs	r2, #208	; 0xd0
 8009e74:	701a      	strb	r2, [r3, #0]
			ip3 = 163;    // значение по умолчанию
 8009e76:	4b43      	ldr	r3, [pc, #268]	; (8009f84 <ThreadM95Task+0x228>)
 8009e78:	22a3      	movs	r2, #163	; 0xa3
 8009e7a:	701a      	strb	r2, [r3, #0]
			ip4 = 67;     // значение по умолчанию
 8009e7c:	4b42      	ldr	r3, [pc, #264]	; (8009f88 <ThreadM95Task+0x22c>)
 8009e7e:	2243      	movs	r2, #67	; 0x43
 8009e80:	701a      	strb	r2, [r3, #0]
			port = 35050; // значение по умолчанию
 8009e82:	4b44      	ldr	r3, [pc, #272]	; (8009f94 <ThreadM95Task+0x238>)
 8009e84:	f648 02ea 	movw	r2, #35050	; 0x88ea
 8009e88:	801a      	strh	r2, [r3, #0]
		{
			m95_power_on();
		}
		*/

		osMutexWait(UartMutexHandle, osWaitForever);
 8009e8a:	4b43      	ldr	r3, [pc, #268]	; (8009f98 <ThreadM95Task+0x23c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f04f 31ff 	mov.w	r1, #4294967295
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7fc fa6a 	bl	800636c <osMutexWait>

		if(AT()==AT_ERROR) // два раза проверяем, есть ли ответ на команду АТ, если нет, включаем питание
 8009e98:	f001 fcfc 	bl	800b894 <AT>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d106      	bne.n	8009eb0 <ThreadM95Task+0x154>
		{
			if(AT()==AT_ERROR)
 8009ea2:	f001 fcf7 	bl	800b894 <AT>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <ThreadM95Task+0x154>
			{
				m95_power_on();
 8009eac:	f001 fc42 	bl	800b734 <m95_power_on>
			}
		}

		if( ATE0() == AT_OK )
 8009eb0:	f001 fc9a 	bl	800b7e8 <ATE0>
		{

		}

		osMutexRelease(UartMutexHandle);
 8009eb4:	4b38      	ldr	r3, [pc, #224]	; (8009f98 <ThreadM95Task+0x23c>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fc faa5 	bl	8006408 <osMutexRelease>

		osMutexWait(UartMutexHandle, osWaitForever);
 8009ebe:	4b36      	ldr	r3, [pc, #216]	; (8009f98 <ThreadM95Task+0x23c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fc fa50 	bl	800636c <osMutexWait>

		switch( AT_CIPSTATUS() )
 8009ecc:	f001 fdb6 	bl	800ba3c <AT_CIPSTATUS>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	3b02      	subs	r3, #2
 8009ed4:	2b0b      	cmp	r3, #11
 8009ed6:	f200 811e 	bhi.w	800a116 <ThreadM95Task+0x3ba>
 8009eda:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <ThreadM95Task+0x184>)
 8009edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee0:	08009f11 	.word	0x08009f11
 8009ee4:	08009f21 	.word	0x08009f21
 8009ee8:	0800a117 	.word	0x0800a117
 8009eec:	0800a117 	.word	0x0800a117
 8009ef0:	08009f2b 	.word	0x08009f2b
 8009ef4:	08009f35 	.word	0x08009f35
 8009ef8:	0800a10f 	.word	0x0800a10f
 8009efc:	0800a117 	.word	0x0800a117
 8009f00:	0800a117 	.word	0x0800a117
 8009f04:	08009fa9 	.word	0x08009fa9
 8009f08:	0800a105 	.word	0x0800a105
 8009f0c:	0800a0d3 	.word	0x0800a0d3
		{

			case IP_INITIAL:

				LED1_OFF();
 8009f10:	f001 fbc4 	bl	800b69c <LED1_OFF>

				AT_CSTT("internet.mts.ru","mts","mts");
 8009f14:	4a21      	ldr	r2, [pc, #132]	; (8009f9c <ThreadM95Task+0x240>)
 8009f16:	4921      	ldr	r1, [pc, #132]	; (8009f9c <ThreadM95Task+0x240>)
 8009f18:	4821      	ldr	r0, [pc, #132]	; (8009fa0 <ThreadM95Task+0x244>)
 8009f1a:	f001 fecb 	bl	800bcb4 <AT_CSTT>

			break;
 8009f1e:	e0fa      	b.n	800a116 <ThreadM95Task+0x3ba>

			case IP_START:

				LED1_OFF();
 8009f20:	f001 fbbc 	bl	800b69c <LED1_OFF>

				AT_CIICR();
 8009f24:	f001 ff42 	bl	800bdac <AT_CIICR>

			break;
 8009f28:	e0f5      	b.n	800a116 <ThreadM95Task+0x3ba>

			case IP_GPRSACT:

				LED1_OFF();
 8009f2a:	f001 fbb7 	bl	800b69c <LED1_OFF>

				AT_CIFSR();
 8009f2e:	f001 ffa7 	bl	800be80 <AT_CIFSR>

			break;
 8009f32:	e0f0      	b.n	800a116 <ThreadM95Task+0x3ba>

			case IP_STATUS:

				LED1_OFF();
 8009f34:	f001 fbb2 	bl	800b69c <LED1_OFF>

				AT_CIPSTART("TCP", ip1, ip2, ip3, ip4, port);
 8009f38:	4b10      	ldr	r3, [pc, #64]	; (8009f7c <ThreadM95Task+0x220>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	b2d9      	uxtb	r1, r3
 8009f3e:	4b10      	ldr	r3, [pc, #64]	; (8009f80 <ThreadM95Task+0x224>)
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	b2d8      	uxtb	r0, r3
 8009f44:	4b0f      	ldr	r3, [pc, #60]	; (8009f84 <ThreadM95Task+0x228>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	b2dc      	uxtb	r4, r3
 8009f4a:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <ThreadM95Task+0x22c>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	4a10      	ldr	r2, [pc, #64]	; (8009f94 <ThreadM95Task+0x238>)
 8009f52:	8812      	ldrh	r2, [r2, #0]
 8009f54:	b292      	uxth	r2, r2
 8009f56:	9201      	str	r2, [sp, #4]
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	4623      	mov	r3, r4
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	4811      	ldr	r0, [pc, #68]	; (8009fa4 <ThreadM95Task+0x248>)
 8009f60:	f001 fff8 	bl	800bf54 <AT_CIPSTART>

			break;
 8009f64:	e0d7      	b.n	800a116 <ThreadM95Task+0x3ba>
 8009f66:	bf00      	nop
 8009f68:	200095ac 	.word	0x200095ac
 8009f6c:	200097e8 	.word	0x200097e8
 8009f70:	200094d8 	.word	0x200094d8
 8009f74:	00015f90 	.word	0x00015f90
 8009f78:	200095d8 	.word	0x200095d8
 8009f7c:	20007f94 	.word	0x20007f94
 8009f80:	20007f95 	.word	0x20007f95
 8009f84:	20007f96 	.word	0x20007f96
 8009f88:	20007f97 	.word	0x20007f97
 8009f8c:	20007f98 	.word	0x20007f98
 8009f90:	20007f99 	.word	0x20007f99
 8009f94:	20007f9a 	.word	0x20007f9a
 8009f98:	200094d4 	.word	0x200094d4
 8009f9c:	0800f2e0 	.word	0x0800f2e0
 8009fa0:	0800f2e4 	.word	0x0800f2e4
 8009fa4:	0800f2f4 	.word	0x0800f2f4

			case CONNECT_OK:

				LED1_ON();
 8009fa8:	f001 fb84 	bl	800b6b4 <LED1_ON>

				if( AT_CSQ(&level) == AT_OK )
 8009fac:	485f      	ldr	r0, [pc, #380]	; (800a12c <ThreadM95Task+0x3d0>)
 8009fae:	f001 fcc7 	bl	800b940 <AT_CSQ>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d117      	bne.n	8009fe8 <ThreadM95Task+0x28c>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8009fb8:	4b5d      	ldr	r3, [pc, #372]	; (800a130 <ThreadM95Task+0x3d4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fc f9d3 	bl	800636c <osMutexWait>
					fm25v02_write(2*SIGNAL_LEVEL_REG, 0x00);
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	f242 00a6 	movw	r0, #8358	; 0x20a6
 8009fcc:	f001 faa0 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*SIGNAL_LEVEL_REG+1, level);
 8009fd0:	4b56      	ldr	r3, [pc, #344]	; (800a12c <ThreadM95Task+0x3d0>)
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	f242 00a7 	movw	r0, #8359	; 0x20a7
 8009fda:	f001 fa99 	bl	800b510 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 8009fde:	4b54      	ldr	r3, [pc, #336]	; (800a130 <ThreadM95Task+0x3d4>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fc fa10 	bl	8006408 <osMutexRelease>
				}

				if(	AT_CCID(&id2[0], &id1[0]) == AT_OK ) // читаем CCID сим-карты
 8009fe8:	4952      	ldr	r1, [pc, #328]	; (800a134 <ThreadM95Task+0x3d8>)
 8009fea:	4853      	ldr	r0, [pc, #332]	; (800a138 <ThreadM95Task+0x3dc>)
 8009fec:	f002 f97e 	bl	800c2ec <AT_CCID>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f040 808e 	bne.w	800a114 <ThreadM95Task+0x3b8>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8009ff8:	4b4d      	ldr	r3, [pc, #308]	; (800a130 <ThreadM95Task+0x3d4>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f04f 31ff 	mov.w	r1, #4294967295
 800a000:	4618      	mov	r0, r3
 800a002:	f7fc f9b3 	bl	800636c <osMutexWait>

					fm25v02_write(2*ICCID_NUMBER_REG1, 0x00); // записываем в регистры CCID сим-карты
 800a006:	2100      	movs	r1, #0
 800a008:	f242 00b0 	movw	r0, #8368	; 0x20b0
 800a00c:	f001 fa80 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG1+1, id2[0]);
 800a010:	4b49      	ldr	r3, [pc, #292]	; (800a138 <ThreadM95Task+0x3dc>)
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	4619      	mov	r1, r3
 800a016:	f242 00b1 	movw	r0, #8369	; 0x20b1
 800a01a:	f001 fa79 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2, 0x00);
 800a01e:	2100      	movs	r1, #0
 800a020:	f242 00b2 	movw	r0, #8370	; 0x20b2
 800a024:	f001 fa74 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2+1, id2[1]);
 800a028:	4b43      	ldr	r3, [pc, #268]	; (800a138 <ThreadM95Task+0x3dc>)
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	4619      	mov	r1, r3
 800a02e:	f242 00b3 	movw	r0, #8371	; 0x20b3
 800a032:	f001 fa6d 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3, 0x00);
 800a036:	2100      	movs	r1, #0
 800a038:	f242 00b4 	movw	r0, #8372	; 0x20b4
 800a03c:	f001 fa68 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3+1, id2[2]);
 800a040:	4b3d      	ldr	r3, [pc, #244]	; (800a138 <ThreadM95Task+0x3dc>)
 800a042:	789b      	ldrb	r3, [r3, #2]
 800a044:	4619      	mov	r1, r3
 800a046:	f242 00b5 	movw	r0, #8373	; 0x20b5
 800a04a:	f001 fa61 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4, 0x00);
 800a04e:	2100      	movs	r1, #0
 800a050:	f242 00b6 	movw	r0, #8374	; 0x20b6
 800a054:	f001 fa5c 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4+1, id2[3]);
 800a058:	4b37      	ldr	r3, [pc, #220]	; (800a138 <ThreadM95Task+0x3dc>)
 800a05a:	78db      	ldrb	r3, [r3, #3]
 800a05c:	4619      	mov	r1, r3
 800a05e:	f242 00b7 	movw	r0, #8375	; 0x20b7
 800a062:	f001 fa55 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5, 0x00);
 800a066:	2100      	movs	r1, #0
 800a068:	f242 00b8 	movw	r0, #8376	; 0x20b8
 800a06c:	f001 fa50 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5+1, id2[4]);
 800a070:	4b31      	ldr	r3, [pc, #196]	; (800a138 <ThreadM95Task+0x3dc>)
 800a072:	791b      	ldrb	r3, [r3, #4]
 800a074:	4619      	mov	r1, r3
 800a076:	f242 00b9 	movw	r0, #8377	; 0x20b9
 800a07a:	f001 fa49 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6, 0x00);
 800a07e:	2100      	movs	r1, #0
 800a080:	f242 00ba 	movw	r0, #8378	; 0x20ba
 800a084:	f001 fa44 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6+1, id2[5]);
 800a088:	4b2b      	ldr	r3, [pc, #172]	; (800a138 <ThreadM95Task+0x3dc>)
 800a08a:	795b      	ldrb	r3, [r3, #5]
 800a08c:	4619      	mov	r1, r3
 800a08e:	f242 00bb 	movw	r0, #8379	; 0x20bb
 800a092:	f001 fa3d 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7, 0x00);
 800a096:	2100      	movs	r1, #0
 800a098:	f242 00bc 	movw	r0, #8380	; 0x20bc
 800a09c:	f001 fa38 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7+1, id2[6]);
 800a0a0:	4b25      	ldr	r3, [pc, #148]	; (800a138 <ThreadM95Task+0x3dc>)
 800a0a2:	799b      	ldrb	r3, [r3, #6]
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	f242 00bd 	movw	r0, #8381	; 0x20bd
 800a0aa:	f001 fa31 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8, 0x00);
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	f242 00be 	movw	r0, #8382	; 0x20be
 800a0b4:	f001 fa2c 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8+1, id2[7]);
 800a0b8:	4b1f      	ldr	r3, [pc, #124]	; (800a138 <ThreadM95Task+0x3dc>)
 800a0ba:	79db      	ldrb	r3, [r3, #7]
 800a0bc:	4619      	mov	r1, r3
 800a0be:	f242 00bf 	movw	r0, #8383	; 0x20bf
 800a0c2:	f001 fa25 	bl	800b510 <fm25v02_write>

					osMutexRelease(Fm25v02MutexHandle);
 800a0c6:	4b1a      	ldr	r3, [pc, #104]	; (800a130 <ThreadM95Task+0x3d4>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fc f99c 	bl	8006408 <osMutexRelease>
				}

			break;
 800a0d0:	e020      	b.n	800a114 <ThreadM95Task+0x3b8>

			case TCP_CLOSED:

				LED1_OFF();
 800a0d2:	f001 fae3 	bl	800b69c <LED1_OFF>

				AT_CIPSTART("TCP", ip1, ip2, ip3, ip4, port);
 800a0d6:	4b19      	ldr	r3, [pc, #100]	; (800a13c <ThreadM95Task+0x3e0>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	b2d9      	uxtb	r1, r3
 800a0dc:	4b18      	ldr	r3, [pc, #96]	; (800a140 <ThreadM95Task+0x3e4>)
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	b2d8      	uxtb	r0, r3
 800a0e2:	4b18      	ldr	r3, [pc, #96]	; (800a144 <ThreadM95Task+0x3e8>)
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	b2dc      	uxtb	r4, r3
 800a0e8:	4b17      	ldr	r3, [pc, #92]	; (800a148 <ThreadM95Task+0x3ec>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	4a17      	ldr	r2, [pc, #92]	; (800a14c <ThreadM95Task+0x3f0>)
 800a0f0:	8812      	ldrh	r2, [r2, #0]
 800a0f2:	b292      	uxth	r2, r2
 800a0f4:	9201      	str	r2, [sp, #4]
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	4623      	mov	r3, r4
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	4814      	ldr	r0, [pc, #80]	; (800a150 <ThreadM95Task+0x3f4>)
 800a0fe:	f001 ff29 	bl	800bf54 <AT_CIPSTART>

			break;
 800a102:	e008      	b.n	800a116 <ThreadM95Task+0x3ba>

			case PDP_DEACT:

				LED1_OFF();
 800a104:	f001 faca 	bl	800b69c <LED1_OFF>

				AT_CIPSHUT();
 800a108:	f002 f886 	bl	800c218 <AT_CIPSHUT>

			break;
 800a10c:	e003      	b.n	800a116 <ThreadM95Task+0x3ba>

			case TCP_CONNECTING:

				LED1_OFF();
 800a10e:	f001 fac5 	bl	800b69c <LED1_OFF>

			break;
 800a112:	e000      	b.n	800a116 <ThreadM95Task+0x3ba>
			break;
 800a114:	bf00      	nop

		}

		osMutexRelease(UartMutexHandle);
 800a116:	4b0f      	ldr	r3, [pc, #60]	; (800a154 <ThreadM95Task+0x3f8>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fc f974 	bl	8006408 <osMutexRelease>


		osDelay(1000);
 800a120:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a124:	f7fc f841 	bl	80061aa <osDelay>
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a128:	e64e      	b.n	8009dc8 <ThreadM95Task+0x6c>
 800a12a:	bf00      	nop
 800a12c:	200098a8 	.word	0x200098a8
 800a130:	200095d8 	.word	0x200095d8
 800a134:	200098b8 	.word	0x200098b8
 800a138:	200098ac 	.word	0x200098ac
 800a13c:	20007f94 	.word	0x20007f94
 800a140:	20007f95 	.word	0x20007f95
 800a144:	20007f96 	.word	0x20007f96
 800a148:	20007f97 	.word	0x20007f97
 800a14c:	20007f9a 	.word	0x20007f9a
 800a150:	0800f2f4 	.word	0x0800f2f4
 800a154:	200094d4 	.word	0x200094d4

0800a158 <__NVIC_SystemReset>:
{
 800a158:	b480      	push	{r7}
 800a15a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a15c:	f3bf 8f4f 	dsb	sy
}
 800a160:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a162:	4b06      	ldr	r3, [pc, #24]	; (800a17c <__NVIC_SystemReset+0x24>)
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a16a:	4904      	ldr	r1, [pc, #16]	; (800a17c <__NVIC_SystemReset+0x24>)
 800a16c:	4b04      	ldr	r3, [pc, #16]	; (800a180 <__NVIC_SystemReset+0x28>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a172:	f3bf 8f4f 	dsb	sy
}
 800a176:	bf00      	nop
    __NOP();
 800a178:	bf00      	nop
 800a17a:	e7fd      	b.n	800a178 <__NVIC_SystemReset+0x20>
 800a17c:	e000ed00 	.word	0xe000ed00
 800a180:	05fa0004 	.word	0x05fa0004

0800a184 <ThreadMainTask>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
}


void ThreadMainTask(void const * argument)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
	uint8_t temp_read_l;

	uint8_t temp_reg_h1;
	uint8_t temp_reg_l1;

	osThreadSuspend(MainTaskHandle); // ждем пока не будут вычитаны регистры и не получен статус фаз А1,А2,В1,В2,С1,С2
 800a18c:	4bbf      	ldr	r3, [pc, #764]	; (800a48c <ThreadMainTask+0x308>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4618      	mov	r0, r3
 800a192:	f7fc fb0f 	bl	80067b4 <osThreadSuspend>
	//bootloader_registers.ready_download_reg = 0x0001;
	//osMutexRelease(Fm25v02MutexHandle);

	//----test--------------------------------

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a196:	4bbe      	ldr	r3, [pc, #760]	; (800a490 <ThreadMainTask+0x30c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f04f 31ff 	mov.w	r1, #4294967295
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fc f8e4 	bl	800636c <osMutexWait>

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h1);
 800a1a4:	f107 030c 	add.w	r3, r7, #12
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	f44f 7010 	mov.w	r0, #576	; 0x240
 800a1ae:	f001 f975 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l1);
 800a1b2:	f107 030b 	add.w	r3, r7, #11
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	f240 2041 	movw	r0, #577	; 0x241
 800a1bc:	f001 f96e 	bl	800b49c <fm25v02_read>
	bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a1c0:	7b3b      	ldrb	r3, [r7, #12]
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	b21a      	sxth	r2, r3
 800a1c6:	7afb      	ldrb	r3, [r7, #11]
 800a1c8:	b21b      	sxth	r3, r3
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	b21b      	sxth	r3, r3
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	4bb0      	ldr	r3, [pc, #704]	; (800a494 <ThreadMainTask+0x310>)
 800a1d2:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h1);
 800a1d4:	f107 030c 	add.w	r3, r7, #12
 800a1d8:	4619      	mov	r1, r3
 800a1da:	f240 2042 	movw	r0, #578	; 0x242
 800a1de:	f001 f95d 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l1);
 800a1e2:	f107 030b 	add.w	r3, r7, #11
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	f240 2043 	movw	r0, #579	; 0x243
 800a1ec:	f001 f956 	bl	800b49c <fm25v02_read>
	bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a1f0:	7b3b      	ldrb	r3, [r7, #12]
 800a1f2:	021b      	lsls	r3, r3, #8
 800a1f4:	b21a      	sxth	r2, r3
 800a1f6:	7afb      	ldrb	r3, [r7, #11]
 800a1f8:	b21b      	sxth	r3, r3
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	b21b      	sxth	r3, r3
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	4ba4      	ldr	r3, [pc, #656]	; (800a494 <ThreadMainTask+0x310>)
 800a202:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h1);
 800a204:	f107 030c 	add.w	r3, r7, #12
 800a208:	4619      	mov	r1, r3
 800a20a:	f44f 7011 	mov.w	r0, #580	; 0x244
 800a20e:	f001 f945 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l1);
 800a212:	f107 030b 	add.w	r3, r7, #11
 800a216:	4619      	mov	r1, r3
 800a218:	f240 2045 	movw	r0, #581	; 0x245
 800a21c:	f001 f93e 	bl	800b49c <fm25v02_read>
	bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h1)<<8)|temp_reg_l1;
 800a220:	7b3b      	ldrb	r3, [r7, #12]
 800a222:	021b      	lsls	r3, r3, #8
 800a224:	b21a      	sxth	r2, r3
 800a226:	7afb      	ldrb	r3, [r7, #11]
 800a228:	b21b      	sxth	r3, r3
 800a22a:	4313      	orrs	r3, r2
 800a22c:	b21b      	sxth	r3, r3
 800a22e:	b29a      	uxth	r2, r3
 800a230:	4b98      	ldr	r3, [pc, #608]	; (800a494 <ThreadMainTask+0x310>)
 800a232:	869a      	strh	r2, [r3, #52]	; 0x34

	osMutexRelease(Fm25v02MutexHandle);
 800a234:	4b96      	ldr	r3, [pc, #600]	; (800a490 <ThreadMainTask+0x30c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fc f8e5 	bl	8006408 <osMutexRelease>

	//----------------------------------------

	if(bootloader_registers.clear_page_on_reg != 0x0001)
 800a23e:	4b95      	ldr	r3, [pc, #596]	; (800a494 <ThreadMainTask+0x310>)
 800a240:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a242:	2b01      	cmp	r3, #1
 800a244:	d018      	beq.n	800a278 <ThreadMainTask+0xf4>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр очистки страниц, чтобы при запуске не произошла очистка
 800a246:	4b92      	ldr	r3, [pc, #584]	; (800a490 <ThreadMainTask+0x30c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f04f 31ff 	mov.w	r1, #4294967295
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fc f88c 	bl	800636c <osMutexWait>
		fm25v02_write(2*CLEAR_PAGE_ON_REG, 0x00);
 800a254:	2100      	movs	r1, #0
 800a256:	f44f 7010 	mov.w	r0, #576	; 0x240
 800a25a:	f001 f959 	bl	800b510 <fm25v02_write>
		fm25v02_write(2*CLEAR_PAGE_ON_REG+1, 0x00);
 800a25e:	2100      	movs	r1, #0
 800a260:	f240 2041 	movw	r0, #577	; 0x241
 800a264:	f001 f954 	bl	800b510 <fm25v02_write>
		bootloader_registers.clear_page_on_reg = 0x0000;
 800a268:	4b8a      	ldr	r3, [pc, #552]	; (800a494 <ThreadMainTask+0x310>)
 800a26a:	2200      	movs	r2, #0
 800a26c:	861a      	strh	r2, [r3, #48]	; 0x30
		osMutexRelease(Fm25v02MutexHandle);
 800a26e:	4b88      	ldr	r3, [pc, #544]	; (800a490 <ThreadMainTask+0x30c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4618      	mov	r0, r3
 800a274:	f7fc f8c8 	bl	8006408 <osMutexRelease>
	}
	if(bootloader_registers.write_array_reg != 0x0001)
 800a278:	4b86      	ldr	r3, [pc, #536]	; (800a494 <ThreadMainTask+0x310>)
 800a27a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d018      	beq.n	800a2b2 <ThreadMainTask+0x12e>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр записи в память контроллера, чтобы при запуске не произошла запись
 800a280:	4b83      	ldr	r3, [pc, #524]	; (800a490 <ThreadMainTask+0x30c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f04f 31ff 	mov.w	r1, #4294967295
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fc f86f 	bl	800636c <osMutexWait>
		fm25v02_write(2*WRITE_ARRAY_REG, 0x00);
 800a28e:	2100      	movs	r1, #0
 800a290:	f240 2042 	movw	r0, #578	; 0x242
 800a294:	f001 f93c 	bl	800b510 <fm25v02_write>
		fm25v02_write(2*WRITE_ARRAY_REG+1, 0x00);
 800a298:	2100      	movs	r1, #0
 800a29a:	f240 2043 	movw	r0, #579	; 0x243
 800a29e:	f001 f937 	bl	800b510 <fm25v02_write>
		bootloader_registers.write_array_reg = 0x0000;
 800a2a2:	4b7c      	ldr	r3, [pc, #496]	; (800a494 <ThreadMainTask+0x310>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	865a      	strh	r2, [r3, #50]	; 0x32
		osMutexRelease(Fm25v02MutexHandle);
 800a2a8:	4b79      	ldr	r3, [pc, #484]	; (800a490 <ThreadMainTask+0x30c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fc f8ab 	bl	8006408 <osMutexRelease>
	}
	if(bootloader_registers.read_array_reg != 0x0001)
 800a2b2:	4b78      	ldr	r3, [pc, #480]	; (800a494 <ThreadMainTask+0x310>)
 800a2b4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d018      	beq.n	800a2ec <ThreadMainTask+0x168>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);// обнуляем регистр чтения страниц, чтобы при запуске не произошло чтение
 800a2ba:	4b75      	ldr	r3, [pc, #468]	; (800a490 <ThreadMainTask+0x30c>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f04f 31ff 	mov.w	r1, #4294967295
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fc f852 	bl	800636c <osMutexWait>
		fm25v02_write(2*READ_ARRAY_REG, 0x00);
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	f44f 7011 	mov.w	r0, #580	; 0x244
 800a2ce:	f001 f91f 	bl	800b510 <fm25v02_write>
		fm25v02_write(2*READ_ARRAY_REG+1, 0x00);
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	f240 2045 	movw	r0, #581	; 0x245
 800a2d8:	f001 f91a 	bl	800b510 <fm25v02_write>
		bootloader_registers.read_array_reg = 0x0000;
 800a2dc:	4b6d      	ldr	r3, [pc, #436]	; (800a494 <ThreadMainTask+0x310>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	869a      	strh	r2, [r3, #52]	; 0x34
		osMutexRelease(Fm25v02MutexHandle);
 800a2e2:	4b6b      	ldr	r3, [pc, #428]	; (800a490 <ThreadMainTask+0x30c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fc f88e 	bl	8006408 <osMutexRelease>

	for(;;)
	{
		//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);

		if(bootloader_registers.working_mode_reg == 1) // если включен режим обновления программы
 800a2ec:	4b69      	ldr	r3, [pc, #420]	; (800a494 <ThreadMainTask+0x310>)
 800a2ee:	8b9b      	ldrh	r3, [r3, #28]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	f040 8325 	bne.w	800a940 <ThreadMainTask+0x7bc>
		{

			//if(bootloader_registers.ready_download_reg == 0x0000)
			if(bootloader_registers.ready_download_reg != 0x0001)
 800a2f6:	4b67      	ldr	r3, [pc, #412]	; (800a494 <ThreadMainTask+0x310>)
 800a2f8:	8bdb      	ldrh	r3, [r3, #30]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d018      	beq.n	800a330 <ThreadMainTask+0x1ac>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a2fe:	4b64      	ldr	r3, [pc, #400]	; (800a490 <ThreadMainTask+0x30c>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f04f 31ff 	mov.w	r1, #4294967295
 800a306:	4618      	mov	r0, r3
 800a308:	f7fc f830 	bl	800636c <osMutexWait>
				fm25v02_write(2*READY_DOWNLOAD_REG, 0x00); // устанавливаем регистр готовности к загрузке прошивки
 800a30c:	2100      	movs	r1, #0
 800a30e:	f44f 7008 	mov.w	r0, #544	; 0x220
 800a312:	f001 f8fd 	bl	800b510 <fm25v02_write>
				fm25v02_write(2*READY_DOWNLOAD_REG+1, 0x01);
 800a316:	2101      	movs	r1, #1
 800a318:	f240 2021 	movw	r0, #545	; 0x221
 800a31c:	f001 f8f8 	bl	800b510 <fm25v02_write>
				bootloader_registers.ready_download_reg = 0x0001;
 800a320:	4b5c      	ldr	r3, [pc, #368]	; (800a494 <ThreadMainTask+0x310>)
 800a322:	2201      	movs	r2, #1
 800a324:	83da      	strh	r2, [r3, #30]
				osMutexRelease(Fm25v02MutexHandle);
 800a326:	4b5a      	ldr	r3, [pc, #360]	; (800a490 <ThreadMainTask+0x30c>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fc f86c 	bl	8006408 <osMutexRelease>
			}

			switch(bootloader_registers.write_array_reg) // запись массива байт в память контроллера
 800a330:	4b58      	ldr	r3, [pc, #352]	; (800a494 <ThreadMainTask+0x310>)
 800a332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 8164 	beq.w	800a602 <ThreadMainTask+0x47e>
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	f040 8164 	bne.w	800a608 <ThreadMainTask+0x484>
					//LED4_TOGGLE();
					//LED5_TOGGLE();

					//address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для записи данных в память контроллера

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a340:	4b53      	ldr	r3, [pc, #332]	; (800a490 <ThreadMainTask+0x30c>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f04f 31ff 	mov.w	r1, #4294967295
 800a348:	4618      	mov	r0, r3
 800a34a:	f7fc f80f 	bl	800636c <osMutexWait>

					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &temp_reg_h1);
 800a34e:	f107 030c 	add.w	r3, r7, #12
 800a352:	4619      	mov	r1, r3
 800a354:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800a358:	f001 f8a0 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &temp_reg_l1);
 800a35c:	f107 030b 	add.w	r3, r7, #11
 800a360:	4619      	mov	r1, r3
 800a362:	f240 202d 	movw	r0, #557	; 0x22d
 800a366:	f001 f899 	bl	800b49c <fm25v02_read>
					bootloader_registers.address_to_write_2_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a36a:	7b3b      	ldrb	r3, [r7, #12]
 800a36c:	021b      	lsls	r3, r3, #8
 800a36e:	b21a      	sxth	r2, r3
 800a370:	7afb      	ldrb	r3, [r7, #11]
 800a372:	b21b      	sxth	r3, r3
 800a374:	4313      	orrs	r3, r2
 800a376:	b21b      	sxth	r3, r3
 800a378:	b29a      	uxth	r2, r3
 800a37a:	4b46      	ldr	r3, [pc, #280]	; (800a494 <ThreadMainTask+0x310>)
 800a37c:	855a      	strh	r2, [r3, #42]	; 0x2a

					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &temp_reg_h1);
 800a37e:	f107 030c 	add.w	r3, r7, #12
 800a382:	4619      	mov	r1, r3
 800a384:	f240 202e 	movw	r0, #558	; 0x22e
 800a388:	f001 f888 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &temp_reg_l1);
 800a38c:	f107 030b 	add.w	r3, r7, #11
 800a390:	4619      	mov	r1, r3
 800a392:	f240 202f 	movw	r0, #559	; 0x22f
 800a396:	f001 f881 	bl	800b49c <fm25v02_read>
					bootloader_registers.address_to_write_3_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a39a:	7b3b      	ldrb	r3, [r7, #12]
 800a39c:	021b      	lsls	r3, r3, #8
 800a39e:	b21a      	sxth	r2, r3
 800a3a0:	7afb      	ldrb	r3, [r7, #11]
 800a3a2:	b21b      	sxth	r3, r3
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	b21b      	sxth	r3, r3
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	4b3a      	ldr	r3, [pc, #232]	; (800a494 <ThreadMainTask+0x310>)
 800a3ac:	859a      	strh	r2, [r3, #44]	; 0x2c

					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &temp_reg_h1);
 800a3ae:	f107 030c 	add.w	r3, r7, #12
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	f240 2046 	movw	r0, #582	; 0x246
 800a3b8:	f001 f870 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &temp_reg_l1);
 800a3bc:	f107 030b 	add.w	r3, r7, #11
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f240 2047 	movw	r0, #583	; 0x247
 800a3c6:	f001 f869 	bl	800b49c <fm25v02_read>
					bootloader_registers.address_to_write_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a3ca:	7b3b      	ldrb	r3, [r7, #12]
 800a3cc:	021b      	lsls	r3, r3, #8
 800a3ce:	b21a      	sxth	r2, r3
 800a3d0:	7afb      	ldrb	r3, [r7, #11]
 800a3d2:	b21b      	sxth	r3, r3
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	b21b      	sxth	r3, r3
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	4b2e      	ldr	r3, [pc, #184]	; (800a494 <ThreadMainTask+0x310>)
 800a3dc:	86da      	strh	r2, [r3, #54]	; 0x36

					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &temp_reg_h1);
 800a3de:	f107 030c 	add.w	r3, r7, #12
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	f44f 7012 	mov.w	r0, #584	; 0x248
 800a3e8:	f001 f858 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &temp_reg_l1);
 800a3ec:	f107 030b 	add.w	r3, r7, #11
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	f240 2049 	movw	r0, #585	; 0x249
 800a3f6:	f001 f851 	bl	800b49c <fm25v02_read>
					bootloader_registers.address_to_write_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a3fa:	7b3b      	ldrb	r3, [r7, #12]
 800a3fc:	021b      	lsls	r3, r3, #8
 800a3fe:	b21a      	sxth	r2, r3
 800a400:	7afb      	ldrb	r3, [r7, #11]
 800a402:	b21b      	sxth	r3, r3
 800a404:	4313      	orrs	r3, r2
 800a406:	b21b      	sxth	r3, r3
 800a408:	b29a      	uxth	r2, r3
 800a40a:	4b22      	ldr	r3, [pc, #136]	; (800a494 <ThreadMainTask+0x310>)
 800a40c:	871a      	strh	r2, [r3, #56]	; 0x38

					fm25v02_read(2*PACKET_CRC_HIGH_REG, &temp_reg_h1);
 800a40e:	f107 030c 	add.w	r3, r7, #12
 800a412:	4619      	mov	r1, r3
 800a414:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800a418:	f001 f840 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &temp_reg_l1);
 800a41c:	f107 030b 	add.w	r3, r7, #11
 800a420:	4619      	mov	r1, r3
 800a422:	f240 204d 	movw	r0, #589	; 0x24d
 800a426:	f001 f839 	bl	800b49c <fm25v02_read>
					bootloader_registers.packet_crc_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a42a:	7b3b      	ldrb	r3, [r7, #12]
 800a42c:	021b      	lsls	r3, r3, #8
 800a42e:	b21a      	sxth	r2, r3
 800a430:	7afb      	ldrb	r3, [r7, #11]
 800a432:	b21b      	sxth	r3, r3
 800a434:	4313      	orrs	r3, r2
 800a436:	b21b      	sxth	r3, r3
 800a438:	b29a      	uxth	r2, r3
 800a43a:	4b16      	ldr	r3, [pc, #88]	; (800a494 <ThreadMainTask+0x310>)
 800a43c:	879a      	strh	r2, [r3, #60]	; 0x3c

					fm25v02_read(2*PACKET_CRC_LOW_REG, &temp_reg_h1);
 800a43e:	f107 030c 	add.w	r3, r7, #12
 800a442:	4619      	mov	r1, r3
 800a444:	f240 204e 	movw	r0, #590	; 0x24e
 800a448:	f001 f828 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*PACKET_CRC_LOW_REG+1, &temp_reg_l1);
 800a44c:	f107 030b 	add.w	r3, r7, #11
 800a450:	4619      	mov	r1, r3
 800a452:	f240 204f 	movw	r0, #591	; 0x24f
 800a456:	f001 f821 	bl	800b49c <fm25v02_read>
					bootloader_registers.packet_crc_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a45a:	7b3b      	ldrb	r3, [r7, #12]
 800a45c:	021b      	lsls	r3, r3, #8
 800a45e:	b21a      	sxth	r2, r3
 800a460:	7afb      	ldrb	r3, [r7, #11]
 800a462:	b21b      	sxth	r3, r3
 800a464:	4313      	orrs	r3, r2
 800a466:	b21b      	sxth	r3, r3
 800a468:	b29a      	uxth	r2, r3
 800a46a:	4b0a      	ldr	r3, [pc, #40]	; (800a494 <ThreadMainTask+0x310>)
 800a46c:	87da      	strh	r2, [r3, #62]	; 0x3e

					osMutexRelease(Fm25v02MutexHandle);
 800a46e:	4b08      	ldr	r3, [pc, #32]	; (800a490 <ThreadMainTask+0x30c>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4618      	mov	r0, r3
 800a474:	f7fb ffc8 	bl	8006408 <osMutexRelease>

					address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для записи данных в память контроллера
 800a478:	4b06      	ldr	r3, [pc, #24]	; (800a494 <ThreadMainTask+0x310>)
 800a47a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a47c:	061a      	lsls	r2, r3, #24
 800a47e:	4b05      	ldr	r3, [pc, #20]	; (800a494 <ThreadMainTask+0x310>)
 800a480:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a482:	041b      	lsls	r3, r3, #16
 800a484:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a488:	e006      	b.n	800a498 <ThreadMainTask+0x314>
 800a48a:	bf00      	nop
 800a48c:	200095a4 	.word	0x200095a4
 800a490:	200095d8 	.word	0x200095d8
 800a494:	20009db4 	.word	0x20009db4
 800a498:	431a      	orrs	r2, r3
 800a49a:	4b9f      	ldr	r3, [pc, #636]	; (800a718 <ThreadMainTask+0x594>)
 800a49c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a49e:	021b      	lsls	r3, r3, #8
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	4b9c      	ldr	r3, [pc, #624]	; (800a718 <ThreadMainTask+0x594>)
 800a4a6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	4a9b      	ldr	r2, [pc, #620]	; (800a71c <ThreadMainTask+0x598>)
 800a4ae:	6013      	str	r3, [r2, #0]

					packet_crc = (((bootloader_registers.packet_crc_low_reg)<<8)&0xFF00) | ((bootloader_registers.packet_crc_high_reg)&0x00FF); // получаем значение контрольной суммы из регистров контрольной суммы пакета
 800a4b0:	4b99      	ldr	r3, [pc, #612]	; (800a718 <ThreadMainTask+0x594>)
 800a4b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4b4:	021b      	lsls	r3, r3, #8
 800a4b6:	b21a      	sxth	r2, r3
 800a4b8:	4b97      	ldr	r3, [pc, #604]	; (800a718 <ThreadMainTask+0x594>)
 800a4ba:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a4bc:	b21b      	sxth	r3, r3
 800a4be:	b2db      	uxtb	r3, r3
 800a4c0:	b21b      	sxth	r3, r3
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	b21b      	sxth	r3, r3
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	4b95      	ldr	r3, [pc, #596]	; (800a720 <ThreadMainTask+0x59c>)
 800a4ca:	801a      	strh	r2, [r3, #0]

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	82fb      	strh	r3, [r7, #22]
 800a4d0:	e020      	b.n	800a514 <ThreadMainTask+0x390>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a4d2:	4b94      	ldr	r3, [pc, #592]	; (800a724 <ThreadMainTask+0x5a0>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f04f 31ff 	mov.w	r1, #4294967295
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fb ff46 	bl	800636c <osMutexWait>
						//fm25v02_read(2*(PACKET_DATA_0_REG+i), &temp_read_h);
						fm25v02_read(2*(PACKET_DATA_0_REG+i)+1, &temp_read_l);
 800a4e0:	8afb      	ldrh	r3, [r7, #22]
 800a4e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	005b      	lsls	r3, r3, #1
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	f107 020d 	add.w	r2, r7, #13
 800a4f4:	4611      	mov	r1, r2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 ffd0 	bl	800b49c <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800a4fc:	4b89      	ldr	r3, [pc, #548]	; (800a724 <ThreadMainTask+0x5a0>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4618      	mov	r0, r3
 800a502:	f7fb ff81 	bl	8006408 <osMutexRelease>
						buffer_packet_data[i] = temp_read_l;
 800a506:	8afb      	ldrh	r3, [r7, #22]
 800a508:	7b79      	ldrb	r1, [r7, #13]
 800a50a:	4a87      	ldr	r2, [pc, #540]	; (800a728 <ThreadMainTask+0x5a4>)
 800a50c:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a50e:	8afb      	ldrh	r3, [r7, #22]
 800a510:	3301      	adds	r3, #1
 800a512:	82fb      	strh	r3, [r7, #22]
 800a514:	4b80      	ldr	r3, [pc, #512]	; (800a718 <ThreadMainTask+0x594>)
 800a516:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a518:	8afa      	ldrh	r2, [r7, #22]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d3d9      	bcc.n	800a4d2 <ThreadMainTask+0x34e>
					}

					calculating_packet_crc = CRC16( (unsigned char*)(&buffer_packet_data[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы данных из регистров
 800a51e:	4b7e      	ldr	r3, [pc, #504]	; (800a718 <ThreadMainTask+0x594>)
 800a520:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a522:	4619      	mov	r1, r3
 800a524:	4880      	ldr	r0, [pc, #512]	; (800a728 <ThreadMainTask+0x5a4>)
 800a526:	f004 f927 	bl	800e778 <CRC16>
 800a52a:	4603      	mov	r3, r0
 800a52c:	4a7f      	ldr	r2, [pc, #508]	; (800a72c <ThreadMainTask+0x5a8>)
 800a52e:	6013      	str	r3, [r2, #0]

					if( packet_crc == calculating_packet_crc) // если контрольная сумма из регистров контрольной суммы пакета совпадает с расчетной контрольной суммой данных из регистров с данными
 800a530:	4b7b      	ldr	r3, [pc, #492]	; (800a720 <ThreadMainTask+0x59c>)
 800a532:	881b      	ldrh	r3, [r3, #0]
 800a534:	461a      	mov	r2, r3
 800a536:	4b7d      	ldr	r3, [pc, #500]	; (800a72c <ThreadMainTask+0x5a8>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d163      	bne.n	800a606 <ThreadMainTask+0x482>
					{
						//osThreadSuspendAll();

						taskENTER_CRITICAL();
 800a53e:	f7ff f901 	bl	8009744 <vPortEnterCritical>

						HAL_FLASH_Unlock(); // разблокируем запись памяти контроллера
 800a542:	f7f7 ff7f 	bl	8002444 <HAL_FLASH_Unlock>
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a546:	2300      	movs	r3, #0
 800a548:	82bb      	strh	r3, [r7, #20]
 800a54a:	e013      	b.n	800a574 <ThreadMainTask+0x3f0>
						{
							//if( *( (uint32_t*)(address_to_read_write+i) ) == 0xFF) // тестовое услови для проверки значения байта 0xFF перед тем как начать запись
							//{
								while( HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address_to_read_write+i, buffer_packet_data[i]) != HAL_OK ) // ничего не делаем пока не выполнится запись в память контроллера
 800a54c:	bf00      	nop
 800a54e:	8aba      	ldrh	r2, [r7, #20]
 800a550:	4b72      	ldr	r3, [pc, #456]	; (800a71c <ThreadMainTask+0x598>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	18d1      	adds	r1, r2, r3
 800a556:	8abb      	ldrh	r3, [r7, #20]
 800a558:	4a73      	ldr	r2, [pc, #460]	; (800a728 <ThreadMainTask+0x5a4>)
 800a55a:	5cd3      	ldrb	r3, [r2, r3]
 800a55c:	b2da      	uxtb	r2, r3
 800a55e:	f04f 0300 	mov.w	r3, #0
 800a562:	2000      	movs	r0, #0
 800a564:	f7f7 ff1a 	bl	800239c <HAL_FLASH_Program>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1ef      	bne.n	800a54e <ThreadMainTask+0x3ca>
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a56e:	8abb      	ldrh	r3, [r7, #20]
 800a570:	3301      	adds	r3, #1
 800a572:	82bb      	strh	r3, [r7, #20]
 800a574:	4b68      	ldr	r3, [pc, #416]	; (800a718 <ThreadMainTask+0x594>)
 800a576:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a578:	8aba      	ldrh	r2, [r7, #20]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d3e6      	bcc.n	800a54c <ThreadMainTask+0x3c8>

								}
							//}

						}
						HAL_FLASH_Lock(); // блокируем запись памяти контроллера
 800a57e:	f7f7 ff83 	bl	8002488 <HAL_FLASH_Lock>

						taskEXIT_CRITICAL();
 800a582:	f7ff f90f 	bl	80097a4 <vPortExitCritical>

						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a586:	2300      	movs	r3, #0
 800a588:	827b      	strh	r3, [r7, #18]
 800a58a:	e00b      	b.n	800a5a4 <ThreadMainTask+0x420>
						{
							buffer_packet_data_flash[i] = *((uint32_t*)(address_to_read_write+i));
 800a58c:	8a7a      	ldrh	r2, [r7, #18]
 800a58e:	4b63      	ldr	r3, [pc, #396]	; (800a71c <ThreadMainTask+0x598>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4413      	add	r3, r2
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	8a7b      	ldrh	r3, [r7, #18]
 800a598:	b2d1      	uxtb	r1, r2
 800a59a:	4a65      	ldr	r2, [pc, #404]	; (800a730 <ThreadMainTask+0x5ac>)
 800a59c:	54d1      	strb	r1, [r2, r3]
						for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a59e:	8a7b      	ldrh	r3, [r7, #18]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	827b      	strh	r3, [r7, #18]
 800a5a4:	4b5c      	ldr	r3, [pc, #368]	; (800a718 <ThreadMainTask+0x594>)
 800a5a6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a5a8:	8a7a      	ldrh	r2, [r7, #18]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d3ee      	bcc.n	800a58c <ThreadMainTask+0x408>
						}

						calculating_packet_flash_crc = CRC16( (unsigned char*)(&buffer_packet_data_flash[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы записанных данных в память микроконтроллера
 800a5ae:	4b5a      	ldr	r3, [pc, #360]	; (800a718 <ThreadMainTask+0x594>)
 800a5b0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	485e      	ldr	r0, [pc, #376]	; (800a730 <ThreadMainTask+0x5ac>)
 800a5b6:	f004 f8df 	bl	800e778 <CRC16>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	4a5d      	ldr	r2, [pc, #372]	; (800a734 <ThreadMainTask+0x5b0>)
 800a5be:	6013      	str	r3, [r2, #0]

						if( packet_crc == calculating_packet_flash_crc)
 800a5c0:	4b57      	ldr	r3, [pc, #348]	; (800a720 <ThreadMainTask+0x59c>)
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	461a      	mov	r2, r3
 800a5c6:	4b5b      	ldr	r3, [pc, #364]	; (800a734 <ThreadMainTask+0x5b0>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d11b      	bne.n	800a606 <ThreadMainTask+0x482>
						{

						//osThreadResumeAll();

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a5ce:	4b55      	ldr	r3, [pc, #340]	; (800a724 <ThreadMainTask+0x5a0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f04f 31ff 	mov.w	r1, #4294967295
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fb fec8 	bl	800636c <osMutexWait>

						fm25v02_write(2*WRITE_ARRAY_REG, 0x00); // обнуляем регистр и переменную записи массива
 800a5dc:	2100      	movs	r1, #0
 800a5de:	f240 2042 	movw	r0, #578	; 0x242
 800a5e2:	f000 ff95 	bl	800b510 <fm25v02_write>
						fm25v02_write(2*WRITE_ARRAY_REG+1, 0x00);
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	f240 2043 	movw	r0, #579	; 0x243
 800a5ec:	f000 ff90 	bl	800b510 <fm25v02_write>
						bootloader_registers.write_array_reg = 0x0000;
 800a5f0:	4b49      	ldr	r3, [pc, #292]	; (800a718 <ThreadMainTask+0x594>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	865a      	strh	r2, [r3, #50]	; 0x32

						osMutexRelease(Fm25v02MutexHandle);
 800a5f6:	4b4b      	ldr	r3, [pc, #300]	; (800a724 <ThreadMainTask+0x5a0>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7fb ff04 	bl	8006408 <osMutexRelease>

						}

					}

				break;
 800a600:	e001      	b.n	800a606 <ThreadMainTask+0x482>

					//LED3_OFF();
					//LED4_OFF();
					//LED5_OFF();

				break;
 800a602:	bf00      	nop
 800a604:	e000      	b.n	800a608 <ThreadMainTask+0x484>
				break;
 800a606:	bf00      	nop
			}

			switch(bootloader_registers.read_array_reg) // чтение массива из памяти контроллера
 800a608:	4b43      	ldr	r3, [pc, #268]	; (800a718 <ThreadMainTask+0x594>)
 800a60a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	f040 8129 	bne.w	800a864 <ThreadMainTask+0x6e0>
			{
				case(1):

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a612:	4b44      	ldr	r3, [pc, #272]	; (800a724 <ThreadMainTask+0x5a0>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f04f 31ff 	mov.w	r1, #4294967295
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fb fea6 	bl	800636c <osMutexWait>

					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &temp_reg_h1);
 800a620:	f107 030c 	add.w	r3, r7, #12
 800a624:	4619      	mov	r1, r3
 800a626:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800a62a:	f000 ff37 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &temp_reg_l1);
 800a62e:	f107 030b 	add.w	r3, r7, #11
 800a632:	4619      	mov	r1, r3
 800a634:	f240 202d 	movw	r0, #557	; 0x22d
 800a638:	f000 ff30 	bl	800b49c <fm25v02_read>
					bootloader_registers.address_to_write_2_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a63c:	7b3b      	ldrb	r3, [r7, #12]
 800a63e:	021b      	lsls	r3, r3, #8
 800a640:	b21a      	sxth	r2, r3
 800a642:	7afb      	ldrb	r3, [r7, #11]
 800a644:	b21b      	sxth	r3, r3
 800a646:	4313      	orrs	r3, r2
 800a648:	b21b      	sxth	r3, r3
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	4b32      	ldr	r3, [pc, #200]	; (800a718 <ThreadMainTask+0x594>)
 800a64e:	855a      	strh	r2, [r3, #42]	; 0x2a

					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &temp_reg_h1);
 800a650:	f107 030c 	add.w	r3, r7, #12
 800a654:	4619      	mov	r1, r3
 800a656:	f240 202e 	movw	r0, #558	; 0x22e
 800a65a:	f000 ff1f 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &temp_reg_l1);
 800a65e:	f107 030b 	add.w	r3, r7, #11
 800a662:	4619      	mov	r1, r3
 800a664:	f240 202f 	movw	r0, #559	; 0x22f
 800a668:	f000 ff18 	bl	800b49c <fm25v02_read>
					bootloader_registers.address_to_write_3_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a66c:	7b3b      	ldrb	r3, [r7, #12]
 800a66e:	021b      	lsls	r3, r3, #8
 800a670:	b21a      	sxth	r2, r3
 800a672:	7afb      	ldrb	r3, [r7, #11]
 800a674:	b21b      	sxth	r3, r3
 800a676:	4313      	orrs	r3, r2
 800a678:	b21b      	sxth	r3, r3
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	4b26      	ldr	r3, [pc, #152]	; (800a718 <ThreadMainTask+0x594>)
 800a67e:	859a      	strh	r2, [r3, #44]	; 0x2c

					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &temp_reg_h1);
 800a680:	f107 030c 	add.w	r3, r7, #12
 800a684:	4619      	mov	r1, r3
 800a686:	f240 2046 	movw	r0, #582	; 0x246
 800a68a:	f000 ff07 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &temp_reg_l1);
 800a68e:	f107 030b 	add.w	r3, r7, #11
 800a692:	4619      	mov	r1, r3
 800a694:	f240 2047 	movw	r0, #583	; 0x247
 800a698:	f000 ff00 	bl	800b49c <fm25v02_read>
					bootloader_registers.address_to_write_high_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a69c:	7b3b      	ldrb	r3, [r7, #12]
 800a69e:	021b      	lsls	r3, r3, #8
 800a6a0:	b21a      	sxth	r2, r3
 800a6a2:	7afb      	ldrb	r3, [r7, #11]
 800a6a4:	b21b      	sxth	r3, r3
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	b21b      	sxth	r3, r3
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	4b1a      	ldr	r3, [pc, #104]	; (800a718 <ThreadMainTask+0x594>)
 800a6ae:	86da      	strh	r2, [r3, #54]	; 0x36

					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &temp_reg_h1);
 800a6b0:	f107 030c 	add.w	r3, r7, #12
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	f44f 7012 	mov.w	r0, #584	; 0x248
 800a6ba:	f000 feef 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &temp_reg_l1);
 800a6be:	f107 030b 	add.w	r3, r7, #11
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	f240 2049 	movw	r0, #585	; 0x249
 800a6c8:	f000 fee8 	bl	800b49c <fm25v02_read>
					bootloader_registers.address_to_write_low_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a6cc:	7b3b      	ldrb	r3, [r7, #12]
 800a6ce:	021b      	lsls	r3, r3, #8
 800a6d0:	b21a      	sxth	r2, r3
 800a6d2:	7afb      	ldrb	r3, [r7, #11]
 800a6d4:	b21b      	sxth	r3, r3
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	b21b      	sxth	r3, r3
 800a6da:	b29a      	uxth	r2, r3
 800a6dc:	4b0e      	ldr	r3, [pc, #56]	; (800a718 <ThreadMainTask+0x594>)
 800a6de:	871a      	strh	r2, [r3, #56]	; 0x38

					osMutexRelease(Fm25v02MutexHandle);
 800a6e0:	4b10      	ldr	r3, [pc, #64]	; (800a724 <ThreadMainTask+0x5a0>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7fb fe8f 	bl	8006408 <osMutexRelease>

					address_to_read_write = ((((uint32_t)(bootloader_registers.address_to_write_2_reg))<<24)&0xFF000000) | ((((uint32_t)(bootloader_registers.address_to_write_3_reg))<<16)&0x00FF0000) | ((((uint32_t)(bootloader_registers.address_to_write_high_reg))<<8)&0x0000FF00) | (((uint32_t)(bootloader_registers.address_to_write_low_reg))&0x000000FF); // получаем переменную адреса для чтения данных из памяти контроллера
 800a6ea:	4b0b      	ldr	r3, [pc, #44]	; (800a718 <ThreadMainTask+0x594>)
 800a6ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ee:	061a      	lsls	r2, r3, #24
 800a6f0:	4b09      	ldr	r3, [pc, #36]	; (800a718 <ThreadMainTask+0x594>)
 800a6f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a6f4:	041b      	lsls	r3, r3, #16
 800a6f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a6fa:	431a      	orrs	r2, r3
 800a6fc:	4b06      	ldr	r3, [pc, #24]	; (800a718 <ThreadMainTask+0x594>)
 800a6fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a700:	021b      	lsls	r3, r3, #8
 800a702:	b29b      	uxth	r3, r3
 800a704:	431a      	orrs	r2, r3
 800a706:	4b04      	ldr	r3, [pc, #16]	; (800a718 <ThreadMainTask+0x594>)
 800a708:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	4313      	orrs	r3, r2
 800a70e:	4a03      	ldr	r2, [pc, #12]	; (800a71c <ThreadMainTask+0x598>)
 800a710:	6013      	str	r3, [r2, #0]

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a712:	2300      	movs	r3, #0
 800a714:	823b      	strh	r3, [r7, #16]
 800a716:	e039      	b.n	800a78c <ThreadMainTask+0x608>
 800a718:	20009db4 	.word	0x20009db4
 800a71c:	2000995c 	.word	0x2000995c
 800a720:	20009b74 	.word	0x20009b74
 800a724:	200095d8 	.word	0x200095d8
 800a728:	20009970 	.word	0x20009970
 800a72c:	20009b90 	.word	0x20009b90
 800a730:	20009a70 	.word	0x20009a70
 800a734:	20009b98 	.word	0x20009b98
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a738:	4bad      	ldr	r3, [pc, #692]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f04f 31ff 	mov.w	r1, #4294967295
 800a740:	4618      	mov	r0, r3
 800a742:	f7fb fe13 	bl	800636c <osMutexWait>

						fm25v02_write(2*(PACKET_DATA_0_REG+i), 0x00);
 800a746:	8a3b      	ldrh	r3, [r7, #16]
 800a748:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	005b      	lsls	r3, r3, #1
 800a750:	b29b      	uxth	r3, r3
 800a752:	2100      	movs	r1, #0
 800a754:	4618      	mov	r0, r3
 800a756:	f000 fedb 	bl	800b510 <fm25v02_write>
						fm25v02_write(2*(PACKET_DATA_0_REG+i)+1, *( (uint32_t*)(address_to_read_write+i) ) );
 800a75a:	8a3b      	ldrh	r3, [r7, #16]
 800a75c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a760:	b29b      	uxth	r3, r3
 800a762:	005b      	lsls	r3, r3, #1
 800a764:	b29b      	uxth	r3, r3
 800a766:	3301      	adds	r3, #1
 800a768:	b298      	uxth	r0, r3
 800a76a:	8a3a      	ldrh	r2, [r7, #16]
 800a76c:	4ba1      	ldr	r3, [pc, #644]	; (800a9f4 <ThreadMainTask+0x870>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4413      	add	r3, r2
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	b2db      	uxtb	r3, r3
 800a776:	4619      	mov	r1, r3
 800a778:	f000 feca 	bl	800b510 <fm25v02_write>

						osMutexRelease(Fm25v02MutexHandle);
 800a77c:	4b9c      	ldr	r3, [pc, #624]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4618      	mov	r0, r3
 800a782:	f7fb fe41 	bl	8006408 <osMutexRelease>
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++)
 800a786:	8a3b      	ldrh	r3, [r7, #16]
 800a788:	3301      	adds	r3, #1
 800a78a:	823b      	strh	r3, [r7, #16]
 800a78c:	4b9a      	ldr	r3, [pc, #616]	; (800a9f8 <ThreadMainTask+0x874>)
 800a78e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a790:	8a3a      	ldrh	r2, [r7, #16]
 800a792:	429a      	cmp	r2, r3
 800a794:	d3d0      	bcc.n	800a738 <ThreadMainTask+0x5b4>
					}

					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a796:	2300      	movs	r3, #0
 800a798:	81fb      	strh	r3, [r7, #14]
 800a79a:	e020      	b.n	800a7de <ThreadMainTask+0x65a>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a79c:	4b94      	ldr	r3, [pc, #592]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f04f 31ff 	mov.w	r1, #4294967295
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fb fde1 	bl	800636c <osMutexWait>
						//fm25v02_read(2*(PACKET_DATA_0_REG+i), &temp_read_h);
						fm25v02_read(2*(PACKET_DATA_0_REG+i)+1, &temp_read_l);
 800a7aa:	89fb      	ldrh	r3, [r7, #14]
 800a7ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	f107 020d 	add.w	r2, r7, #13
 800a7be:	4611      	mov	r1, r2
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 fe6b 	bl	800b49c <fm25v02_read>
						osMutexRelease(Fm25v02MutexHandle);
 800a7c6:	4b8a      	ldr	r3, [pc, #552]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fb fe1c 	bl	8006408 <osMutexRelease>
						buffer_packet_data[i] = temp_read_l;
 800a7d0:	89fb      	ldrh	r3, [r7, #14]
 800a7d2:	7b79      	ldrb	r1, [r7, #13]
 800a7d4:	4a89      	ldr	r2, [pc, #548]	; (800a9fc <ThreadMainTask+0x878>)
 800a7d6:	54d1      	strb	r1, [r2, r3]
					for(uint16_t i=0; i<(bootloader_registers.byte_quantity_reg); i++) // заполняем буфер с данными из регистров
 800a7d8:	89fb      	ldrh	r3, [r7, #14]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	81fb      	strh	r3, [r7, #14]
 800a7de:	4b86      	ldr	r3, [pc, #536]	; (800a9f8 <ThreadMainTask+0x874>)
 800a7e0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a7e2:	89fa      	ldrh	r2, [r7, #14]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d3d9      	bcc.n	800a79c <ThreadMainTask+0x618>
					}

					calculating_packet_crc = CRC16( (unsigned char*)(&buffer_packet_data[0]), (unsigned int)(bootloader_registers.byte_quantity_reg) ); // вычисляем значение контрольной суммы данных из регистров
 800a7e8:	4b83      	ldr	r3, [pc, #524]	; (800a9f8 <ThreadMainTask+0x874>)
 800a7ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	4883      	ldr	r0, [pc, #524]	; (800a9fc <ThreadMainTask+0x878>)
 800a7f0:	f003 ffc2 	bl	800e778 <CRC16>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	4a82      	ldr	r2, [pc, #520]	; (800aa00 <ThreadMainTask+0x87c>)
 800a7f8:	6013      	str	r3, [r2, #0]

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a7fa:	4b7d      	ldr	r3, [pc, #500]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f04f 31ff 	mov.w	r1, #4294967295
 800a802:	4618      	mov	r0, r3
 800a804:	f7fb fdb2 	bl	800636c <osMutexWait>

					fm25v02_write(2*PACKET_CRC_HIGH_REG, 0x00);
 800a808:	2100      	movs	r1, #0
 800a80a:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800a80e:	f000 fe7f 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*PACKET_CRC_HIGH_REG+1, (uint8_t)calculating_packet_crc ); //записываем в регистр старший байт контрольной суммы пакета
 800a812:	4b7b      	ldr	r3, [pc, #492]	; (800aa00 <ThreadMainTask+0x87c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	4619      	mov	r1, r3
 800a81a:	f240 204d 	movw	r0, #589	; 0x24d
 800a81e:	f000 fe77 	bl	800b510 <fm25v02_write>

					fm25v02_write(2*PACKET_CRC_LOW_REG, 0x00);
 800a822:	2100      	movs	r1, #0
 800a824:	f240 204e 	movw	r0, #590	; 0x24e
 800a828:	f000 fe72 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*PACKET_CRC_LOW_REG+1, (uint8_t)(calculating_packet_crc>>8) ); //записываем в регистр младший байт контрольной суммы пакета
 800a82c:	4b74      	ldr	r3, [pc, #464]	; (800aa00 <ThreadMainTask+0x87c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	0a1b      	lsrs	r3, r3, #8
 800a832:	b2db      	uxtb	r3, r3
 800a834:	4619      	mov	r1, r3
 800a836:	f240 204f 	movw	r0, #591	; 0x24f
 800a83a:	f000 fe69 	bl	800b510 <fm25v02_write>

					fm25v02_write(2*READ_ARRAY_REG, 0x00); // обнуляем регистр и переменную чтения массива
 800a83e:	2100      	movs	r1, #0
 800a840:	f44f 7011 	mov.w	r0, #580	; 0x244
 800a844:	f000 fe64 	bl	800b510 <fm25v02_write>
					fm25v02_write(2*READ_ARRAY_REG+1, 0x00);
 800a848:	2100      	movs	r1, #0
 800a84a:	f240 2045 	movw	r0, #581	; 0x245
 800a84e:	f000 fe5f 	bl	800b510 <fm25v02_write>
					bootloader_registers.read_array_reg = 0x0000;
 800a852:	4b69      	ldr	r3, [pc, #420]	; (800a9f8 <ThreadMainTask+0x874>)
 800a854:	2200      	movs	r2, #0
 800a856:	869a      	strh	r2, [r3, #52]	; 0x34

					osMutexRelease(Fm25v02MutexHandle);
 800a858:	4b65      	ldr	r3, [pc, #404]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fb fdd3 	bl	8006408 <osMutexRelease>

				break;
 800a862:	bf00      	nop
			}

			switch(bootloader_registers.clear_page_on_reg) // очистка указанной страницы памяти контроллера
 800a864:	4b64      	ldr	r3, [pc, #400]	; (800a9f8 <ThreadMainTask+0x874>)
 800a866:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800a868:	2b01      	cmp	r3, #1
 800a86a:	f040 809e 	bne.w	800a9aa <ThreadMainTask+0x826>
			{
				case(1):

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a86e:	4b60      	ldr	r3, [pc, #384]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f04f 31ff 	mov.w	r1, #4294967295
 800a876:	4618      	mov	r0, r3
 800a878:	f7fb fd78 	bl	800636c <osMutexWait>

					fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &temp_reg_h1);
 800a87c:	f107 030c 	add.w	r3, r7, #12
 800a880:	4619      	mov	r1, r3
 800a882:	f240 203e 	movw	r0, #574	; 0x23e
 800a886:	f000 fe09 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &temp_reg_l1);
 800a88a:	f107 030b 	add.w	r3, r7, #11
 800a88e:	4619      	mov	r1, r3
 800a890:	f240 203f 	movw	r0, #575	; 0x23f
 800a894:	f000 fe02 	bl	800b49c <fm25v02_read>
					bootloader_registers.clear_page_number_reg = ((((uint16_t)temp_reg_h1)&0x00FF)<<8)|(((uint16_t)temp_reg_l1)&0x00FF);
 800a898:	7b3b      	ldrb	r3, [r7, #12]
 800a89a:	021b      	lsls	r3, r3, #8
 800a89c:	b21a      	sxth	r2, r3
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	b21b      	sxth	r3, r3
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	b21b      	sxth	r3, r3
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	4b53      	ldr	r3, [pc, #332]	; (800a9f8 <ThreadMainTask+0x874>)
 800a8aa:	85da      	strh	r2, [r3, #46]	; 0x2e

					osMutexRelease(Fm25v02MutexHandle);
 800a8ac:	4b50      	ldr	r3, [pc, #320]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fb fda9 	bl	8006408 <osMutexRelease>

					erase_init.TypeErase = FLASH_TYPEERASE_SECTORS; // заполняем структуру с параметрами очистки памяти
 800a8b6:	4b53      	ldr	r3, [pc, #332]	; (800aa04 <ThreadMainTask+0x880>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]
					erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800a8bc:	4b51      	ldr	r3, [pc, #324]	; (800aa04 <ThreadMainTask+0x880>)
 800a8be:	2202      	movs	r2, #2
 800a8c0:	611a      	str	r2, [r3, #16]
					erase_init.Sector = bootloader_registers.clear_page_number_reg;
 800a8c2:	4b4d      	ldr	r3, [pc, #308]	; (800a9f8 <ThreadMainTask+0x874>)
 800a8c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	4b4e      	ldr	r3, [pc, #312]	; (800aa04 <ThreadMainTask+0x880>)
 800a8ca:	609a      	str	r2, [r3, #8]
					erase_init.NbSectors = 1;
 800a8cc:	4b4d      	ldr	r3, [pc, #308]	; (800aa04 <ThreadMainTask+0x880>)
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	60da      	str	r2, [r3, #12]
					erase_init.Banks = 1;
 800a8d2:	4b4c      	ldr	r3, [pc, #304]	; (800aa04 <ThreadMainTask+0x880>)
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	605a      	str	r2, [r3, #4]

					//osThreadSuspendAll();
					taskENTER_CRITICAL();
 800a8d8:	f7fe ff34 	bl	8009744 <vPortEnterCritical>

					HAL_FLASH_Unlock(); // разблокируем запись памяти контроллера
 800a8dc:	f7f7 fdb2 	bl	8002444 <HAL_FLASH_Unlock>

					while( HAL_FLASHEx_Erase(&erase_init, &sector_error) != HAL_OK ) // выполняем очистку указанной страницы памяти
 800a8e0:	bf00      	nop
 800a8e2:	4949      	ldr	r1, [pc, #292]	; (800aa08 <ThreadMainTask+0x884>)
 800a8e4:	4847      	ldr	r0, [pc, #284]	; (800aa04 <ThreadMainTask+0x880>)
 800a8e6:	f7f7 ff0f 	bl	8002708 <HAL_FLASHEx_Erase>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1f8      	bne.n	800a8e2 <ThreadMainTask+0x75e>
					{

					}

					HAL_FLASH_Lock(); // блокируем запись памяти контроллера
 800a8f0:	f7f7 fdca 	bl	8002488 <HAL_FLASH_Lock>

					taskEXIT_CRITICAL();
 800a8f4:	f7fe ff56 	bl	80097a4 <vPortExitCritical>
					//osThreadResumeAll();

					if(sector_error != 0xFFFFFFFF) // если произошла ошибка очистки сектора памяти
 800a8f8:	4b43      	ldr	r3, [pc, #268]	; (800aa08 <ThreadMainTask+0x884>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a900:	d152      	bne.n	800a9a8 <ThreadMainTask+0x824>
					{
						// здесь должен быть обработчик ошибки очистки сектора памяти
					}

					else if( sector_error == 0xFFFFFFFF ) // если не произошло ошибок памяти, то обнуляем регистр и переменную для стирания
 800a902:	4b41      	ldr	r3, [pc, #260]	; (800aa08 <ThreadMainTask+0x884>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90a:	d14d      	bne.n	800a9a8 <ThreadMainTask+0x824>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a90c:	4b38      	ldr	r3, [pc, #224]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f04f 31ff 	mov.w	r1, #4294967295
 800a914:	4618      	mov	r0, r3
 800a916:	f7fb fd29 	bl	800636c <osMutexWait>

						fm25v02_write(2*CLEAR_PAGE_ON_REG, 0x00); // обнуляем регистр и переменную очистки страницы
 800a91a:	2100      	movs	r1, #0
 800a91c:	f44f 7010 	mov.w	r0, #576	; 0x240
 800a920:	f000 fdf6 	bl	800b510 <fm25v02_write>
						fm25v02_write(2*CLEAR_PAGE_ON_REG+1, 0x00);
 800a924:	2100      	movs	r1, #0
 800a926:	f240 2041 	movw	r0, #577	; 0x241
 800a92a:	f000 fdf1 	bl	800b510 <fm25v02_write>
						bootloader_registers.clear_page_on_reg = 0x0000;
 800a92e:	4b32      	ldr	r3, [pc, #200]	; (800a9f8 <ThreadMainTask+0x874>)
 800a930:	2200      	movs	r2, #0
 800a932:	861a      	strh	r2, [r3, #48]	; 0x30

						osMutexRelease(Fm25v02MutexHandle);
 800a934:	4b2e      	ldr	r3, [pc, #184]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fb fd65 	bl	8006408 <osMutexRelease>
					}

				break;
 800a93e:	e033      	b.n	800a9a8 <ThreadMainTask+0x824>
			}

		}

		else if(bootloader_registers.working_mode_reg == 0) // если включен режим работы
 800a940:	4b2d      	ldr	r3, [pc, #180]	; (800a9f8 <ThreadMainTask+0x874>)
 800a942:	8b9b      	ldrh	r3, [r3, #28]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d130      	bne.n	800a9aa <ThreadMainTask+0x826>
		{

			if(bootloader_registers.ready_download_reg != 0x0000)
 800a948:	4b2b      	ldr	r3, [pc, #172]	; (800a9f8 <ThreadMainTask+0x874>)
 800a94a:	8bdb      	ldrh	r3, [r3, #30]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d018      	beq.n	800a982 <ThreadMainTask+0x7fe>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a950:	4b27      	ldr	r3, [pc, #156]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f04f 31ff 	mov.w	r1, #4294967295
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fb fd07 	bl	800636c <osMutexWait>
				fm25v02_write(2*READY_DOWNLOAD_REG, 0x00); // сбрасываем регистр готовности к загрузке прошивки
 800a95e:	2100      	movs	r1, #0
 800a960:	f44f 7008 	mov.w	r0, #544	; 0x220
 800a964:	f000 fdd4 	bl	800b510 <fm25v02_write>
				fm25v02_write(2*READY_DOWNLOAD_REG+1, 0x00);
 800a968:	2100      	movs	r1, #0
 800a96a:	f240 2021 	movw	r0, #545	; 0x221
 800a96e:	f000 fdcf 	bl	800b510 <fm25v02_write>
				bootloader_registers.ready_download_reg = 0x0000;
 800a972:	4b21      	ldr	r3, [pc, #132]	; (800a9f8 <ThreadMainTask+0x874>)
 800a974:	2200      	movs	r2, #0
 800a976:	83da      	strh	r2, [r3, #30]
				osMutexRelease(Fm25v02MutexHandle);
 800a978:	4b1d      	ldr	r3, [pc, #116]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fb fd43 	bl	8006408 <osMutexRelease>
			}

			if(bootloader_registers.jump_attempt_reg < bootloader_registers.max_jump_attempt_reg)
 800a982:	4b1d      	ldr	r3, [pc, #116]	; (800a9f8 <ThreadMainTask+0x874>)
 800a984:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a986:	4b1c      	ldr	r3, [pc, #112]	; (800a9f8 <ThreadMainTask+0x874>)
 800a988:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d20d      	bcs.n	800a9aa <ThreadMainTask+0x826>
			{
				osDelay(5000); // добавил задержку для теста, чтобы устройство успело отправить значение регистра номер 289, после записи
 800a98e:	f241 3088 	movw	r0, #5000	; 0x1388
 800a992:	f7fb fc0a 	bl	80061aa <osDelay>
				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800a996:	4b16      	ldr	r3, [pc, #88]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f04f 31ff 	mov.w	r1, #4294967295
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fb fce4 	bl	800636c <osMutexWait>
				NVIC_SystemReset();
 800a9a4:	f7ff fbd8 	bl	800a158 <__NVIC_SystemReset>
				break;
 800a9a8:	bf00      	nop

			}
		}

		switch(control_registers.reset_control_reg) // удаленная перезагрузка контроллера
 800a9aa:	4b18      	ldr	r3, [pc, #96]	; (800aa0c <ThreadMainTask+0x888>)
 800a9ac:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d12e      	bne.n	800aa10 <ThreadMainTask+0x88c>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800a9b2:	4b0f      	ldr	r3, [pc, #60]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f04f 31ff 	mov.w	r1, #4294967295
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fb fcd6 	bl	800636c <osMutexWait>
				fm25v02_write(2*RESET_CONTROL_REG, 0);
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	f242 105a 	movw	r0, #8538	; 0x215a
 800a9c6:	f000 fda3 	bl	800b510 <fm25v02_write>
				fm25v02_write(2*RESET_CONTROL_REG+1, 0);
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	f242 105b 	movw	r0, #8539	; 0x215b
 800a9d0:	f000 fd9e 	bl	800b510 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800a9d4:	4b06      	ldr	r3, [pc, #24]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fb fd15 	bl	8006408 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800a9de:	4b04      	ldr	r3, [pc, #16]	; (800a9f0 <ThreadMainTask+0x86c>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f04f 31ff 	mov.w	r1, #4294967295
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fb fcc0 	bl	800636c <osMutexWait>
				NVIC_SystemReset();
 800a9ec:	f7ff fbb4 	bl	800a158 <__NVIC_SystemReset>
 800a9f0:	200095d8 	.word	0x200095d8
 800a9f4:	2000995c 	.word	0x2000995c
 800a9f8:	20009db4 	.word	0x20009db4
 800a9fc:	20009970 	.word	0x20009970
 800aa00:	20009b90 	.word	0x20009b90
 800aa04:	20009b78 	.word	0x20009b78
 800aa08:	20009964 	.word	0x20009964
 800aa0c:	20009ee0 	.word	0x20009ee0



		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);

		if( modem_reset_state == 1)
 800aa10:	4b0f      	ldr	r3, [pc, #60]	; (800aa50 <ThreadMainTask+0x8cc>)
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d116      	bne.n	800aa48 <ThreadMainTask+0x8c4>
		{
			osMutexWait(Fm25v02MutexHandle, osWaitForever); // ждем освобождение мьютекса записи в память
 800aa1a:	4b0e      	ldr	r3, [pc, #56]	; (800aa54 <ThreadMainTask+0x8d0>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f04f 31ff 	mov.w	r1, #4294967295
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fb fca2 	bl	800636c <osMutexWait>
			osThreadSuspend(M95TaskHandle);
 800aa28:	4b0b      	ldr	r3, [pc, #44]	; (800aa58 <ThreadMainTask+0x8d4>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fb fec1 	bl	80067b4 <osThreadSuspend>
			modem_reset_state = 0;
 800aa32:	4b07      	ldr	r3, [pc, #28]	; (800aa50 <ThreadMainTask+0x8cc>)
 800aa34:	2200      	movs	r2, #0
 800aa36:	701a      	strb	r2, [r3, #0]
			//AT_QPOWD(0);
			m95_power_off();
 800aa38:	f000 fe9c 	bl	800b774 <m95_power_off>
			HAL_Delay(5000);
 800aa3c:	f241 3088 	movw	r0, #5000	; 0x1388
 800aa40:	f7f6 ff14 	bl	800186c <HAL_Delay>
			NVIC_SystemReset();
 800aa44:	f7ff fb88 	bl	800a158 <__NVIC_SystemReset>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_Delay(1);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
		*/

		osDelay(10);
 800aa48:	200a      	movs	r0, #10
 800aa4a:	f7fb fbae 	bl	80061aa <osDelay>
		if(bootloader_registers.working_mode_reg == 1) // если включен режим обновления программы
 800aa4e:	e44d      	b.n	800a2ec <ThreadMainTask+0x168>
 800aa50:	2000080d 	.word	0x2000080d
 800aa54:	200095d8 	.word	0x200095d8
 800aa58:	200095ac 	.word	0x200095ac

0800aa5c <ThreadModbusPacketTask>:
extern bootloader_register_struct bootloader_registers;



void ThreadModbusPacketTask(void const * argument)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
	uint8_t temp_reg_h;
	uint8_t temp_reg_l;

	osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 800aa64:	4b8a      	ldr	r3, [pc, #552]	; (800ac90 <ThreadModbusPacketTask+0x234>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f04f 31ff 	mov.w	r1, #4294967295
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fb fd41 	bl	80064f4 <osSemaphoreWait>



	for(;;)
	{
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 800aa72:	4b87      	ldr	r3, [pc, #540]	; (800ac90 <ThreadModbusPacketTask+0x234>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f04f 31ff 	mov.w	r1, #4294967295
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fb fd3a 	bl	80064f4 <osSemaphoreWait>

		switch(modbus_buffer[modbus_packet_number1][1]) // проверяем тип поступившей команды MODBUS и формируем соответствующий ответ
 800aa80:	4b84      	ldr	r3, [pc, #528]	; (800ac94 <ThreadModbusPacketTask+0x238>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	4a84      	ldr	r2, [pc, #528]	; (800ac98 <ThreadModbusPacketTask+0x23c>)
 800aa86:	021b      	lsls	r3, r3, #8
 800aa88:	4413      	add	r3, r2
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b03      	cmp	r3, #3
 800aa90:	d003      	beq.n	800aa9a <ThreadModbusPacketTask+0x3e>
 800aa92:	2b10      	cmp	r3, #16
 800aa94:	f000 80b2 	beq.w	800abfc <ThreadModbusPacketTask+0x1a0>
 800aa98:	e267      	b.n	800af6a <ThreadModbusPacketTask+0x50e>
		{
			case(0x03): // чтение регистра

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для чтения
 800aa9a:	4b7e      	ldr	r3, [pc, #504]	; (800ac94 <ThreadModbusPacketTask+0x238>)
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	4a7e      	ldr	r2, [pc, #504]	; (800ac98 <ThreadModbusPacketTask+0x23c>)
 800aaa0:	021b      	lsls	r3, r3, #8
 800aaa2:	4413      	add	r3, r2
 800aaa4:	3302      	adds	r3, #2
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	021b      	lsls	r3, r3, #8
 800aaaa:	b21a      	sxth	r2, r3
 800aaac:	4b79      	ldr	r3, [pc, #484]	; (800ac94 <ThreadModbusPacketTask+0x238>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	4979      	ldr	r1, [pc, #484]	; (800ac98 <ThreadModbusPacketTask+0x23c>)
 800aab2:	021b      	lsls	r3, r3, #8
 800aab4:	440b      	add	r3, r1
 800aab6:	3303      	adds	r3, #3
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	b21b      	sxth	r3, r3
 800aabc:	4313      	orrs	r3, r2
 800aabe:	b21b      	sxth	r3, r3
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	4b76      	ldr	r3, [pc, #472]	; (800ac9c <ThreadModbusPacketTask+0x240>)
 800aac4:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 800aac6:	4b73      	ldr	r3, [pc, #460]	; (800ac94 <ThreadModbusPacketTask+0x238>)
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	4a73      	ldr	r2, [pc, #460]	; (800ac98 <ThreadModbusPacketTask+0x23c>)
 800aacc:	021b      	lsls	r3, r3, #8
 800aace:	4413      	add	r3, r2
 800aad0:	3304      	adds	r3, #4
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	021b      	lsls	r3, r3, #8
 800aad6:	b21a      	sxth	r2, r3
 800aad8:	4b6e      	ldr	r3, [pc, #440]	; (800ac94 <ThreadModbusPacketTask+0x238>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	496e      	ldr	r1, [pc, #440]	; (800ac98 <ThreadModbusPacketTask+0x23c>)
 800aade:	021b      	lsls	r3, r3, #8
 800aae0:	440b      	add	r3, r1
 800aae2:	3305      	adds	r3, #5
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	b21b      	sxth	r3, r3
 800aae8:	4313      	orrs	r3, r2
 800aaea:	b21b      	sxth	r3, r3
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	4b6c      	ldr	r3, [pc, #432]	; (800aca0 <ThreadModbusPacketTask+0x244>)
 800aaf0:	801a      	strh	r2, [r3, #0]

				// обработка пакета чтения 16-битного регистра modbus

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800aaf2:	4b6c      	ldr	r3, [pc, #432]	; (800aca4 <ThreadModbusPacketTask+0x248>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f04f 31ff 	mov.w	r1, #4294967295
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fb fc36 	bl	800636c <osMutexWait>
				fm25v02_fast_read( 2*modbus_address , &buf_out[0] , 2*modbus_size); // читаем из памяти необходимое количество регистров
 800ab00:	4b66      	ldr	r3, [pc, #408]	; (800ac9c <ThreadModbusPacketTask+0x240>)
 800ab02:	881b      	ldrh	r3, [r3, #0]
 800ab04:	005b      	lsls	r3, r3, #1
 800ab06:	b298      	uxth	r0, r3
 800ab08:	4b65      	ldr	r3, [pc, #404]	; (800aca0 <ThreadModbusPacketTask+0x244>)
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	005b      	lsls	r3, r3, #1
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	461a      	mov	r2, r3
 800ab12:	4965      	ldr	r1, [pc, #404]	; (800aca8 <ThreadModbusPacketTask+0x24c>)
 800ab14:	f000 fd6c 	bl	800b5f0 <fm25v02_fast_read>
				osMutexRelease(Fm25v02MutexHandle);
 800ab18:	4b62      	ldr	r3, [pc, #392]	; (800aca4 <ThreadModbusPacketTask+0x248>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7fb fc73 	bl	8006408 <osMutexRelease>

				buf_out1[0] = 0x01;
 800ab22:	4b62      	ldr	r3, [pc, #392]	; (800acac <ThreadModbusPacketTask+0x250>)
 800ab24:	2201      	movs	r2, #1
 800ab26:	701a      	strb	r2, [r3, #0]
				buf_out1[1] = 0x03;
 800ab28:	4b60      	ldr	r3, [pc, #384]	; (800acac <ThreadModbusPacketTask+0x250>)
 800ab2a:	2203      	movs	r2, #3
 800ab2c:	705a      	strb	r2, [r3, #1]
				buf_out1[2] = 2*modbus_size;
 800ab2e:	4b5c      	ldr	r3, [pc, #368]	; (800aca0 <ThreadModbusPacketTask+0x244>)
 800ab30:	881b      	ldrh	r3, [r3, #0]
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	4b5c      	ldr	r3, [pc, #368]	; (800acac <ThreadModbusPacketTask+0x250>)
 800ab3a:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<modbus_size; i++)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	73fb      	strb	r3, [r7, #15]
 800ab40:	e015      	b.n	800ab6e <ThreadModbusPacketTask+0x112>
				{
					buf_out1[2*i+3] = buf_out[2*i];
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	005a      	lsls	r2, r3, #1
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	005b      	lsls	r3, r3, #1
 800ab4a:	3303      	adds	r3, #3
 800ab4c:	4956      	ldr	r1, [pc, #344]	; (800aca8 <ThreadModbusPacketTask+0x24c>)
 800ab4e:	5c89      	ldrb	r1, [r1, r2]
 800ab50:	4a56      	ldr	r2, [pc, #344]	; (800acac <ThreadModbusPacketTask+0x250>)
 800ab52:	54d1      	strb	r1, [r2, r3]
					buf_out1[2*i+4] = buf_out[2*i+1];
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
 800ab56:	005b      	lsls	r3, r3, #1
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
 800ab5c:	3302      	adds	r3, #2
 800ab5e:	005b      	lsls	r3, r3, #1
 800ab60:	4951      	ldr	r1, [pc, #324]	; (800aca8 <ThreadModbusPacketTask+0x24c>)
 800ab62:	5c89      	ldrb	r1, [r1, r2]
 800ab64:	4a51      	ldr	r2, [pc, #324]	; (800acac <ThreadModbusPacketTask+0x250>)
 800ab66:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0; i<modbus_size; i++)
 800ab68:	7bfb      	ldrb	r3, [r7, #15]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	73fb      	strb	r3, [r7, #15]
 800ab6e:	7bfb      	ldrb	r3, [r7, #15]
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	4b4b      	ldr	r3, [pc, #300]	; (800aca0 <ThreadModbusPacketTask+0x244>)
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d3e3      	bcc.n	800ab42 <ThreadModbusPacketTask+0xe6>
				}
				crc_temp = CRC16(&buf_out1[0], 3+2*modbus_size);
 800ab7a:	4b49      	ldr	r3, [pc, #292]	; (800aca0 <ThreadModbusPacketTask+0x244>)
 800ab7c:	881b      	ldrh	r3, [r3, #0]
 800ab7e:	005b      	lsls	r3, r3, #1
 800ab80:	3303      	adds	r3, #3
 800ab82:	4619      	mov	r1, r3
 800ab84:	4849      	ldr	r0, [pc, #292]	; (800acac <ThreadModbusPacketTask+0x250>)
 800ab86:	f003 fdf7 	bl	800e778 <CRC16>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	4a48      	ldr	r2, [pc, #288]	; (800acb0 <ThreadModbusPacketTask+0x254>)
 800ab8e:	6013      	str	r3, [r2, #0]
				buf_out1[2*modbus_size+3] = (uint8_t)(crc_temp&0x00FF);
 800ab90:	4b47      	ldr	r3, [pc, #284]	; (800acb0 <ThreadModbusPacketTask+0x254>)
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	4b42      	ldr	r3, [pc, #264]	; (800aca0 <ThreadModbusPacketTask+0x244>)
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	3303      	adds	r3, #3
 800ab9c:	b2d1      	uxtb	r1, r2
 800ab9e:	4a43      	ldr	r2, [pc, #268]	; (800acac <ThreadModbusPacketTask+0x250>)
 800aba0:	54d1      	strb	r1, [r2, r3]
				buf_out1[2*modbus_size+4] = (uint8_t)((crc_temp>>8)&0x00FF);
 800aba2:	4b43      	ldr	r3, [pc, #268]	; (800acb0 <ThreadModbusPacketTask+0x254>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	0a1a      	lsrs	r2, r3, #8
 800aba8:	4b3d      	ldr	r3, [pc, #244]	; (800aca0 <ThreadModbusPacketTask+0x244>)
 800abaa:	881b      	ldrh	r3, [r3, #0]
 800abac:	3302      	adds	r3, #2
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	b2d1      	uxtb	r1, r2
 800abb2:	4a3e      	ldr	r2, [pc, #248]	; (800acac <ThreadModbusPacketTask+0x250>)
 800abb4:	54d1      	strb	r1, [r2, r3]

				osMutexWait(UartMutexHandle, osWaitForever);
 800abb6:	4b3f      	ldr	r3, [pc, #252]	; (800acb4 <ThreadModbusPacketTask+0x258>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f04f 31ff 	mov.w	r1, #4294967295
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fb fbd4 	bl	800636c <osMutexWait>
				//if( AT_QISEND(&buf_out1[0], 2*modbus_size+5) != AT_OK )
				if( AT_CIPSEND(&buf_out1[0], 2*modbus_size+5) != AT_OK )
 800abc4:	4b36      	ldr	r3, [pc, #216]	; (800aca0 <ThreadModbusPacketTask+0x244>)
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	005b      	lsls	r3, r3, #1
 800abca:	b29b      	uxth	r3, r3
 800abcc:	3305      	adds	r3, #5
 800abce:	b29b      	uxth	r3, r3
 800abd0:	4619      	mov	r1, r3
 800abd2:	4836      	ldr	r0, [pc, #216]	; (800acac <ThreadModbusPacketTask+0x250>)
 800abd4:	f001 fa8c 	bl	800c0f0 <AT_CIPSEND>
				{

				}
				osMutexRelease(UartMutexHandle);
 800abd8:	4b36      	ldr	r3, [pc, #216]	; (800acb4 <ThreadModbusPacketTask+0x258>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4618      	mov	r0, r3
 800abde:	f7fb fc13 	bl	8006408 <osMutexRelease>

				if( modbus_address == VERSION_REG ) // если запрашивается адрес версии прошивки обновляем таймер перезагрузки
 800abe2:	4b2e      	ldr	r3, [pc, #184]	; (800ac9c <ThreadModbusPacketTask+0x240>)
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abea:	f040 81bd 	bne.w	800af68 <ThreadModbusPacketTask+0x50c>
				{
					osTimerStart(Ring_Center_TimerHandle, 90000); // поправил время для таймера перезагрузки
 800abee:	4b32      	ldr	r3, [pc, #200]	; (800acb8 <ThreadModbusPacketTask+0x25c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	4932      	ldr	r1, [pc, #200]	; (800acbc <ThreadModbusPacketTask+0x260>)
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fb fb21 	bl	800623c <osTimerStart>
				}


			break;
 800abfa:	e1b5      	b.n	800af68 <ThreadModbusPacketTask+0x50c>

			case(0x10): // запись нескольких регистров

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для записи
 800abfc:	4b25      	ldr	r3, [pc, #148]	; (800ac94 <ThreadModbusPacketTask+0x238>)
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	4a25      	ldr	r2, [pc, #148]	; (800ac98 <ThreadModbusPacketTask+0x23c>)
 800ac02:	021b      	lsls	r3, r3, #8
 800ac04:	4413      	add	r3, r2
 800ac06:	3302      	adds	r3, #2
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	021b      	lsls	r3, r3, #8
 800ac0c:	b21a      	sxth	r2, r3
 800ac0e:	4b21      	ldr	r3, [pc, #132]	; (800ac94 <ThreadModbusPacketTask+0x238>)
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	4921      	ldr	r1, [pc, #132]	; (800ac98 <ThreadModbusPacketTask+0x23c>)
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	440b      	add	r3, r1
 800ac18:	3303      	adds	r3, #3
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	b21b      	sxth	r3, r3
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	b21b      	sxth	r3, r3
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	4b1d      	ldr	r3, [pc, #116]	; (800ac9c <ThreadModbusPacketTask+0x240>)
 800ac26:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 800ac28:	4b1a      	ldr	r3, [pc, #104]	; (800ac94 <ThreadModbusPacketTask+0x238>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	4a1a      	ldr	r2, [pc, #104]	; (800ac98 <ThreadModbusPacketTask+0x23c>)
 800ac2e:	021b      	lsls	r3, r3, #8
 800ac30:	4413      	add	r3, r2
 800ac32:	3304      	adds	r3, #4
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	021b      	lsls	r3, r3, #8
 800ac38:	b21a      	sxth	r2, r3
 800ac3a:	4b16      	ldr	r3, [pc, #88]	; (800ac94 <ThreadModbusPacketTask+0x238>)
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	4916      	ldr	r1, [pc, #88]	; (800ac98 <ThreadModbusPacketTask+0x23c>)
 800ac40:	021b      	lsls	r3, r3, #8
 800ac42:	440b      	add	r3, r1
 800ac44:	3305      	adds	r3, #5
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	b21b      	sxth	r3, r3
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	b21b      	sxth	r3, r3
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	4b13      	ldr	r3, [pc, #76]	; (800aca0 <ThreadModbusPacketTask+0x244>)
 800ac52:	801a      	strh	r2, [r3, #0]

				if( !( (modbus_address>=0x1000) && (modbus_address<=0x108F) ) && !( (modbus_address<0x1000) && (modbus_address+modbus_size>0x1000) ) ) // модбас адресс не должен находиться в области статусных регистров, а также запись не должна затрагивать статусные регистры
 800ac54:	4b11      	ldr	r3, [pc, #68]	; (800ac9c <ThreadModbusPacketTask+0x240>)
 800ac56:	881b      	ldrh	r3, [r3, #0]
 800ac58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac5c:	d306      	bcc.n	800ac6c <ThreadModbusPacketTask+0x210>
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <ThreadModbusPacketTask+0x240>)
 800ac60:	881b      	ldrh	r3, [r3, #0]
 800ac62:	f241 028f 	movw	r2, #4239	; 0x108f
 800ac66:	4293      	cmp	r3, r2
 800ac68:	f240 8177 	bls.w	800af5a <ThreadModbusPacketTask+0x4fe>
 800ac6c:	4b0b      	ldr	r3, [pc, #44]	; (800ac9c <ThreadModbusPacketTask+0x240>)
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac74:	d209      	bcs.n	800ac8a <ThreadModbusPacketTask+0x22e>
 800ac76:	4b09      	ldr	r3, [pc, #36]	; (800ac9c <ThreadModbusPacketTask+0x240>)
 800ac78:	881b      	ldrh	r3, [r3, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	4b08      	ldr	r3, [pc, #32]	; (800aca0 <ThreadModbusPacketTask+0x244>)
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	4413      	add	r3, r2
 800ac82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac86:	f300 8168 	bgt.w	800af5a <ThreadModbusPacketTask+0x4fe>
				{

					// обработка пакета записи 16-битного регистра modbus

					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	73bb      	strb	r3, [r7, #14]
 800ac8e:	e054      	b.n	800ad3a <ThreadModbusPacketTask+0x2de>
 800ac90:	200095b0 	.word	0x200095b0
 800ac94:	20007f9d 	.word	0x20007f9d
 800ac98:	200080c4 	.word	0x200080c4
 800ac9c:	20009da0 	.word	0x20009da0
 800aca0:	20009da2 	.word	0x20009da2
 800aca4:	200095d8 	.word	0x200095d8
 800aca8:	20009ca0 	.word	0x20009ca0
 800acac:	20009ba0 	.word	0x20009ba0
 800acb0:	20009db0 	.word	0x20009db0
 800acb4:	200094d4 	.word	0x200094d4
 800acb8:	200094d8 	.word	0x200094d8
 800acbc:	00015f90 	.word	0x00015f90
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800acc0:	4bac      	ldr	r3, [pc, #688]	; (800af74 <ThreadModbusPacketTask+0x518>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f04f 31ff 	mov.w	r1, #4294967295
 800acc8:	4618      	mov	r0, r3
 800acca:	f7fb fb4f 	bl	800636c <osMutexWait>
						fm25v02_fast_write( (2*modbus_address+2*a), &modbus_buffer[modbus_packet_number1][7+a*2], 1 );
 800acce:	4baa      	ldr	r3, [pc, #680]	; (800af78 <ThreadModbusPacketTask+0x51c>)
 800acd0:	881b      	ldrh	r3, [r3, #0]
 800acd2:	461a      	mov	r2, r3
 800acd4:	7bbb      	ldrb	r3, [r7, #14]
 800acd6:	4413      	add	r3, r2
 800acd8:	b29b      	uxth	r3, r3
 800acda:	005b      	lsls	r3, r3, #1
 800acdc:	b298      	uxth	r0, r3
 800acde:	4ba7      	ldr	r3, [pc, #668]	; (800af7c <ThreadModbusPacketTask+0x520>)
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	461a      	mov	r2, r3
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
 800ace6:	005b      	lsls	r3, r3, #1
 800ace8:	3307      	adds	r3, #7
 800acea:	0212      	lsls	r2, r2, #8
 800acec:	4413      	add	r3, r2
 800acee:	4aa4      	ldr	r2, [pc, #656]	; (800af80 <ThreadModbusPacketTask+0x524>)
 800acf0:	4413      	add	r3, r2
 800acf2:	2201      	movs	r2, #1
 800acf4:	4619      	mov	r1, r3
 800acf6:	f000 fc57 	bl	800b5a8 <fm25v02_fast_write>
						fm25v02_fast_write( (2*modbus_address+2*a+1), &modbus_buffer[modbus_packet_number1][8+a*2], 1 );
 800acfa:	4b9f      	ldr	r3, [pc, #636]	; (800af78 <ThreadModbusPacketTask+0x51c>)
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
 800ad02:	4413      	add	r3, r2
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	005b      	lsls	r3, r3, #1
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	b298      	uxth	r0, r3
 800ad0e:	4b9b      	ldr	r3, [pc, #620]	; (800af7c <ThreadModbusPacketTask+0x520>)
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
 800ad16:	3304      	adds	r3, #4
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	0212      	lsls	r2, r2, #8
 800ad1c:	4413      	add	r3, r2
 800ad1e:	4a98      	ldr	r2, [pc, #608]	; (800af80 <ThreadModbusPacketTask+0x524>)
 800ad20:	4413      	add	r3, r2
 800ad22:	2201      	movs	r2, #1
 800ad24:	4619      	mov	r1, r3
 800ad26:	f000 fc3f 	bl	800b5a8 <fm25v02_fast_write>
						osMutexRelease(Fm25v02MutexHandle);
 800ad2a:	4b92      	ldr	r3, [pc, #584]	; (800af74 <ThreadModbusPacketTask+0x518>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7fb fb6a 	bl	8006408 <osMutexRelease>
					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 800ad34:	7bbb      	ldrb	r3, [r7, #14]
 800ad36:	3301      	adds	r3, #1
 800ad38:	73bb      	strb	r3, [r7, #14]
 800ad3a:	4b90      	ldr	r3, [pc, #576]	; (800af7c <ThreadModbusPacketTask+0x520>)
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	4a90      	ldr	r2, [pc, #576]	; (800af80 <ThreadModbusPacketTask+0x524>)
 800ad40:	021b      	lsls	r3, r3, #8
 800ad42:	4413      	add	r3, r2
 800ad44:	3306      	adds	r3, #6
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	085b      	lsrs	r3, r3, #1
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	7bba      	ldrb	r2, [r7, #14]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d3b6      	bcc.n	800acc0 <ThreadModbusPacketTask+0x264>
					}

					buf_out1[0] = 0x01;
 800ad52:	4b8c      	ldr	r3, [pc, #560]	; (800af84 <ThreadModbusPacketTask+0x528>)
 800ad54:	2201      	movs	r2, #1
 800ad56:	701a      	strb	r2, [r3, #0]
					buf_out1[1] = 0x10;
 800ad58:	4b8a      	ldr	r3, [pc, #552]	; (800af84 <ThreadModbusPacketTask+0x528>)
 800ad5a:	2210      	movs	r2, #16
 800ad5c:	705a      	strb	r2, [r3, #1]
					buf_out1[2] = modbus_buffer[modbus_packet_number1][2];
 800ad5e:	4b87      	ldr	r3, [pc, #540]	; (800af7c <ThreadModbusPacketTask+0x520>)
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	4a87      	ldr	r2, [pc, #540]	; (800af80 <ThreadModbusPacketTask+0x524>)
 800ad64:	021b      	lsls	r3, r3, #8
 800ad66:	4413      	add	r3, r2
 800ad68:	3302      	adds	r3, #2
 800ad6a:	781a      	ldrb	r2, [r3, #0]
 800ad6c:	4b85      	ldr	r3, [pc, #532]	; (800af84 <ThreadModbusPacketTask+0x528>)
 800ad6e:	709a      	strb	r2, [r3, #2]
					buf_out1[3] = modbus_buffer[modbus_packet_number1][3];
 800ad70:	4b82      	ldr	r3, [pc, #520]	; (800af7c <ThreadModbusPacketTask+0x520>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	4a82      	ldr	r2, [pc, #520]	; (800af80 <ThreadModbusPacketTask+0x524>)
 800ad76:	021b      	lsls	r3, r3, #8
 800ad78:	4413      	add	r3, r2
 800ad7a:	3303      	adds	r3, #3
 800ad7c:	781a      	ldrb	r2, [r3, #0]
 800ad7e:	4b81      	ldr	r3, [pc, #516]	; (800af84 <ThreadModbusPacketTask+0x528>)
 800ad80:	70da      	strb	r2, [r3, #3]
					buf_out1[4] = modbus_buffer[modbus_packet_number1][4];
 800ad82:	4b7e      	ldr	r3, [pc, #504]	; (800af7c <ThreadModbusPacketTask+0x520>)
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	4a7e      	ldr	r2, [pc, #504]	; (800af80 <ThreadModbusPacketTask+0x524>)
 800ad88:	021b      	lsls	r3, r3, #8
 800ad8a:	4413      	add	r3, r2
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	781a      	ldrb	r2, [r3, #0]
 800ad90:	4b7c      	ldr	r3, [pc, #496]	; (800af84 <ThreadModbusPacketTask+0x528>)
 800ad92:	711a      	strb	r2, [r3, #4]
					buf_out1[5] = modbus_buffer[modbus_packet_number1][5];
 800ad94:	4b79      	ldr	r3, [pc, #484]	; (800af7c <ThreadModbusPacketTask+0x520>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	4a79      	ldr	r2, [pc, #484]	; (800af80 <ThreadModbusPacketTask+0x524>)
 800ad9a:	021b      	lsls	r3, r3, #8
 800ad9c:	4413      	add	r3, r2
 800ad9e:	3305      	adds	r3, #5
 800ada0:	781a      	ldrb	r2, [r3, #0]
 800ada2:	4b78      	ldr	r3, [pc, #480]	; (800af84 <ThreadModbusPacketTask+0x528>)
 800ada4:	715a      	strb	r2, [r3, #5]

					crc_temp = CRC16(&buf_out1[0], 6);
 800ada6:	2106      	movs	r1, #6
 800ada8:	4876      	ldr	r0, [pc, #472]	; (800af84 <ThreadModbusPacketTask+0x528>)
 800adaa:	f003 fce5 	bl	800e778 <CRC16>
 800adae:	4603      	mov	r3, r0
 800adb0:	4a75      	ldr	r2, [pc, #468]	; (800af88 <ThreadModbusPacketTask+0x52c>)
 800adb2:	6013      	str	r3, [r2, #0]

					buf_out1[6] = (uint8_t)(crc_temp&0x00FF);
 800adb4:	4b74      	ldr	r3, [pc, #464]	; (800af88 <ThreadModbusPacketTask+0x52c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	4b72      	ldr	r3, [pc, #456]	; (800af84 <ThreadModbusPacketTask+0x528>)
 800adbc:	719a      	strb	r2, [r3, #6]
					buf_out1[7] = (uint8_t)((crc_temp>>8)&0x00FF);
 800adbe:	4b72      	ldr	r3, [pc, #456]	; (800af88 <ThreadModbusPacketTask+0x52c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	0a1b      	lsrs	r3, r3, #8
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	4b6f      	ldr	r3, [pc, #444]	; (800af84 <ThreadModbusPacketTask+0x528>)
 800adc8:	71da      	strb	r2, [r3, #7]


					osMutexWait(Fm25v02MutexHandle, osWaitForever); // читаем значения регистров
 800adca:	4b6a      	ldr	r3, [pc, #424]	; (800af74 <ThreadModbusPacketTask+0x518>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f04f 31ff 	mov.w	r1, #4294967295
 800add2:	4618      	mov	r0, r3
 800add4:	f7fb faca 	bl	800636c <osMutexWait>

					fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h);
 800add8:	f107 030d 	add.w	r3, r7, #13
 800addc:	4619      	mov	r1, r3
 800adde:	f44f 7010 	mov.w	r0, #576	; 0x240
 800ade2:	f000 fb5b 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l);
 800ade6:	f107 030c 	add.w	r3, r7, #12
 800adea:	4619      	mov	r1, r3
 800adec:	f240 2041 	movw	r0, #577	; 0x241
 800adf0:	f000 fb54 	bl	800b49c <fm25v02_read>
					bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800adf4:	7b7b      	ldrb	r3, [r7, #13]
 800adf6:	021b      	lsls	r3, r3, #8
 800adf8:	b21a      	sxth	r2, r3
 800adfa:	7b3b      	ldrb	r3, [r7, #12]
 800adfc:	b21b      	sxth	r3, r3
 800adfe:	4313      	orrs	r3, r2
 800ae00:	b21b      	sxth	r3, r3
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	4b61      	ldr	r3, [pc, #388]	; (800af8c <ThreadModbusPacketTask+0x530>)
 800ae06:	861a      	strh	r2, [r3, #48]	; 0x30

					fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h);
 800ae08:	f107 030d 	add.w	r3, r7, #13
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	f240 2042 	movw	r0, #578	; 0x242
 800ae12:	f000 fb43 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l);
 800ae16:	f107 030c 	add.w	r3, r7, #12
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	f240 2043 	movw	r0, #579	; 0x243
 800ae20:	f000 fb3c 	bl	800b49c <fm25v02_read>
					bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800ae24:	7b7b      	ldrb	r3, [r7, #13]
 800ae26:	021b      	lsls	r3, r3, #8
 800ae28:	b21a      	sxth	r2, r3
 800ae2a:	7b3b      	ldrb	r3, [r7, #12]
 800ae2c:	b21b      	sxth	r3, r3
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	b21b      	sxth	r3, r3
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	4b55      	ldr	r3, [pc, #340]	; (800af8c <ThreadModbusPacketTask+0x530>)
 800ae36:	865a      	strh	r2, [r3, #50]	; 0x32

					fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h);
 800ae38:	f107 030d 	add.w	r3, r7, #13
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	f44f 7011 	mov.w	r0, #580	; 0x244
 800ae42:	f000 fb2b 	bl	800b49c <fm25v02_read>
					fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l);
 800ae46:	f107 030c 	add.w	r3, r7, #12
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	f240 2045 	movw	r0, #581	; 0x245
 800ae50:	f000 fb24 	bl	800b49c <fm25v02_read>
					bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800ae54:	7b7b      	ldrb	r3, [r7, #13]
 800ae56:	021b      	lsls	r3, r3, #8
 800ae58:	b21a      	sxth	r2, r3
 800ae5a:	7b3b      	ldrb	r3, [r7, #12]
 800ae5c:	b21b      	sxth	r3, r3
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	b21b      	sxth	r3, r3
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	4b49      	ldr	r3, [pc, #292]	; (800af8c <ThreadModbusPacketTask+0x530>)
 800ae66:	869a      	strh	r2, [r3, #52]	; 0x34

					osMutexRelease(Fm25v02MutexHandle);
 800ae68:	4b42      	ldr	r3, [pc, #264]	; (800af74 <ThreadModbusPacketTask+0x518>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7fb facb 	bl	8006408 <osMutexRelease>

					while( (bootloader_registers.clear_page_on_reg == 0x0001) || (bootloader_registers.write_array_reg == 0x0001) || (bootloader_registers.read_array_reg == 0x0001) ) // вычитываем регистры пока не будет выполнено стирание страниц, запись или чтение данных из памяти контроллера
 800ae72:	e056      	b.n	800af22 <ThreadModbusPacketTask+0x4c6>
					{

						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ae74:	4b3f      	ldr	r3, [pc, #252]	; (800af74 <ThreadModbusPacketTask+0x518>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f04f 31ff 	mov.w	r1, #4294967295
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7fb fa75 	bl	800636c <osMutexWait>

						fm25v02_read(2*CLEAR_PAGE_ON_REG, &temp_reg_h);
 800ae82:	f107 030d 	add.w	r3, r7, #13
 800ae86:	4619      	mov	r1, r3
 800ae88:	f44f 7010 	mov.w	r0, #576	; 0x240
 800ae8c:	f000 fb06 	bl	800b49c <fm25v02_read>
						fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &temp_reg_l);
 800ae90:	f107 030c 	add.w	r3, r7, #12
 800ae94:	4619      	mov	r1, r3
 800ae96:	f240 2041 	movw	r0, #577	; 0x241
 800ae9a:	f000 faff 	bl	800b49c <fm25v02_read>
						bootloader_registers.clear_page_on_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800ae9e:	7b7b      	ldrb	r3, [r7, #13]
 800aea0:	021b      	lsls	r3, r3, #8
 800aea2:	b21a      	sxth	r2, r3
 800aea4:	7b3b      	ldrb	r3, [r7, #12]
 800aea6:	b21b      	sxth	r3, r3
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	b21b      	sxth	r3, r3
 800aeac:	b29a      	uxth	r2, r3
 800aeae:	4b37      	ldr	r3, [pc, #220]	; (800af8c <ThreadModbusPacketTask+0x530>)
 800aeb0:	861a      	strh	r2, [r3, #48]	; 0x30

						fm25v02_read(2*WRITE_ARRAY_REG, &temp_reg_h);
 800aeb2:	f107 030d 	add.w	r3, r7, #13
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	f240 2042 	movw	r0, #578	; 0x242
 800aebc:	f000 faee 	bl	800b49c <fm25v02_read>
						fm25v02_read(2*WRITE_ARRAY_REG+1, &temp_reg_l);
 800aec0:	f107 030c 	add.w	r3, r7, #12
 800aec4:	4619      	mov	r1, r3
 800aec6:	f240 2043 	movw	r0, #579	; 0x243
 800aeca:	f000 fae7 	bl	800b49c <fm25v02_read>
						bootloader_registers.write_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800aece:	7b7b      	ldrb	r3, [r7, #13]
 800aed0:	021b      	lsls	r3, r3, #8
 800aed2:	b21a      	sxth	r2, r3
 800aed4:	7b3b      	ldrb	r3, [r7, #12]
 800aed6:	b21b      	sxth	r3, r3
 800aed8:	4313      	orrs	r3, r2
 800aeda:	b21b      	sxth	r3, r3
 800aedc:	b29a      	uxth	r2, r3
 800aede:	4b2b      	ldr	r3, [pc, #172]	; (800af8c <ThreadModbusPacketTask+0x530>)
 800aee0:	865a      	strh	r2, [r3, #50]	; 0x32

						fm25v02_read(2*READ_ARRAY_REG, &temp_reg_h);
 800aee2:	f107 030d 	add.w	r3, r7, #13
 800aee6:	4619      	mov	r1, r3
 800aee8:	f44f 7011 	mov.w	r0, #580	; 0x244
 800aeec:	f000 fad6 	bl	800b49c <fm25v02_read>
						fm25v02_read(2*READ_ARRAY_REG+1, &temp_reg_l);
 800aef0:	f107 030c 	add.w	r3, r7, #12
 800aef4:	4619      	mov	r1, r3
 800aef6:	f240 2045 	movw	r0, #581	; 0x245
 800aefa:	f000 facf 	bl	800b49c <fm25v02_read>
						bootloader_registers.read_array_reg = (((uint16_t)temp_reg_h)<<8)|temp_reg_l;
 800aefe:	7b7b      	ldrb	r3, [r7, #13]
 800af00:	021b      	lsls	r3, r3, #8
 800af02:	b21a      	sxth	r2, r3
 800af04:	7b3b      	ldrb	r3, [r7, #12]
 800af06:	b21b      	sxth	r3, r3
 800af08:	4313      	orrs	r3, r2
 800af0a:	b21b      	sxth	r3, r3
 800af0c:	b29a      	uxth	r2, r3
 800af0e:	4b1f      	ldr	r3, [pc, #124]	; (800af8c <ThreadModbusPacketTask+0x530>)
 800af10:	869a      	strh	r2, [r3, #52]	; 0x34

						osMutexRelease(Fm25v02MutexHandle);
 800af12:	4b18      	ldr	r3, [pc, #96]	; (800af74 <ThreadModbusPacketTask+0x518>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4618      	mov	r0, r3
 800af18:	f7fb fa76 	bl	8006408 <osMutexRelease>

						osDelay(1);
 800af1c:	2001      	movs	r0, #1
 800af1e:	f7fb f944 	bl	80061aa <osDelay>
					while( (bootloader_registers.clear_page_on_reg == 0x0001) || (bootloader_registers.write_array_reg == 0x0001) || (bootloader_registers.read_array_reg == 0x0001) ) // вычитываем регистры пока не будет выполнено стирание страниц, запись или чтение данных из памяти контроллера
 800af22:	4b1a      	ldr	r3, [pc, #104]	; (800af8c <ThreadModbusPacketTask+0x530>)
 800af24:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800af26:	2b01      	cmp	r3, #1
 800af28:	d0a4      	beq.n	800ae74 <ThreadModbusPacketTask+0x418>
 800af2a:	4b18      	ldr	r3, [pc, #96]	; (800af8c <ThreadModbusPacketTask+0x530>)
 800af2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d0a0      	beq.n	800ae74 <ThreadModbusPacketTask+0x418>
 800af32:	4b16      	ldr	r3, [pc, #88]	; (800af8c <ThreadModbusPacketTask+0x530>)
 800af34:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800af36:	2b01      	cmp	r3, #1
 800af38:	d09c      	beq.n	800ae74 <ThreadModbusPacketTask+0x418>

					}


					osMutexWait(UartMutexHandle, osWaitForever);
 800af3a:	4b15      	ldr	r3, [pc, #84]	; (800af90 <ThreadModbusPacketTask+0x534>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f04f 31ff 	mov.w	r1, #4294967295
 800af42:	4618      	mov	r0, r3
 800af44:	f7fb fa12 	bl	800636c <osMutexWait>
					//if( AT_QISEND(&buf_out1[0], 8) != AT_OK )
					if( AT_CIPSEND(&buf_out1[0], 8) != AT_OK )
 800af48:	2108      	movs	r1, #8
 800af4a:	480e      	ldr	r0, [pc, #56]	; (800af84 <ThreadModbusPacketTask+0x528>)
 800af4c:	f001 f8d0 	bl	800c0f0 <AT_CIPSEND>
					{

					}
					osMutexRelease(UartMutexHandle);
 800af50:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <ThreadModbusPacketTask+0x534>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4618      	mov	r0, r3
 800af56:	f7fb fa57 	bl	8006408 <osMutexRelease>

				}

				osTimerStart(Ring_Center_TimerHandle, 90000); // поправил время для таймера перезагрузки
 800af5a:	4b0e      	ldr	r3, [pc, #56]	; (800af94 <ThreadModbusPacketTask+0x538>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	490e      	ldr	r1, [pc, #56]	; (800af98 <ThreadModbusPacketTask+0x53c>)
 800af60:	4618      	mov	r0, r3
 800af62:	f7fb f96b 	bl	800623c <osTimerStart>


			break;
 800af66:	e000      	b.n	800af6a <ThreadModbusPacketTask+0x50e>
			break;
 800af68:	bf00      	nop
		}


		osDelay(1);
 800af6a:	2001      	movs	r0, #1
 800af6c:	f7fb f91d 	bl	80061aa <osDelay>
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 800af70:	e57f      	b.n	800aa72 <ThreadModbusPacketTask+0x16>
 800af72:	bf00      	nop
 800af74:	200095d8 	.word	0x200095d8
 800af78:	20009da0 	.word	0x20009da0
 800af7c:	20007f9d 	.word	0x20007f9d
 800af80:	200080c4 	.word	0x200080c4
 800af84:	20009ba0 	.word	0x20009ba0
 800af88:	20009db0 	.word	0x20009db0
 800af8c:	20009db4 	.word	0x20009db4
 800af90:	200094d4 	.word	0x200094d4
 800af94:	200094d8 	.word	0x200094d8
 800af98:	00015f90 	.word	0x00015f90

0800af9c <ThreadModbusTask>:
uint8_t modbus_packet_number = 0;
uint8_t modbus_packet_number1 = 0;


void ThreadModbusTask(void const * argument)
{
 800af9c:	b590      	push	{r4, r7, lr}
 800af9e:	b089      	sub	sp, #36	; 0x24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6178      	str	r0, [r7, #20]
	uint16_t i=0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	83fb      	strh	r3, [r7, #30]
	uint16_t i_max;


	for(;;)
	{
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 800afa8:	4ba1      	ldr	r3, [pc, #644]	; (800b230 <ThreadModbusTask+0x294>)
 800afaa:	6819      	ldr	r1, [r3, #0]
 800afac:	4ca1      	ldr	r4, [pc, #644]	; (800b234 <ThreadModbusTask+0x298>)
 800afae:	463b      	mov	r3, r7
 800afb0:	f04f 32ff 	mov.w	r2, #4294967295
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7fb fb89 	bl	80066cc <osMessageGet>
 800afba:	463b      	mov	r3, r7
 800afbc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800afc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if(ModbusEvent.status == osEventMessage) // если сообщение пришло
 800afc4:	4b9b      	ldr	r3, [pc, #620]	; (800b234 <ThreadModbusTask+0x298>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b10      	cmp	r3, #16
 800afca:	f040 8226 	bne.w	800b41a <ThreadModbusTask+0x47e>
		{

			switch(ModbusEvent.value.v) // проверяем полученное значение из очереди
 800afce:	4b99      	ldr	r3, [pc, #612]	; (800b234 <ThreadModbusTask+0x298>)
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	2b0f      	cmp	r3, #15
 800afd6:	f200 817f 	bhi.w	800b2d8 <ThreadModbusTask+0x33c>
 800afda:	a201      	add	r2, pc, #4	; (adr r2, 800afe0 <ThreadModbusTask+0x44>)
 800afdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe0:	0800b021 	.word	0x0800b021
 800afe4:	0800b2d9 	.word	0x0800b2d9
 800afe8:	0800b0c9 	.word	0x0800b0c9
 800afec:	0800b2d9 	.word	0x0800b2d9
 800aff0:	0800b2d9 	.word	0x0800b2d9
 800aff4:	0800b175 	.word	0x0800b175
 800aff8:	0800b2d9 	.word	0x0800b2d9
 800affc:	0800b2d9 	.word	0x0800b2d9
 800b000:	0800b2d9 	.word	0x0800b2d9
 800b004:	0800b2d9 	.word	0x0800b2d9
 800b008:	0800b2d9 	.word	0x0800b2d9
 800b00c:	0800b2d9 	.word	0x0800b2d9
 800b010:	0800b2d9 	.word	0x0800b2d9
 800b014:	0800b2d9 	.word	0x0800b2d9
 800b018:	0800b2d9 	.word	0x0800b2d9
 800b01c:	0800b21f 	.word	0x0800b21f
			{
				case(0x01):
					if(i==0)
 800b020:	8bfb      	ldrh	r3, [r7, #30]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d110      	bne.n	800b048 <ThreadModbusTask+0xac>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b026:	4b83      	ldr	r3, [pc, #524]	; (800b234 <ThreadModbusTask+0x298>)
 800b028:	6859      	ldr	r1, [r3, #4]
 800b02a:	4b83      	ldr	r3, [pc, #524]	; (800b238 <ThreadModbusTask+0x29c>)
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	8bfb      	ldrh	r3, [r7, #30]
 800b032:	b2c8      	uxtb	r0, r1
 800b034:	4981      	ldr	r1, [pc, #516]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b036:	0212      	lsls	r2, r2, #8
 800b038:	440a      	add	r2, r1
 800b03a:	4413      	add	r3, r2
 800b03c:	4602      	mov	r2, r0
 800b03e:	701a      	strb	r2, [r3, #0]
						i++;
 800b040:	8bfb      	ldrh	r3, [r7, #30]
 800b042:	3301      	adds	r3, #1
 800b044:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b046:	e18e      	b.n	800b366 <ThreadModbusTask+0x3ca>
					else if(i==1)
 800b048:	8bfb      	ldrh	r3, [r7, #30]
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d104      	bne.n	800b058 <ThreadModbusTask+0xbc>
						i = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b052:	2300      	movs	r3, #0
 800b054:	83bb      	strh	r3, [r7, #28]
				break;
 800b056:	e186      	b.n	800b366 <ThreadModbusTask+0x3ca>
					else if(i>1)
 800b058:	8bfb      	ldrh	r3, [r7, #30]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	f240 8183 	bls.w	800b366 <ThreadModbusTask+0x3ca>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b060:	8bfb      	ldrh	r3, [r7, #30]
 800b062:	2b06      	cmp	r3, #6
 800b064:	d11f      	bne.n	800b0a6 <ThreadModbusTask+0x10a>
 800b066:	4b74      	ldr	r3, [pc, #464]	; (800b238 <ThreadModbusTask+0x29c>)
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	4a74      	ldr	r2, [pc, #464]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b06c:	021b      	lsls	r3, r3, #8
 800b06e:	4413      	add	r3, r2
 800b070:	3301      	adds	r3, #1
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b10      	cmp	r3, #16
 800b076:	d116      	bne.n	800b0a6 <ThreadModbusTask+0x10a>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b078:	4b6e      	ldr	r3, [pc, #440]	; (800b234 <ThreadModbusTask+0x298>)
 800b07a:	6859      	ldr	r1, [r3, #4]
 800b07c:	4b6e      	ldr	r3, [pc, #440]	; (800b238 <ThreadModbusTask+0x29c>)
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	461a      	mov	r2, r3
 800b082:	8bfb      	ldrh	r3, [r7, #30]
 800b084:	b2c8      	uxtb	r0, r1
 800b086:	496d      	ldr	r1, [pc, #436]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b088:	0212      	lsls	r2, r2, #8
 800b08a:	440a      	add	r2, r1
 800b08c:	4413      	add	r3, r2
 800b08e:	4602      	mov	r2, r0
 800b090:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800b092:	4b68      	ldr	r3, [pc, #416]	; (800b234 <ThreadModbusTask+0x298>)
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	b2db      	uxtb	r3, r3
 800b098:	b29b      	uxth	r3, r3
 800b09a:	3309      	adds	r3, #9
 800b09c:	83bb      	strh	r3, [r7, #28]
							i++;
 800b09e:	8bfb      	ldrh	r3, [r7, #30]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	83fb      	strh	r3, [r7, #30]
				break;
 800b0a4:	e15f      	b.n	800b366 <ThreadModbusTask+0x3ca>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b0a6:	4b63      	ldr	r3, [pc, #396]	; (800b234 <ThreadModbusTask+0x298>)
 800b0a8:	6859      	ldr	r1, [r3, #4]
 800b0aa:	4b63      	ldr	r3, [pc, #396]	; (800b238 <ThreadModbusTask+0x29c>)
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	8bfb      	ldrh	r3, [r7, #30]
 800b0b2:	b2c8      	uxtb	r0, r1
 800b0b4:	4961      	ldr	r1, [pc, #388]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b0b6:	0212      	lsls	r2, r2, #8
 800b0b8:	440a      	add	r2, r1
 800b0ba:	4413      	add	r3, r2
 800b0bc:	4602      	mov	r2, r0
 800b0be:	701a      	strb	r2, [r3, #0]
							i++;
 800b0c0:	8bfb      	ldrh	r3, [r7, #30]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	83fb      	strh	r3, [r7, #30]
				break;
 800b0c6:	e14e      	b.n	800b366 <ThreadModbusTask+0x3ca>

				case(0x03):
					if(i==0)
 800b0c8:	8bfb      	ldrh	r3, [r7, #30]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d104      	bne.n	800b0d8 <ThreadModbusTask+0x13c>
					{
						i = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b0d6:	e148      	b.n	800b36a <ThreadModbusTask+0x3ce>
					else if(i==1)
 800b0d8:	8bfb      	ldrh	r3, [r7, #30]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d112      	bne.n	800b104 <ThreadModbusTask+0x168>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b0de:	4b55      	ldr	r3, [pc, #340]	; (800b234 <ThreadModbusTask+0x298>)
 800b0e0:	6859      	ldr	r1, [r3, #4]
 800b0e2:	4b55      	ldr	r3, [pc, #340]	; (800b238 <ThreadModbusTask+0x29c>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	461a      	mov	r2, r3
 800b0e8:	8bfb      	ldrh	r3, [r7, #30]
 800b0ea:	b2c8      	uxtb	r0, r1
 800b0ec:	4953      	ldr	r1, [pc, #332]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b0ee:	0212      	lsls	r2, r2, #8
 800b0f0:	440a      	add	r2, r1
 800b0f2:	4413      	add	r3, r2
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	701a      	strb	r2, [r3, #0]
						i++;
 800b0f8:	8bfb      	ldrh	r3, [r7, #30]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 800b0fe:	2308      	movs	r3, #8
 800b100:	83bb      	strh	r3, [r7, #28]
				break;
 800b102:	e132      	b.n	800b36a <ThreadModbusTask+0x3ce>
					else if(i>1)
 800b104:	8bfb      	ldrh	r3, [r7, #30]
 800b106:	2b01      	cmp	r3, #1
 800b108:	f240 812f 	bls.w	800b36a <ThreadModbusTask+0x3ce>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b10c:	8bfb      	ldrh	r3, [r7, #30]
 800b10e:	2b06      	cmp	r3, #6
 800b110:	d11f      	bne.n	800b152 <ThreadModbusTask+0x1b6>
 800b112:	4b49      	ldr	r3, [pc, #292]	; (800b238 <ThreadModbusTask+0x29c>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	4a49      	ldr	r2, [pc, #292]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b118:	021b      	lsls	r3, r3, #8
 800b11a:	4413      	add	r3, r2
 800b11c:	3301      	adds	r3, #1
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	2b10      	cmp	r3, #16
 800b122:	d116      	bne.n	800b152 <ThreadModbusTask+0x1b6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b124:	4b43      	ldr	r3, [pc, #268]	; (800b234 <ThreadModbusTask+0x298>)
 800b126:	6859      	ldr	r1, [r3, #4]
 800b128:	4b43      	ldr	r3, [pc, #268]	; (800b238 <ThreadModbusTask+0x29c>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	461a      	mov	r2, r3
 800b12e:	8bfb      	ldrh	r3, [r7, #30]
 800b130:	b2c8      	uxtb	r0, r1
 800b132:	4942      	ldr	r1, [pc, #264]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b134:	0212      	lsls	r2, r2, #8
 800b136:	440a      	add	r2, r1
 800b138:	4413      	add	r3, r2
 800b13a:	4602      	mov	r2, r0
 800b13c:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800b13e:	4b3d      	ldr	r3, [pc, #244]	; (800b234 <ThreadModbusTask+0x298>)
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	b2db      	uxtb	r3, r3
 800b144:	b29b      	uxth	r3, r3
 800b146:	3309      	adds	r3, #9
 800b148:	83bb      	strh	r3, [r7, #28]
							i++;
 800b14a:	8bfb      	ldrh	r3, [r7, #30]
 800b14c:	3301      	adds	r3, #1
 800b14e:	83fb      	strh	r3, [r7, #30]
				break;
 800b150:	e10b      	b.n	800b36a <ThreadModbusTask+0x3ce>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b152:	4b38      	ldr	r3, [pc, #224]	; (800b234 <ThreadModbusTask+0x298>)
 800b154:	6859      	ldr	r1, [r3, #4]
 800b156:	4b38      	ldr	r3, [pc, #224]	; (800b238 <ThreadModbusTask+0x29c>)
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	461a      	mov	r2, r3
 800b15c:	8bfb      	ldrh	r3, [r7, #30]
 800b15e:	b2c8      	uxtb	r0, r1
 800b160:	4936      	ldr	r1, [pc, #216]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b162:	0212      	lsls	r2, r2, #8
 800b164:	440a      	add	r2, r1
 800b166:	4413      	add	r3, r2
 800b168:	4602      	mov	r2, r0
 800b16a:	701a      	strb	r2, [r3, #0]
							i++;
 800b16c:	8bfb      	ldrh	r3, [r7, #30]
 800b16e:	3301      	adds	r3, #1
 800b170:	83fb      	strh	r3, [r7, #30]
				break;
 800b172:	e0fa      	b.n	800b36a <ThreadModbusTask+0x3ce>

				case(0x06):
					if(i==0)
 800b174:	8bfb      	ldrh	r3, [r7, #30]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d104      	bne.n	800b184 <ThreadModbusTask+0x1e8>
					{
						i = 0;
 800b17a:	2300      	movs	r3, #0
 800b17c:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	83bb      	strh	r3, [r7, #28]
 800b182:	e014      	b.n	800b1ae <ThreadModbusTask+0x212>
					}
					else if(i==1)
 800b184:	8bfb      	ldrh	r3, [r7, #30]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d111      	bne.n	800b1ae <ThreadModbusTask+0x212>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b18a:	4b2a      	ldr	r3, [pc, #168]	; (800b234 <ThreadModbusTask+0x298>)
 800b18c:	6859      	ldr	r1, [r3, #4]
 800b18e:	4b2a      	ldr	r3, [pc, #168]	; (800b238 <ThreadModbusTask+0x29c>)
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	461a      	mov	r2, r3
 800b194:	8bfb      	ldrh	r3, [r7, #30]
 800b196:	b2c8      	uxtb	r0, r1
 800b198:	4928      	ldr	r1, [pc, #160]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b19a:	0212      	lsls	r2, r2, #8
 800b19c:	440a      	add	r2, r1
 800b19e:	4413      	add	r3, r2
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	701a      	strb	r2, [r3, #0]
						i++;
 800b1a4:	8bfb      	ldrh	r3, [r7, #30]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 800b1aa:	2308      	movs	r3, #8
 800b1ac:	83bb      	strh	r3, [r7, #28]
					}
					if(i>1)
 800b1ae:	8bfb      	ldrh	r3, [r7, #30]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	f240 80dc 	bls.w	800b36e <ThreadModbusTask+0x3d2>
					{
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b1b6:	8bfb      	ldrh	r3, [r7, #30]
 800b1b8:	2b06      	cmp	r3, #6
 800b1ba:	d11f      	bne.n	800b1fc <ThreadModbusTask+0x260>
 800b1bc:	4b1e      	ldr	r3, [pc, #120]	; (800b238 <ThreadModbusTask+0x29c>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	4a1e      	ldr	r2, [pc, #120]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b1c2:	021b      	lsls	r3, r3, #8
 800b1c4:	4413      	add	r3, r2
 800b1c6:	3301      	adds	r3, #1
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	2b10      	cmp	r3, #16
 800b1cc:	d116      	bne.n	800b1fc <ThreadModbusTask+0x260>
						{
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b1ce:	4b19      	ldr	r3, [pc, #100]	; (800b234 <ThreadModbusTask+0x298>)
 800b1d0:	6859      	ldr	r1, [r3, #4]
 800b1d2:	4b19      	ldr	r3, [pc, #100]	; (800b238 <ThreadModbusTask+0x29c>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	8bfb      	ldrh	r3, [r7, #30]
 800b1da:	b2c8      	uxtb	r0, r1
 800b1dc:	4917      	ldr	r1, [pc, #92]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b1de:	0212      	lsls	r2, r2, #8
 800b1e0:	440a      	add	r2, r1
 800b1e2:	4413      	add	r3, r2
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800b1e8:	4b12      	ldr	r3, [pc, #72]	; (800b234 <ThreadModbusTask+0x298>)
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	3309      	adds	r3, #9
 800b1f2:	83bb      	strh	r3, [r7, #28]
							i++;
 800b1f4:	8bfb      	ldrh	r3, [r7, #30]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b1fa:	e0b8      	b.n	800b36e <ThreadModbusTask+0x3d2>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b1fc:	4b0d      	ldr	r3, [pc, #52]	; (800b234 <ThreadModbusTask+0x298>)
 800b1fe:	6859      	ldr	r1, [r3, #4]
 800b200:	4b0d      	ldr	r3, [pc, #52]	; (800b238 <ThreadModbusTask+0x29c>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	461a      	mov	r2, r3
 800b206:	8bfb      	ldrh	r3, [r7, #30]
 800b208:	b2c8      	uxtb	r0, r1
 800b20a:	490c      	ldr	r1, [pc, #48]	; (800b23c <ThreadModbusTask+0x2a0>)
 800b20c:	0212      	lsls	r2, r2, #8
 800b20e:	440a      	add	r2, r1
 800b210:	4413      	add	r3, r2
 800b212:	4602      	mov	r2, r0
 800b214:	701a      	strb	r2, [r3, #0]
							i++;
 800b216:	8bfb      	ldrh	r3, [r7, #30]
 800b218:	3301      	adds	r3, #1
 800b21a:	83fb      	strh	r3, [r7, #30]
				break;
 800b21c:	e0a7      	b.n	800b36e <ThreadModbusTask+0x3d2>

				case(0x10):
					if(i==0)
 800b21e:	8bfb      	ldrh	r3, [r7, #30]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d10d      	bne.n	800b240 <ThreadModbusTask+0x2a4>
					{
						i = 0;
 800b224:	2300      	movs	r3, #0
 800b226:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b22c:	e0a1      	b.n	800b372 <ThreadModbusTask+0x3d6>
 800b22e:	bf00      	nop
 800b230:	200080c0 	.word	0x200080c0
 800b234:	20009da4 	.word	0x20009da4
 800b238:	20007f9c 	.word	0x20007f9c
 800b23c:	200080c4 	.word	0x200080c4
					else if(i==1)
 800b240:	8bfb      	ldrh	r3, [r7, #30]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d110      	bne.n	800b268 <ThreadModbusTask+0x2cc>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b246:	4b77      	ldr	r3, [pc, #476]	; (800b424 <ThreadModbusTask+0x488>)
 800b248:	6859      	ldr	r1, [r3, #4]
 800b24a:	4b77      	ldr	r3, [pc, #476]	; (800b428 <ThreadModbusTask+0x48c>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	8bfb      	ldrh	r3, [r7, #30]
 800b252:	b2c8      	uxtb	r0, r1
 800b254:	4975      	ldr	r1, [pc, #468]	; (800b42c <ThreadModbusTask+0x490>)
 800b256:	0212      	lsls	r2, r2, #8
 800b258:	440a      	add	r2, r1
 800b25a:	4413      	add	r3, r2
 800b25c:	4602      	mov	r2, r0
 800b25e:	701a      	strb	r2, [r3, #0]
						i++;
 800b260:	8bfb      	ldrh	r3, [r7, #30]
 800b262:	3301      	adds	r3, #1
 800b264:	83fb      	strh	r3, [r7, #30]
				break;
 800b266:	e084      	b.n	800b372 <ThreadModbusTask+0x3d6>
					else if(i>1)
 800b268:	8bfb      	ldrh	r3, [r7, #30]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	f240 8081 	bls.w	800b372 <ThreadModbusTask+0x3d6>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b270:	8bfb      	ldrh	r3, [r7, #30]
 800b272:	2b06      	cmp	r3, #6
 800b274:	d11f      	bne.n	800b2b6 <ThreadModbusTask+0x31a>
 800b276:	4b6c      	ldr	r3, [pc, #432]	; (800b428 <ThreadModbusTask+0x48c>)
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	4a6c      	ldr	r2, [pc, #432]	; (800b42c <ThreadModbusTask+0x490>)
 800b27c:	021b      	lsls	r3, r3, #8
 800b27e:	4413      	add	r3, r2
 800b280:	3301      	adds	r3, #1
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	2b10      	cmp	r3, #16
 800b286:	d116      	bne.n	800b2b6 <ThreadModbusTask+0x31a>
								modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b288:	4b66      	ldr	r3, [pc, #408]	; (800b424 <ThreadModbusTask+0x488>)
 800b28a:	6859      	ldr	r1, [r3, #4]
 800b28c:	4b66      	ldr	r3, [pc, #408]	; (800b428 <ThreadModbusTask+0x48c>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	461a      	mov	r2, r3
 800b292:	8bfb      	ldrh	r3, [r7, #30]
 800b294:	b2c8      	uxtb	r0, r1
 800b296:	4965      	ldr	r1, [pc, #404]	; (800b42c <ThreadModbusTask+0x490>)
 800b298:	0212      	lsls	r2, r2, #8
 800b29a:	440a      	add	r2, r1
 800b29c:	4413      	add	r3, r2
 800b29e:	4602      	mov	r2, r0
 800b2a0:	701a      	strb	r2, [r3, #0]
								i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800b2a2:	4b60      	ldr	r3, [pc, #384]	; (800b424 <ThreadModbusTask+0x488>)
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	3309      	adds	r3, #9
 800b2ac:	83bb      	strh	r3, [r7, #28]
								i++;
 800b2ae:	8bfb      	ldrh	r3, [r7, #30]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	83fb      	strh	r3, [r7, #30]
				break;
 800b2b4:	e05d      	b.n	800b372 <ThreadModbusTask+0x3d6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b2b6:	4b5b      	ldr	r3, [pc, #364]	; (800b424 <ThreadModbusTask+0x488>)
 800b2b8:	6859      	ldr	r1, [r3, #4]
 800b2ba:	4b5b      	ldr	r3, [pc, #364]	; (800b428 <ThreadModbusTask+0x48c>)
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	8bfb      	ldrh	r3, [r7, #30]
 800b2c2:	b2c8      	uxtb	r0, r1
 800b2c4:	4959      	ldr	r1, [pc, #356]	; (800b42c <ThreadModbusTask+0x490>)
 800b2c6:	0212      	lsls	r2, r2, #8
 800b2c8:	440a      	add	r2, r1
 800b2ca:	4413      	add	r3, r2
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	701a      	strb	r2, [r3, #0]
							i++;
 800b2d0:	8bfb      	ldrh	r3, [r7, #30]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	83fb      	strh	r3, [r7, #30]
				break;
 800b2d6:	e04c      	b.n	800b372 <ThreadModbusTask+0x3d6>

				default:
					if(i==0)
 800b2d8:	8bfb      	ldrh	r3, [r7, #30]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d104      	bne.n	800b2e8 <ThreadModbusTask+0x34c>
					{
						i = 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 800b2e6:	e046      	b.n	800b376 <ThreadModbusTask+0x3da>
					else if(i==1)
 800b2e8:	8bfb      	ldrh	r3, [r7, #30]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d104      	bne.n	800b2f8 <ThreadModbusTask+0x35c>
						i = 0;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	83bb      	strh	r3, [r7, #28]
				break;
 800b2f6:	e03e      	b.n	800b376 <ThreadModbusTask+0x3da>
					else if(i>1)
 800b2f8:	8bfb      	ldrh	r3, [r7, #30]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d93b      	bls.n	800b376 <ThreadModbusTask+0x3da>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 800b2fe:	8bfb      	ldrh	r3, [r7, #30]
 800b300:	2b06      	cmp	r3, #6
 800b302:	d11f      	bne.n	800b344 <ThreadModbusTask+0x3a8>
 800b304:	4b48      	ldr	r3, [pc, #288]	; (800b428 <ThreadModbusTask+0x48c>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	4a48      	ldr	r2, [pc, #288]	; (800b42c <ThreadModbusTask+0x490>)
 800b30a:	021b      	lsls	r3, r3, #8
 800b30c:	4413      	add	r3, r2
 800b30e:	3301      	adds	r3, #1
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	2b10      	cmp	r3, #16
 800b314:	d116      	bne.n	800b344 <ThreadModbusTask+0x3a8>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b316:	4b43      	ldr	r3, [pc, #268]	; (800b424 <ThreadModbusTask+0x488>)
 800b318:	6859      	ldr	r1, [r3, #4]
 800b31a:	4b43      	ldr	r3, [pc, #268]	; (800b428 <ThreadModbusTask+0x48c>)
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	461a      	mov	r2, r3
 800b320:	8bfb      	ldrh	r3, [r7, #30]
 800b322:	b2c8      	uxtb	r0, r1
 800b324:	4941      	ldr	r1, [pc, #260]	; (800b42c <ThreadModbusTask+0x490>)
 800b326:	0212      	lsls	r2, r2, #8
 800b328:	440a      	add	r2, r1
 800b32a:	4413      	add	r3, r2
 800b32c:	4602      	mov	r2, r0
 800b32e:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 800b330:	4b3c      	ldr	r3, [pc, #240]	; (800b424 <ThreadModbusTask+0x488>)
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	b2db      	uxtb	r3, r3
 800b336:	b29b      	uxth	r3, r3
 800b338:	3309      	adds	r3, #9
 800b33a:	83bb      	strh	r3, [r7, #28]
							i++;
 800b33c:	8bfb      	ldrh	r3, [r7, #30]
 800b33e:	3301      	adds	r3, #1
 800b340:	83fb      	strh	r3, [r7, #30]
				break;
 800b342:	e018      	b.n	800b376 <ThreadModbusTask+0x3da>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 800b344:	4b37      	ldr	r3, [pc, #220]	; (800b424 <ThreadModbusTask+0x488>)
 800b346:	6859      	ldr	r1, [r3, #4]
 800b348:	4b37      	ldr	r3, [pc, #220]	; (800b428 <ThreadModbusTask+0x48c>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	461a      	mov	r2, r3
 800b34e:	8bfb      	ldrh	r3, [r7, #30]
 800b350:	b2c8      	uxtb	r0, r1
 800b352:	4936      	ldr	r1, [pc, #216]	; (800b42c <ThreadModbusTask+0x490>)
 800b354:	0212      	lsls	r2, r2, #8
 800b356:	440a      	add	r2, r1
 800b358:	4413      	add	r3, r2
 800b35a:	4602      	mov	r2, r0
 800b35c:	701a      	strb	r2, [r3, #0]
							i++;
 800b35e:	8bfb      	ldrh	r3, [r7, #30]
 800b360:	3301      	adds	r3, #1
 800b362:	83fb      	strh	r3, [r7, #30]
				break;
 800b364:	e007      	b.n	800b376 <ThreadModbusTask+0x3da>
				break;
 800b366:	bf00      	nop
 800b368:	e006      	b.n	800b378 <ThreadModbusTask+0x3dc>
				break;
 800b36a:	bf00      	nop
 800b36c:	e004      	b.n	800b378 <ThreadModbusTask+0x3dc>
				break;
 800b36e:	bf00      	nop
 800b370:	e002      	b.n	800b378 <ThreadModbusTask+0x3dc>
				break;
 800b372:	bf00      	nop
 800b374:	e000      	b.n	800b378 <ThreadModbusTask+0x3dc>
				break;
 800b376:	bf00      	nop
			}
			if( (i >= i_max) && (i != 0) && (i_max != 0) ) // если число принятых байт соответствует длине соответствующей команды
 800b378:	8bfa      	ldrh	r2, [r7, #30]
 800b37a:	8bbb      	ldrh	r3, [r7, #28]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d34c      	bcc.n	800b41a <ThreadModbusTask+0x47e>
 800b380:	8bfb      	ldrh	r3, [r7, #30]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d049      	beq.n	800b41a <ThreadModbusTask+0x47e>
 800b386:	8bbb      	ldrh	r3, [r7, #28]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d046      	beq.n	800b41a <ThreadModbusTask+0x47e>
			{
				crc_temp = CRC16(&modbus_buffer[modbus_packet_number][0], i_max-2); // считаем контрольную сумму принятого пакета
 800b38c:	4b26      	ldr	r3, [pc, #152]	; (800b428 <ThreadModbusTask+0x48c>)
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	021b      	lsls	r3, r3, #8
 800b392:	4a26      	ldr	r2, [pc, #152]	; (800b42c <ThreadModbusTask+0x490>)
 800b394:	441a      	add	r2, r3
 800b396:	8bbb      	ldrh	r3, [r7, #28]
 800b398:	3b02      	subs	r3, #2
 800b39a:	4619      	mov	r1, r3
 800b39c:	4610      	mov	r0, r2
 800b39e:	f003 f9eb 	bl	800e778 <CRC16>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	4a22      	ldr	r2, [pc, #136]	; (800b430 <ThreadModbusTask+0x494>)
 800b3a6:	6013      	str	r3, [r2, #0]
				if( ( ((crc_temp>>8)&0x00FF) == modbus_buffer[modbus_packet_number][i_max-1] ) && ( (crc_temp&0x00FF) == modbus_buffer[modbus_packet_number][i_max-2]) ) // проверяем контрольную сумму принятого пакета
 800b3a8:	4b21      	ldr	r3, [pc, #132]	; (800b430 <ThreadModbusTask+0x494>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	0a1b      	lsrs	r3, r3, #8
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	4a1d      	ldr	r2, [pc, #116]	; (800b428 <ThreadModbusTask+0x48c>)
 800b3b2:	7812      	ldrb	r2, [r2, #0]
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	8bba      	ldrh	r2, [r7, #28]
 800b3b8:	3a01      	subs	r2, #1
 800b3ba:	481c      	ldr	r0, [pc, #112]	; (800b42c <ThreadModbusTask+0x490>)
 800b3bc:	0209      	lsls	r1, r1, #8
 800b3be:	4401      	add	r1, r0
 800b3c0:	440a      	add	r2, r1
 800b3c2:	7812      	ldrb	r2, [r2, #0]
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d124      	bne.n	800b412 <ThreadModbusTask+0x476>
 800b3c8:	4b19      	ldr	r3, [pc, #100]	; (800b430 <ThreadModbusTask+0x494>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	4a16      	ldr	r2, [pc, #88]	; (800b428 <ThreadModbusTask+0x48c>)
 800b3d0:	7812      	ldrb	r2, [r2, #0]
 800b3d2:	4611      	mov	r1, r2
 800b3d4:	8bba      	ldrh	r2, [r7, #28]
 800b3d6:	3a02      	subs	r2, #2
 800b3d8:	4814      	ldr	r0, [pc, #80]	; (800b42c <ThreadModbusTask+0x490>)
 800b3da:	0209      	lsls	r1, r1, #8
 800b3dc:	4401      	add	r1, r0
 800b3de:	440a      	add	r2, r1
 800b3e0:	7812      	ldrb	r2, [r2, #0]
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d115      	bne.n	800b412 <ThreadModbusTask+0x476>
				{
					modbus_packet_number1 = modbus_packet_number;
 800b3e6:	4b10      	ldr	r3, [pc, #64]	; (800b428 <ThreadModbusTask+0x48c>)
 800b3e8:	781a      	ldrb	r2, [r3, #0]
 800b3ea:	4b12      	ldr	r3, [pc, #72]	; (800b434 <ThreadModbusTask+0x498>)
 800b3ec:	701a      	strb	r2, [r3, #0]
					modbus_packet_number++;
 800b3ee:	4b0e      	ldr	r3, [pc, #56]	; (800b428 <ThreadModbusTask+0x48c>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	4b0c      	ldr	r3, [pc, #48]	; (800b428 <ThreadModbusTask+0x48c>)
 800b3f8:	701a      	strb	r2, [r3, #0]
					if( modbus_packet_number >= 20)
 800b3fa:	4b0b      	ldr	r3, [pc, #44]	; (800b428 <ThreadModbusTask+0x48c>)
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	2b13      	cmp	r3, #19
 800b400:	d902      	bls.n	800b408 <ThreadModbusTask+0x46c>
					{
						modbus_packet_number = 0;
 800b402:	4b09      	ldr	r3, [pc, #36]	; (800b428 <ThreadModbusTask+0x48c>)
 800b404:	2200      	movs	r2, #0
 800b406:	701a      	strb	r2, [r3, #0]
					}

					osSemaphoreRelease(ModbusPacketReceiveHandle);
 800b408:	4b0b      	ldr	r3, [pc, #44]	; (800b438 <ThreadModbusTask+0x49c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fb f8bf 	bl	8006590 <osSemaphoreRelease>
				}

				i = 0;     // обнуляем значение текущего принятого байта
 800b412:	2300      	movs	r3, #0
 800b414:	83fb      	strh	r3, [r7, #30]
				i_max = 0; // обнуляем максимальное значение принятого байта
 800b416:	2300      	movs	r3, #0
 800b418:	83bb      	strh	r3, [r7, #28]
		}




		osDelay(1);
 800b41a:	2001      	movs	r0, #1
 800b41c:	f7fa fec5 	bl	80061aa <osDelay>
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 800b420:	e5c2      	b.n	800afa8 <ThreadModbusTask+0xc>
 800b422:	bf00      	nop
 800b424:	20009da4 	.word	0x20009da4
 800b428:	20007f9c 	.word	0x20007f9c
 800b42c:	200080c4 	.word	0x200080c4
 800b430:	20009db0 	.word	0x20009db0
 800b434:	20007f9d 	.word	0x20007f9d
 800b438:	200095b0 	.word	0x200095b0

0800b43c <ThreadReadRegistersTask>:
extern osThreadId M95TaskHandle;
extern osThreadId MainTaskHandle;


void ThreadReadRegistersTask(void const * argument)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
	read_status_registers(); // вычитываем регистры
 800b444:	f001 fadc 	bl	800ca00 <read_status_registers>
	read_control_registers();
 800b448:	f001 fe32 	bl	800d0b0 <read_control_registers>
	read_bootloader_registers();
 800b44c:	f002 f9b2 	bl	800d7b4 <read_bootloader_registers>
	read_change_boot_registers();
 800b450:	f003 f848 	bl	800e4e4 <read_change_boot_registers>
	osDelay(2000); // ждем пока будет получен статус фаз А1,А2,В1,В2,С1,С2
 800b454:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b458:	f7fa fea7 	bl	80061aa <osDelay>
	osThreadResume(MainTaskHandle); // запускаем основной процесс
 800b45c:	4b0d      	ldr	r3, [pc, #52]	; (800b494 <ThreadReadRegistersTask+0x58>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4618      	mov	r0, r3
 800b462:	f7fb f9b3 	bl	80067cc <osThreadResume>
	osThreadResume(M95TaskHandle);  // запускаем процесс модема
 800b466:	4b0c      	ldr	r3, [pc, #48]	; (800b498 <ThreadReadRegistersTask+0x5c>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fb f9ae 	bl	80067cc <osThreadResume>
	osDelay(1000); //ждем 1 секунду
 800b470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b474:	f7fa fe99 	bl	80061aa <osDelay>


	for(;;)
	{

		read_status_registers(); // вычитываем регистры
 800b478:	f001 fac2 	bl	800ca00 <read_status_registers>
		read_control_registers();
 800b47c:	f001 fe18 	bl	800d0b0 <read_control_registers>
		read_bootloader_registers();
 800b480:	f002 f998 	bl	800d7b4 <read_bootloader_registers>
		read_change_boot_registers();
 800b484:	f003 f82e 	bl	800e4e4 <read_change_boot_registers>

		osDelay(1000); // ждем 1 секунду
 800b488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b48c:	f7fa fe8d 	bl	80061aa <osDelay>
		read_status_registers(); // вычитываем регистры
 800b490:	e7f2      	b.n	800b478 <ThreadReadRegistersTask+0x3c>
 800b492:	bf00      	nop
 800b494:	200095a4 	.word	0x200095a4
 800b498:	200095ac 	.word	0x200095ac

0800b49c <fm25v02_read>:
	}
	return temp_id;
}

void fm25v02_read (uint16_t address, uint8_t* data)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	6039      	str	r1, [r7, #0]
 800b4a6:	80fb      	strh	r3, [r7, #6]
	uint8_t data_out[3];
	data_out[0]= READ;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800b4ac:	88fb      	ldrh	r3, [r7, #6]
 800b4ae:	0a1b      	lsrs	r3, r3, #8
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800b4b6:	88fb      	ldrh	r3, [r7, #6]
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	73bb      	strb	r3, [r7, #14]
	FM25V02_CS_ON();
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b4c2:	4811      	ldr	r0, [pc, #68]	; (800b508 <fm25v02_read+0x6c>)
 800b4c4:	f7f7 fcda 	bl	8002e7c <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 3, 10) != HAL_OK ) {}
 800b4c8:	bf00      	nop
 800b4ca:	f107 010c 	add.w	r1, r7, #12
 800b4ce:	230a      	movs	r3, #10
 800b4d0:	2203      	movs	r2, #3
 800b4d2:	480e      	ldr	r0, [pc, #56]	; (800b50c <fm25v02_read+0x70>)
 800b4d4:	f7f8 fcc1 	bl	8003e5a <HAL_SPI_Transmit>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1f5      	bne.n	800b4ca <fm25v02_read+0x2e>
	while( HAL_SPI_Receive(&hspi2, data, 1, 10) != HAL_OK ) {}
 800b4de:	bf00      	nop
 800b4e0:	230a      	movs	r3, #10
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	4809      	ldr	r0, [pc, #36]	; (800b50c <fm25v02_read+0x70>)
 800b4e8:	f7f8 fdf3 	bl	80040d2 <HAL_SPI_Receive>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1f6      	bne.n	800b4e0 <fm25v02_read+0x44>
	FM25V02_CS_OFF();
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b4f8:	4803      	ldr	r0, [pc, #12]	; (800b508 <fm25v02_read+0x6c>)
 800b4fa:	f7f7 fcbf 	bl	8002e7c <HAL_GPIO_WritePin>
}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	40020400 	.word	0x40020400
 800b50c:	20007fac 	.word	0x20007fac

0800b510 <fm25v02_write>:

void fm25v02_write (uint16_t address, uint8_t data)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	4603      	mov	r3, r0
 800b518:	460a      	mov	r2, r1
 800b51a:	80fb      	strh	r3, [r7, #6]
 800b51c:	4613      	mov	r3, r2
 800b51e:	717b      	strb	r3, [r7, #5]
	uint8_t data_out[4];
	data_out[0]= WREN;
 800b520:	2306      	movs	r3, #6
 800b522:	733b      	strb	r3, [r7, #12]
	FM25V02_CS_ON();
 800b524:	2200      	movs	r2, #0
 800b526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b52a:	481d      	ldr	r0, [pc, #116]	; (800b5a0 <fm25v02_write+0x90>)
 800b52c:	f7f7 fca6 	bl	8002e7c <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 1, 10) != HAL_OK ) {}
 800b530:	bf00      	nop
 800b532:	f107 010c 	add.w	r1, r7, #12
 800b536:	230a      	movs	r3, #10
 800b538:	2201      	movs	r2, #1
 800b53a:	481a      	ldr	r0, [pc, #104]	; (800b5a4 <fm25v02_write+0x94>)
 800b53c:	f7f8 fc8d 	bl	8003e5a <HAL_SPI_Transmit>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1f5      	bne.n	800b532 <fm25v02_write+0x22>
	FM25V02_CS_OFF();
 800b546:	2201      	movs	r2, #1
 800b548:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b54c:	4814      	ldr	r0, [pc, #80]	; (800b5a0 <fm25v02_write+0x90>)
 800b54e:	f7f7 fc95 	bl	8002e7c <HAL_GPIO_WritePin>
	data_out[0]= WRITE;
 800b552:	2302      	movs	r3, #2
 800b554:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800b556:	88fb      	ldrh	r3, [r7, #6]
 800b558:	0a1b      	lsrs	r3, r3, #8
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800b560:	88fb      	ldrh	r3, [r7, #6]
 800b562:	b2db      	uxtb	r3, r3
 800b564:	73bb      	strb	r3, [r7, #14]
	data_out[3]= data;
 800b566:	797b      	ldrb	r3, [r7, #5]
 800b568:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 800b56a:	2200      	movs	r2, #0
 800b56c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b570:	480b      	ldr	r0, [pc, #44]	; (800b5a0 <fm25v02_write+0x90>)
 800b572:	f7f7 fc83 	bl	8002e7c <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 800b576:	bf00      	nop
 800b578:	f107 010c 	add.w	r1, r7, #12
 800b57c:	230a      	movs	r3, #10
 800b57e:	2204      	movs	r2, #4
 800b580:	4808      	ldr	r0, [pc, #32]	; (800b5a4 <fm25v02_write+0x94>)
 800b582:	f7f8 fc6a 	bl	8003e5a <HAL_SPI_Transmit>
 800b586:	4603      	mov	r3, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1f5      	bne.n	800b578 <fm25v02_write+0x68>
	FM25V02_CS_OFF();
 800b58c:	2201      	movs	r2, #1
 800b58e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b592:	4803      	ldr	r0, [pc, #12]	; (800b5a0 <fm25v02_write+0x90>)
 800b594:	f7f7 fc72 	bl	8002e7c <HAL_GPIO_WritePin>
}
 800b598:	bf00      	nop
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	40020400 	.word	0x40020400
 800b5a4:	20007fac 	.word	0x20007fac

0800b5a8 <fm25v02_fast_write>:

uint8_t fm25v02_fast_write (uint16_t address, uint8_t* data, uint16_t Size)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	6039      	str	r1, [r7, #0]
 800b5b2:	80fb      	strh	r3, [r7, #6]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	80bb      	strh	r3, [r7, #4]
	for(uint8_t i=0; i<Size; i++)
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	73fb      	strb	r3, [r7, #15]
 800b5bc:	e00e      	b.n	800b5dc <fm25v02_fast_write+0x34>
	{
		fm25v02_write(address+i, *(data+i));
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	88fb      	ldrh	r3, [r7, #6]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	b298      	uxth	r0, r3
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	f7ff ff9d 	bl	800b510 <fm25v02_write>
	for(uint8_t i=0; i<Size; i++)
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	73fb      	strb	r3, [r7, #15]
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	88ba      	ldrh	r2, [r7, #4]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d8eb      	bhi.n	800b5be <fm25v02_fast_write+0x16>
	}
	return 0;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <fm25v02_fast_read>:

HAL_StatusTypeDef fm25v02_fast_read (uint16_t address, uint8_t* data, uint16_t Size)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	6039      	str	r1, [r7, #0]
 800b5fa:	80fb      	strh	r3, [r7, #6]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	80bb      	strh	r3, [r7, #4]
	uint8_t data_out[4];
	data_out[0]= FSTRD;
 800b600:	230b      	movs	r3, #11
 800b602:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 800b604:	88fb      	ldrh	r3, [r7, #6]
 800b606:	0a1b      	lsrs	r3, r3, #8
 800b608:	b29b      	uxth	r3, r3
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 800b60e:	88fb      	ldrh	r3, [r7, #6]
 800b610:	b2db      	uxtb	r3, r3
 800b612:	73bb      	strb	r3, [r7, #14]
	data_out[3]= 0xFF;
 800b614:	23ff      	movs	r3, #255	; 0xff
 800b616:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 800b618:	2200      	movs	r2, #0
 800b61a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b61e:	4811      	ldr	r0, [pc, #68]	; (800b664 <fm25v02_fast_read+0x74>)
 800b620:	f7f7 fc2c 	bl	8002e7c <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 800b624:	bf00      	nop
 800b626:	f107 010c 	add.w	r1, r7, #12
 800b62a:	230a      	movs	r3, #10
 800b62c:	2204      	movs	r2, #4
 800b62e:	480e      	ldr	r0, [pc, #56]	; (800b668 <fm25v02_fast_read+0x78>)
 800b630:	f7f8 fc13 	bl	8003e5a <HAL_SPI_Transmit>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d1f5      	bne.n	800b626 <fm25v02_fast_read+0x36>
	while( HAL_SPI_Receive(&hspi2, data, Size, 10) != HAL_OK ) {}
 800b63a:	bf00      	nop
 800b63c:	88ba      	ldrh	r2, [r7, #4]
 800b63e:	230a      	movs	r3, #10
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	4809      	ldr	r0, [pc, #36]	; (800b668 <fm25v02_fast_read+0x78>)
 800b644:	f7f8 fd45 	bl	80040d2 <HAL_SPI_Receive>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d1f6      	bne.n	800b63c <fm25v02_fast_read+0x4c>
	FM25V02_CS_OFF();
 800b64e:	2201      	movs	r2, #1
 800b650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b654:	4803      	ldr	r0, [pc, #12]	; (800b664 <fm25v02_fast_read+0x74>)
 800b656:	f7f7 fc11 	bl	8002e7c <HAL_GPIO_WritePin>
	return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	3710      	adds	r7, #16
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	40020400 	.word	0x40020400
 800b668:	20007fac 	.word	0x20007fac

0800b66c <BUZ_ON>:


//---функции включения и отключения светодиодов, зуммера и транзистора охранного светодиода-----------------

void BUZ_ON(void) // включение зуммера
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800b670:	2201      	movs	r2, #1
 800b672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b676:	4802      	ldr	r0, [pc, #8]	; (800b680 <BUZ_ON+0x14>)
 800b678:	f7f7 fc00 	bl	8002e7c <HAL_GPIO_WritePin>
}
 800b67c:	bf00      	nop
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	40020c00 	.word	0x40020c00

0800b684 <BUZ_OFF>:

void BUZ_OFF(void) // выключение зуммера
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 800b688:	2200      	movs	r2, #0
 800b68a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b68e:	4802      	ldr	r0, [pc, #8]	; (800b698 <BUZ_OFF+0x14>)
 800b690:	f7f7 fbf4 	bl	8002e7c <HAL_GPIO_WritePin>
}
 800b694:	bf00      	nop
 800b696:	bd80      	pop	{r7, pc}
 800b698:	40020c00 	.word	0x40020c00

0800b69c <LED1_OFF>:
{
	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
}

void LED1_OFF(void) // выключение светодиода LED1
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2120      	movs	r1, #32
 800b6a4:	4802      	ldr	r0, [pc, #8]	; (800b6b0 <LED1_OFF+0x14>)
 800b6a6:	f7f7 fbe9 	bl	8002e7c <HAL_GPIO_WritePin>
}
 800b6aa:	bf00      	nop
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	40020400 	.word	0x40020400

0800b6b4 <LED1_ON>:

void LED1_ON(void) // включение светодиода LED1
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	2120      	movs	r1, #32
 800b6bc:	4802      	ldr	r0, [pc, #8]	; (800b6c8 <LED1_ON+0x14>)
 800b6be:	f7f7 fbdd 	bl	8002e7c <HAL_GPIO_WritePin>
}
 800b6c2:	bf00      	nop
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	40020400 	.word	0x40020400

0800b6cc <find_str>:

//uint8_t send_ok[] = "SEND OK\r\n";
uint8_t send_ok[] = "SEND OK";

uint8_t find_str(uint8_t* buf_in, uint16_t buf_in_len, uint8_t* buf_search, uint16_t buf_search_len)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	607a      	str	r2, [r7, #4]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	460b      	mov	r3, r1
 800b6da:	817b      	strh	r3, [r7, #10]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	813b      	strh	r3, [r7, #8]
	uint8_t j=0;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i=0; i<buf_in_len; i++)
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	75bb      	strb	r3, [r7, #22]
 800b6e8:	e018      	b.n	800b71c <find_str+0x50>
	{
		if( *( buf_in+i ) == *(buf_search+j) )
 800b6ea:	7dbb      	ldrb	r3, [r7, #22]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	781a      	ldrb	r2, [r3, #0]
 800b6f2:	7dfb      	ldrb	r3, [r7, #23]
 800b6f4:	6879      	ldr	r1, [r7, #4]
 800b6f6:	440b      	add	r3, r1
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d109      	bne.n	800b712 <find_str+0x46>
		{
			j++;
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
 800b700:	3301      	adds	r3, #1
 800b702:	75fb      	strb	r3, [r7, #23]
			if(j>=buf_search_len)
 800b704:	7dfb      	ldrb	r3, [r7, #23]
 800b706:	b29b      	uxth	r3, r3
 800b708:	893a      	ldrh	r2, [r7, #8]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d803      	bhi.n	800b716 <find_str+0x4a>
			{
				return 1;
 800b70e:	2301      	movs	r3, #1
 800b710:	e00a      	b.n	800b728 <find_str+0x5c>
			}
		}
		else
		{
			j=0;
 800b712:	2300      	movs	r3, #0
 800b714:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<buf_in_len; i++)
 800b716:	7dbb      	ldrb	r3, [r7, #22]
 800b718:	3301      	adds	r3, #1
 800b71a:	75bb      	strb	r3, [r7, #22]
 800b71c:	7dbb      	ldrb	r3, [r7, #22]
 800b71e:	b29b      	uxth	r3, r3
 800b720:	897a      	ldrh	r2, [r7, #10]
 800b722:	429a      	cmp	r2, r3
 800b724:	d8e1      	bhi.n	800b6ea <find_str+0x1e>
		}
	}

	return 0;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	371c      	adds	r7, #28
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <m95_power_on>:

void m95_power_on(void) // функция включения питания
{
 800b734:	b580      	push	{r7, lr}
 800b736:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800b738:	2200      	movs	r2, #0
 800b73a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b73e:	480c      	ldr	r0, [pc, #48]	; (800b770 <m95_power_on+0x3c>)
 800b740:	f7f7 fb9c 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b744:	2064      	movs	r0, #100	; 0x64
 800b746:	f7f6 f891 	bl	800186c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800b74a:	2201      	movs	r2, #1
 800b74c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b750:	4807      	ldr	r0, [pc, #28]	; (800b770 <m95_power_on+0x3c>)
 800b752:	f7f7 fb93 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(1100);
 800b756:	f240 404c 	movw	r0, #1100	; 0x44c
 800b75a:	f7f6 f887 	bl	800186c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800b75e:	2200      	movs	r2, #0
 800b760:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b764:	4802      	ldr	r0, [pc, #8]	; (800b770 <m95_power_on+0x3c>)
 800b766:	f7f7 fb89 	bl	8002e7c <HAL_GPIO_WritePin>
}
 800b76a:	bf00      	nop
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	40021000 	.word	0x40021000

0800b774 <m95_power_off>:

void m95_power_off(void)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800b778:	2200      	movs	r2, #0
 800b77a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b77e:	480c      	ldr	r0, [pc, #48]	; (800b7b0 <m95_power_off+0x3c>)
 800b780:	f7f7 fb7c 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b784:	2064      	movs	r0, #100	; 0x64
 800b786:	f7f6 f871 	bl	800186c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
 800b78a:	2201      	movs	r2, #1
 800b78c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b790:	4807      	ldr	r0, [pc, #28]	; (800b7b0 <m95_power_off+0x3c>)
 800b792:	f7f7 fb73 	bl	8002e7c <HAL_GPIO_WritePin>
	HAL_Delay(1100);
 800b796:	f240 404c 	movw	r0, #1100	; 0x44c
 800b79a:	f7f6 f867 	bl	800186c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
 800b79e:	2200      	movs	r2, #0
 800b7a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b7a4:	4802      	ldr	r0, [pc, #8]	; (800b7b0 <m95_power_off+0x3c>)
 800b7a6:	f7f7 fb69 	bl	8002e7c <HAL_GPIO_WritePin>
}
 800b7aa:	bf00      	nop
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	40021000 	.word	0x40021000

0800b7b4 <modem_rx_buffer_clear>:



void modem_rx_buffer_clear (void)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	80fb      	strh	r3, [r7, #6]
 800b7be:	e006      	b.n	800b7ce <modem_rx_buffer_clear+0x1a>
	{
		modem_rx_buffer[i] = 0;
 800b7c0:	88fb      	ldrh	r3, [r7, #6]
 800b7c2:	4a08      	ldr	r2, [pc, #32]	; (800b7e4 <modem_rx_buffer_clear+0x30>)
 800b7c4:	2100      	movs	r1, #0
 800b7c6:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 800b7c8:	88fb      	ldrh	r3, [r7, #6]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	80fb      	strh	r3, [r7, #6]
 800b7ce:	88fb      	ldrh	r3, [r7, #6]
 800b7d0:	2bff      	cmp	r3, #255	; 0xff
 800b7d2:	d9f5      	bls.n	800b7c0 <modem_rx_buffer_clear+0xc>
	}
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	200096dc 	.word	0x200096dc

0800b7e8 <ATE0>:

uint8_t ATE0 (void)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
	char str_out[6];
	sprintf(str_out, "ATE0\r\n");
 800b7ee:	463b      	mov	r3, r7
 800b7f0:	491f      	ldr	r1, [pc, #124]	; (800b870 <ATE0+0x88>)
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f003 f908 	bl	800ea08 <siprintf>

	read_rx_state = ACTIVE;
 800b7f8:	4b1e      	ldr	r3, [pc, #120]	; (800b874 <ATE0+0x8c>)
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800b7fe:	4b1e      	ldr	r3, [pc, #120]	; (800b878 <ATE0+0x90>)
 800b800:	2200      	movs	r2, #0
 800b802:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800b804:	f7ff ffd6 	bl	800b7b4 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800b808:	2201      	movs	r2, #1
 800b80a:	491c      	ldr	r1, [pc, #112]	; (800b87c <ATE0+0x94>)
 800b80c:	481c      	ldr	r0, [pc, #112]	; (800b880 <ATE0+0x98>)
 800b80e:	f7f9 fbeb 	bl	8004fe8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 6);
 800b812:	463b      	mov	r3, r7
 800b814:	2206      	movs	r2, #6
 800b816:	4619      	mov	r1, r3
 800b818:	4819      	ldr	r0, [pc, #100]	; (800b880 <ATE0+0x98>)
 800b81a:	f7f9 fb67 	bl	8004eec <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800b81e:	4b19      	ldr	r3, [pc, #100]	; (800b884 <ATE0+0x9c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f04f 31ff 	mov.w	r1, #4294967295
 800b826:	4618      	mov	r0, r3
 800b828:	f7fa fe64 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800b82c:	4b16      	ldr	r3, [pc, #88]	; (800b888 <ATE0+0xa0>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b834:	4618      	mov	r0, r3
 800b836:	f7fa fd01 	bl	800623c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800b83a:	e010      	b.n	800b85e <ATE0+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800b83c:	4913      	ldr	r1, [pc, #76]	; (800b88c <ATE0+0xa4>)
 800b83e:	4814      	ldr	r0, [pc, #80]	; (800b890 <ATE0+0xa8>)
 800b840:	f003 f902 	bl	800ea48 <strstr>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d009      	beq.n	800b85e <ATE0+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800b84a:	4b0f      	ldr	r3, [pc, #60]	; (800b888 <ATE0+0xa0>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fa fd38 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800b854:	4b07      	ldr	r3, [pc, #28]	; (800b874 <ATE0+0x8c>)
 800b856:	2200      	movs	r2, #0
 800b858:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	e004      	b.n	800b868 <ATE0+0x80>
	while(read_rx_state == ACTIVE)
 800b85e:	4b05      	ldr	r3, [pc, #20]	; (800b874 <ATE0+0x8c>)
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	2b01      	cmp	r3, #1
 800b864:	d0ea      	beq.n	800b83c <ATE0+0x54>
		}
	}
	return AT_ERROR;
 800b866:	2301      	movs	r3, #1
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	0800f2f8 	.word	0x0800f2f8
 800b874:	200095b4 	.word	0x200095b4
 800b878:	2000080c 	.word	0x2000080c
 800b87c:	200095dc 	.word	0x200095dc
 800b880:	2000806c 	.word	0x2000806c
 800b884:	200097e8 	.word	0x200097e8
 800b888:	200094cc 	.word	0x200094cc
 800b88c:	0800f300 	.word	0x0800f300
 800b890:	200096dc 	.word	0x200096dc

0800b894 <AT>:


uint8_t AT (void)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
	char str_out[4];
	sprintf(str_out, "AT\r\n");
 800b89a:	1d3b      	adds	r3, r7, #4
 800b89c:	491f      	ldr	r1, [pc, #124]	; (800b91c <AT+0x88>)
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f003 f8b2 	bl	800ea08 <siprintf>

	read_rx_state = ACTIVE;
 800b8a4:	4b1e      	ldr	r3, [pc, #120]	; (800b920 <AT+0x8c>)
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800b8aa:	4b1e      	ldr	r3, [pc, #120]	; (800b924 <AT+0x90>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800b8b0:	f7ff ff80 	bl	800b7b4 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	491c      	ldr	r1, [pc, #112]	; (800b928 <AT+0x94>)
 800b8b8:	481c      	ldr	r0, [pc, #112]	; (800b92c <AT+0x98>)
 800b8ba:	f7f9 fb95 	bl	8004fe8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 4);
 800b8be:	1d3b      	adds	r3, r7, #4
 800b8c0:	2204      	movs	r2, #4
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4819      	ldr	r0, [pc, #100]	; (800b92c <AT+0x98>)
 800b8c6:	f7f9 fb11 	bl	8004eec <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800b8ca:	4b19      	ldr	r3, [pc, #100]	; (800b930 <AT+0x9c>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f04f 31ff 	mov.w	r1, #4294967295
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fa fe0e 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800b8d8:	4b16      	ldr	r3, [pc, #88]	; (800b934 <AT+0xa0>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fa fcab 	bl	800623c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800b8e6:	e010      	b.n	800b90a <AT+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800b8e8:	4913      	ldr	r1, [pc, #76]	; (800b938 <AT+0xa4>)
 800b8ea:	4814      	ldr	r0, [pc, #80]	; (800b93c <AT+0xa8>)
 800b8ec:	f003 f8ac 	bl	800ea48 <strstr>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d009      	beq.n	800b90a <AT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800b8f6:	4b0f      	ldr	r3, [pc, #60]	; (800b934 <AT+0xa0>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7fa fce2 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800b900:	4b07      	ldr	r3, [pc, #28]	; (800b920 <AT+0x8c>)
 800b902:	2200      	movs	r2, #0
 800b904:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800b906:	2300      	movs	r3, #0
 800b908:	e004      	b.n	800b914 <AT+0x80>
	while(read_rx_state == ACTIVE)
 800b90a:	4b05      	ldr	r3, [pc, #20]	; (800b920 <AT+0x8c>)
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d0ea      	beq.n	800b8e8 <AT+0x54>
		}
	}
	return AT_ERROR;
 800b912:	2301      	movs	r3, #1
}
 800b914:	4618      	mov	r0, r3
 800b916:	3708      	adds	r7, #8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	0800f308 	.word	0x0800f308
 800b920:	200095b4 	.word	0x200095b4
 800b924:	2000080c 	.word	0x2000080c
 800b928:	200095dc 	.word	0x200095dc
 800b92c:	2000806c 	.word	0x2000806c
 800b930:	200097e8 	.word	0x200097e8
 800b934:	200094cc 	.word	0x200094cc
 800b938:	0800f300 	.word	0x0800f300
 800b93c:	200096dc 	.word	0x200096dc

0800b940 <AT_CSQ>:
	}
	return AT_ERROR;
}

uint8_t AT_CSQ (uint8_t* signal_level)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
	char str_out[8];
	sprintf(str_out, "AT+CSQ\r\n");
 800b948:	f107 0308 	add.w	r3, r7, #8
 800b94c:	4931      	ldr	r1, [pc, #196]	; (800ba14 <AT_CSQ+0xd4>)
 800b94e:	4618      	mov	r0, r3
 800b950:	f003 f85a 	bl	800ea08 <siprintf>

	read_rx_state = ACTIVE;
 800b954:	4b30      	ldr	r3, [pc, #192]	; (800ba18 <AT_CSQ+0xd8>)
 800b956:	2201      	movs	r2, #1
 800b958:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800b95a:	4b30      	ldr	r3, [pc, #192]	; (800ba1c <AT_CSQ+0xdc>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800b960:	f7ff ff28 	bl	800b7b4 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800b964:	2201      	movs	r2, #1
 800b966:	492e      	ldr	r1, [pc, #184]	; (800ba20 <AT_CSQ+0xe0>)
 800b968:	482e      	ldr	r0, [pc, #184]	; (800ba24 <AT_CSQ+0xe4>)
 800b96a:	f7f9 fb3d 	bl	8004fe8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 8);
 800b96e:	f107 0308 	add.w	r3, r7, #8
 800b972:	2208      	movs	r2, #8
 800b974:	4619      	mov	r1, r3
 800b976:	482b      	ldr	r0, [pc, #172]	; (800ba24 <AT_CSQ+0xe4>)
 800b978:	f7f9 fab8 	bl	8004eec <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_csq, 7);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800b97c:	4b2a      	ldr	r3, [pc, #168]	; (800ba28 <AT_CSQ+0xe8>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f04f 31ff 	mov.w	r1, #4294967295
 800b984:	4618      	mov	r0, r3
 800b986:	f7fa fdb5 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800b98a:	4b28      	ldr	r3, [pc, #160]	; (800ba2c <AT_CSQ+0xec>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800b992:	4618      	mov	r0, r3
 800b994:	f7fa fc52 	bl	800623c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800b998:	e033      	b.n	800ba02 <AT_CSQ+0xc2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "+CSQ:") != NULL )
 800b99a:	4925      	ldr	r1, [pc, #148]	; (800ba30 <AT_CSQ+0xf0>)
 800b99c:	4825      	ldr	r0, [pc, #148]	; (800ba34 <AT_CSQ+0xf4>)
 800b99e:	f003 f853 	bl	800ea48 <strstr>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01b      	beq.n	800b9e0 <AT_CSQ+0xa0>
		{
			if(modem_rx_buffer[9]==',') // в случае, если ATE0 (эхо выключено)
 800b9a8:	4b22      	ldr	r3, [pc, #136]	; (800ba34 <AT_CSQ+0xf4>)
 800b9aa:	7a5b      	ldrb	r3, [r3, #9]
 800b9ac:	2b2c      	cmp	r3, #44	; 0x2c
 800b9ae:	d106      	bne.n	800b9be <AT_CSQ+0x7e>
			{
				*signal_level = modem_rx_buffer[8]-0x30;
 800b9b0:	4b20      	ldr	r3, [pc, #128]	; (800ba34 <AT_CSQ+0xf4>)
 800b9b2:	7a1b      	ldrb	r3, [r3, #8]
 800b9b4:	3b30      	subs	r3, #48	; 0x30
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	701a      	strb	r2, [r3, #0]
 800b9bc:	e010      	b.n	800b9e0 <AT_CSQ+0xa0>
			}
			else
			{
				*signal_level = (modem_rx_buffer[8]-0x30)*10 + (modem_rx_buffer[9]-0x30);
 800b9be:	4b1d      	ldr	r3, [pc, #116]	; (800ba34 <AT_CSQ+0xf4>)
 800b9c0:	7a1b      	ldrb	r3, [r3, #8]
 800b9c2:	3b30      	subs	r3, #48	; 0x30
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	0092      	lsls	r2, r2, #2
 800b9ca:	4413      	add	r3, r2
 800b9cc:	005b      	lsls	r3, r3, #1
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	4b18      	ldr	r3, [pc, #96]	; (800ba34 <AT_CSQ+0xf4>)
 800b9d2:	7a5b      	ldrb	r3, [r3, #9]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	3b30      	subs	r3, #48	; 0x30
 800b9da:	b2da      	uxtb	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	701a      	strb	r2, [r3, #0]
			//{
				//*signal_level = (modem_rx_buffer[14]-0x30)*10 + (modem_rx_buffer[15]-0x30);
			//}

		}
		if(strstr(modem_rx_buffer, "OK") != NULL )
 800b9e0:	4915      	ldr	r1, [pc, #84]	; (800ba38 <AT_CSQ+0xf8>)
 800b9e2:	4814      	ldr	r0, [pc, #80]	; (800ba34 <AT_CSQ+0xf4>)
 800b9e4:	f003 f830 	bl	800ea48 <strstr>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d009      	beq.n	800ba02 <AT_CSQ+0xc2>
		{
			osTimerStop(AT_TimerHandle);
 800b9ee:	4b0f      	ldr	r3, [pc, #60]	; (800ba2c <AT_CSQ+0xec>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7fa fc66 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800b9f8:	4b07      	ldr	r3, [pc, #28]	; (800ba18 <AT_CSQ+0xd8>)
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	e004      	b.n	800ba0c <AT_CSQ+0xcc>
	while(read_rx_state == ACTIVE)
 800ba02:	4b05      	ldr	r3, [pc, #20]	; (800ba18 <AT_CSQ+0xd8>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d0c7      	beq.n	800b99a <AT_CSQ+0x5a>
		}
	}
	return AT_ERROR;
 800ba0a:	2301      	movs	r3, #1
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	0800f324 	.word	0x0800f324
 800ba18:	200095b4 	.word	0x200095b4
 800ba1c:	2000080c 	.word	0x2000080c
 800ba20:	200095dc 	.word	0x200095dc
 800ba24:	2000806c 	.word	0x2000806c
 800ba28:	200097e8 	.word	0x200097e8
 800ba2c:	200094cc 	.word	0x200094cc
 800ba30:	0800f330 	.word	0x0800f330
 800ba34:	200096dc 	.word	0x200096dc
 800ba38:	0800f338 	.word	0x0800f338

0800ba3c <AT_CIPSTATUS>:

uint8_t AT_CIPSTATUS (void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
	uint8_t str_out[14];
	sprintf(str_out, "AT+CIPSTATUS\r\n");
 800ba42:	463b      	mov	r3, r7
 800ba44:	4986      	ldr	r1, [pc, #536]	; (800bc60 <AT_CIPSTATUS+0x224>)
 800ba46:	4618      	mov	r0, r3
 800ba48:	f002 ffde 	bl	800ea08 <siprintf>
	read_rx_state = ACTIVE;
 800ba4c:	4b85      	ldr	r3, [pc, #532]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800ba4e:	2201      	movs	r2, #1
 800ba50:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800ba52:	4b85      	ldr	r3, [pc, #532]	; (800bc68 <AT_CIPSTATUS+0x22c>)
 800ba54:	2200      	movs	r2, #0
 800ba56:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800ba58:	f7ff feac 	bl	800b7b4 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	4983      	ldr	r1, [pc, #524]	; (800bc6c <AT_CIPSTATUS+0x230>)
 800ba60:	4883      	ldr	r0, [pc, #524]	; (800bc70 <AT_CIPSTATUS+0x234>)
 800ba62:	f7f9 fac1 	bl	8004fe8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 14);
 800ba66:	463b      	mov	r3, r7
 800ba68:	220e      	movs	r2, #14
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	4880      	ldr	r0, [pc, #512]	; (800bc70 <AT_CIPSTATUS+0x234>)
 800ba6e:	f7f9 fa3d 	bl	8004eec <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800ba72:	4b80      	ldr	r3, [pc, #512]	; (800bc74 <AT_CIPSTATUS+0x238>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f04f 31ff 	mov.w	r1, #4294967295
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fa fd3a 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800ba80:	4b7d      	ldr	r3, [pc, #500]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fa fbd7 	bl	800623c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800ba8e:	e0dc      	b.n	800bc4a <AT_CIPSTATUS+0x20e>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "IP INITIAL\r\n") != NULL )
 800ba90:	497a      	ldr	r1, [pc, #488]	; (800bc7c <AT_CIPSTATUS+0x240>)
 800ba92:	487b      	ldr	r0, [pc, #492]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800ba94:	f002 ffd8 	bl	800ea48 <strstr>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d009      	beq.n	800bab2 <AT_CIPSTATUS+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800ba9e:	4b76      	ldr	r3, [pc, #472]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fa fc0e 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800baa8:	4b6e      	ldr	r3, [pc, #440]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800baaa:	2200      	movs	r2, #0
 800baac:	701a      	strb	r2, [r3, #0]
			return IP_INITIAL;
 800baae:	2302      	movs	r3, #2
 800bab0:	e0d1      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP START\r\n") != NULL )
 800bab2:	4974      	ldr	r1, [pc, #464]	; (800bc84 <AT_CIPSTATUS+0x248>)
 800bab4:	4872      	ldr	r0, [pc, #456]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bab6:	f002 ffc7 	bl	800ea48 <strstr>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d009      	beq.n	800bad4 <AT_CIPSTATUS+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800bac0:	4b6d      	ldr	r3, [pc, #436]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7fa fbfd 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800baca:	4b66      	ldr	r3, [pc, #408]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bacc:	2200      	movs	r2, #0
 800bace:	701a      	strb	r2, [r3, #0]
			return IP_START;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e0c0      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP CONFIG\r\n") != NULL )
 800bad4:	496c      	ldr	r1, [pc, #432]	; (800bc88 <AT_CIPSTATUS+0x24c>)
 800bad6:	486a      	ldr	r0, [pc, #424]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bad8:	f002 ffb6 	bl	800ea48 <strstr>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d009      	beq.n	800baf6 <AT_CIPSTATUS+0xba>
		{
			osTimerStop(AT_TimerHandle);
 800bae2:	4b65      	ldr	r3, [pc, #404]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fa fbec 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800baec:	4b5d      	ldr	r3, [pc, #372]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800baee:	2200      	movs	r2, #0
 800baf0:	701a      	strb	r2, [r3, #0]
			return IP_CONFIG;
 800baf2:	2304      	movs	r3, #4
 800baf4:	e0af      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP IND\r\n") != NULL )
 800baf6:	4965      	ldr	r1, [pc, #404]	; (800bc8c <AT_CIPSTATUS+0x250>)
 800baf8:	4861      	ldr	r0, [pc, #388]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bafa:	f002 ffa5 	bl	800ea48 <strstr>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d009      	beq.n	800bb18 <AT_CIPSTATUS+0xdc>
		{
			osTimerStop(AT_TimerHandle);
 800bb04:	4b5c      	ldr	r3, [pc, #368]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7fa fbdb 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bb0e:	4b55      	ldr	r3, [pc, #340]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bb10:	2200      	movs	r2, #0
 800bb12:	701a      	strb	r2, [r3, #0]
			return IP_IND;
 800bb14:	2305      	movs	r3, #5
 800bb16:	e09e      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP GPRSACT\r\n") != NULL )
 800bb18:	495d      	ldr	r1, [pc, #372]	; (800bc90 <AT_CIPSTATUS+0x254>)
 800bb1a:	4859      	ldr	r0, [pc, #356]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bb1c:	f002 ff94 	bl	800ea48 <strstr>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d009      	beq.n	800bb3a <AT_CIPSTATUS+0xfe>
		{
			osTimerStop(AT_TimerHandle);
 800bb26:	4b54      	ldr	r3, [pc, #336]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fa fbca 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bb30:	4b4c      	ldr	r3, [pc, #304]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]
			return IP_GPRSACT;
 800bb36:	2306      	movs	r3, #6
 800bb38:	e08d      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP STATUS\r\n") != NULL )
 800bb3a:	4956      	ldr	r1, [pc, #344]	; (800bc94 <AT_CIPSTATUS+0x258>)
 800bb3c:	4850      	ldr	r0, [pc, #320]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bb3e:	f002 ff83 	bl	800ea48 <strstr>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d009      	beq.n	800bb5c <AT_CIPSTATUS+0x120>
		{
			osTimerStop(AT_TimerHandle);
 800bb48:	4b4b      	ldr	r3, [pc, #300]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fa fbb9 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bb52:	4b44      	ldr	r3, [pc, #272]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	701a      	strb	r2, [r3, #0]
			return IP_STATUS;
 800bb58:	2307      	movs	r3, #7
 800bb5a:	e07c      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "TCP CONNECTING\r\n") != NULL )
 800bb5c:	494e      	ldr	r1, [pc, #312]	; (800bc98 <AT_CIPSTATUS+0x25c>)
 800bb5e:	4848      	ldr	r0, [pc, #288]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bb60:	f002 ff72 	bl	800ea48 <strstr>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d009      	beq.n	800bb7e <AT_CIPSTATUS+0x142>
		{
			osTimerStop(AT_TimerHandle);
 800bb6a:	4b43      	ldr	r3, [pc, #268]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7fa fba8 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bb74:	4b3b      	ldr	r3, [pc, #236]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bb76:	2200      	movs	r2, #0
 800bb78:	701a      	strb	r2, [r3, #0]
			return TCP_CONNECTING;
 800bb7a:	2308      	movs	r3, #8
 800bb7c:	e06b      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "UDP CONNECTING\r\n") != NULL )
 800bb7e:	4947      	ldr	r1, [pc, #284]	; (800bc9c <AT_CIPSTATUS+0x260>)
 800bb80:	483f      	ldr	r0, [pc, #252]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bb82:	f002 ff61 	bl	800ea48 <strstr>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d009      	beq.n	800bba0 <AT_CIPSTATUS+0x164>
		{
			osTimerStop(AT_TimerHandle);
 800bb8c:	4b3a      	ldr	r3, [pc, #232]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fa fb97 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bb96:	4b33      	ldr	r3, [pc, #204]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	701a      	strb	r2, [r3, #0]
			return UDP_CONNECTING;
 800bb9c:	2309      	movs	r3, #9
 800bb9e:	e05a      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "IP CLOSE\r\n") != NULL )
 800bba0:	493f      	ldr	r1, [pc, #252]	; (800bca0 <AT_CIPSTATUS+0x264>)
 800bba2:	4837      	ldr	r0, [pc, #220]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bba4:	f002 ff50 	bl	800ea48 <strstr>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d009      	beq.n	800bbc2 <AT_CIPSTATUS+0x186>
		{
			osTimerStop(AT_TimerHandle);
 800bbae:	4b32      	ldr	r3, [pc, #200]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fa fb86 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bbb8:	4b2a      	ldr	r3, [pc, #168]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	701a      	strb	r2, [r3, #0]
			return IP_CLOSE;
 800bbbe:	230a      	movs	r3, #10
 800bbc0:	e049      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL )
 800bbc2:	4938      	ldr	r1, [pc, #224]	; (800bca4 <AT_CIPSTATUS+0x268>)
 800bbc4:	482e      	ldr	r0, [pc, #184]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bbc6:	f002 ff3f 	bl	800ea48 <strstr>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d009      	beq.n	800bbe4 <AT_CIPSTATUS+0x1a8>
		{
			osTimerStop(AT_TimerHandle);
 800bbd0:	4b29      	ldr	r3, [pc, #164]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fa fb75 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bbda:	4b22      	ldr	r3, [pc, #136]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	701a      	strb	r2, [r3, #0]
			return CONNECT_OK;
 800bbe0:	230b      	movs	r3, #11
 800bbe2:	e038      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "PDP DEACT\r\n") != NULL )
 800bbe4:	4930      	ldr	r1, [pc, #192]	; (800bca8 <AT_CIPSTATUS+0x26c>)
 800bbe6:	4826      	ldr	r0, [pc, #152]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bbe8:	f002 ff2e 	bl	800ea48 <strstr>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d009      	beq.n	800bc06 <AT_CIPSTATUS+0x1ca>
		{
			osTimerStop(AT_TimerHandle);
 800bbf2:	4b21      	ldr	r3, [pc, #132]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fa fb64 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bbfc:	4b19      	ldr	r3, [pc, #100]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	701a      	strb	r2, [r3, #0]
			return PDP_DEACT;
 800bc02:	230c      	movs	r3, #12
 800bc04:	e027      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800bc06:	4929      	ldr	r1, [pc, #164]	; (800bcac <AT_CIPSTATUS+0x270>)
 800bc08:	481d      	ldr	r0, [pc, #116]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bc0a:	f002 ff1d 	bl	800ea48 <strstr>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d009      	beq.n	800bc28 <AT_CIPSTATUS+0x1ec>
		{
			osTimerStop(AT_TimerHandle);
 800bc14:	4b18      	ldr	r3, [pc, #96]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7fa fb53 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bc1e:	4b11      	ldr	r3, [pc, #68]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bc20:	2200      	movs	r2, #0
 800bc22:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e016      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
		}
		if(strstr(modem_rx_buffer, "TCP CLOSED\r\n") != NULL )
 800bc28:	4921      	ldr	r1, [pc, #132]	; (800bcb0 <AT_CIPSTATUS+0x274>)
 800bc2a:	4815      	ldr	r0, [pc, #84]	; (800bc80 <AT_CIPSTATUS+0x244>)
 800bc2c:	f002 ff0c 	bl	800ea48 <strstr>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d009      	beq.n	800bc4a <AT_CIPSTATUS+0x20e>
		{
			osTimerStop(AT_TimerHandle);
 800bc36:	4b10      	ldr	r3, [pc, #64]	; (800bc78 <AT_CIPSTATUS+0x23c>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f7fa fb42 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bc40:	4b08      	ldr	r3, [pc, #32]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	701a      	strb	r2, [r3, #0]
			return TCP_CLOSED;
 800bc46:	230d      	movs	r3, #13
 800bc48:	e005      	b.n	800bc56 <AT_CIPSTATUS+0x21a>
	while(read_rx_state == ACTIVE)
 800bc4a:	4b06      	ldr	r3, [pc, #24]	; (800bc64 <AT_CIPSTATUS+0x228>)
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	2b01      	cmp	r3, #1
 800bc50:	f43f af1e 	beq.w	800ba90 <AT_CIPSTATUS+0x54>
		}

	}
	return AT_ERROR;
 800bc54:	2301      	movs	r3, #1
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	0800f33c 	.word	0x0800f33c
 800bc64:	200095b4 	.word	0x200095b4
 800bc68:	2000080c 	.word	0x2000080c
 800bc6c:	200095dc 	.word	0x200095dc
 800bc70:	2000806c 	.word	0x2000806c
 800bc74:	200097e8 	.word	0x200097e8
 800bc78:	200094cc 	.word	0x200094cc
 800bc7c:	0800f34c 	.word	0x0800f34c
 800bc80:	200096dc 	.word	0x200096dc
 800bc84:	0800f35c 	.word	0x0800f35c
 800bc88:	0800f368 	.word	0x0800f368
 800bc8c:	0800f374 	.word	0x0800f374
 800bc90:	0800f380 	.word	0x0800f380
 800bc94:	0800f390 	.word	0x0800f390
 800bc98:	0800f39c 	.word	0x0800f39c
 800bc9c:	0800f3b0 	.word	0x0800f3b0
 800bca0:	0800f3c4 	.word	0x0800f3c4
 800bca4:	0800f3d0 	.word	0x0800f3d0
 800bca8:	0800f3e0 	.word	0x0800f3e0
 800bcac:	0800f3ec 	.word	0x0800f3ec
 800bcb0:	0800f3f4 	.word	0x0800f3f4

0800bcb4 <AT_CSTT>:

uint8_t AT_CSTT  (char* apn, char* user, char* password)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b0a0      	sub	sp, #128	; 0x80
 800bcb8:	af02      	add	r7, sp, #8
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
	uint8_t n;
	char str_out[101];
	sprintf(str_out, "AT+CSTT=\"%s\",\"%s\",\"%s\"\r\n", apn, user, password);
 800bcc0:	f107 0010 	add.w	r0, r7, #16
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	492d      	ldr	r1, [pc, #180]	; (800bd84 <AT_CSTT+0xd0>)
 800bcce:	f002 fe9b 	bl	800ea08 <siprintf>
	n = strlen(str_out);
 800bcd2:	f107 0310 	add.w	r3, r7, #16
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7f4 fa7a 	bl	80001d0 <strlen>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	read_rx_state = ACTIVE;
 800bce2:	4b29      	ldr	r3, [pc, #164]	; (800bd88 <AT_CSTT+0xd4>)
 800bce4:	2201      	movs	r2, #1
 800bce6:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800bce8:	4b28      	ldr	r3, [pc, #160]	; (800bd8c <AT_CSTT+0xd8>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800bcee:	f7ff fd61 	bl	800b7b4 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	4926      	ldr	r1, [pc, #152]	; (800bd90 <AT_CSTT+0xdc>)
 800bcf6:	4827      	ldr	r0, [pc, #156]	; (800bd94 <AT_CSTT+0xe0>)
 800bcf8:	f7f9 f976 	bl	8004fe8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n);
 800bcfc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	f107 0310 	add.w	r3, r7, #16
 800bd06:	4619      	mov	r1, r3
 800bd08:	4822      	ldr	r0, [pc, #136]	; (800bd94 <AT_CSTT+0xe0>)
 800bd0a:	f7f9 f8ef 	bl	8004eec <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800bd0e:	4b22      	ldr	r3, [pc, #136]	; (800bd98 <AT_CSTT+0xe4>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f04f 31ff 	mov.w	r1, #4294967295
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fa fbec 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800bd1c:	4b1f      	ldr	r3, [pc, #124]	; (800bd9c <AT_CSTT+0xe8>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fa fa89 	bl	800623c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800bd2a:	e021      	b.n	800bd70 <AT_CSTT+0xbc>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800bd2c:	491c      	ldr	r1, [pc, #112]	; (800bda0 <AT_CSTT+0xec>)
 800bd2e:	481d      	ldr	r0, [pc, #116]	; (800bda4 <AT_CSTT+0xf0>)
 800bd30:	f002 fe8a 	bl	800ea48 <strstr>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d009      	beq.n	800bd4e <AT_CSTT+0x9a>
		{
			osTimerStop(AT_TimerHandle);
 800bd3a:	4b18      	ldr	r3, [pc, #96]	; (800bd9c <AT_CSTT+0xe8>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7fa fac0 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bd44:	4b10      	ldr	r3, [pc, #64]	; (800bd88 <AT_CSTT+0xd4>)
 800bd46:	2200      	movs	r2, #0
 800bd48:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e015      	b.n	800bd7a <AT_CSTT+0xc6>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800bd4e:	4916      	ldr	r1, [pc, #88]	; (800bda8 <AT_CSTT+0xf4>)
 800bd50:	4814      	ldr	r0, [pc, #80]	; (800bda4 <AT_CSTT+0xf0>)
 800bd52:	f002 fe79 	bl	800ea48 <strstr>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d009      	beq.n	800bd70 <AT_CSTT+0xbc>
		{
			osTimerStop(AT_TimerHandle);
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <AT_CSTT+0xe8>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fa faaf 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bd66:	4b08      	ldr	r3, [pc, #32]	; (800bd88 <AT_CSTT+0xd4>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e004      	b.n	800bd7a <AT_CSTT+0xc6>
	while(read_rx_state == ACTIVE)
 800bd70:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <AT_CSTT+0xd4>)
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d0d9      	beq.n	800bd2c <AT_CSTT+0x78>
		}

	}
	return AT_ERROR;
 800bd78:	2301      	movs	r3, #1

}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3778      	adds	r7, #120	; 0x78
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	0800f404 	.word	0x0800f404
 800bd88:	200095b4 	.word	0x200095b4
 800bd8c:	2000080c 	.word	0x2000080c
 800bd90:	200095dc 	.word	0x200095dc
 800bd94:	2000806c 	.word	0x2000806c
 800bd98:	200097e8 	.word	0x200097e8
 800bd9c:	200094cc 	.word	0x200094cc
 800bda0:	0800f300 	.word	0x0800f300
 800bda4:	200096dc 	.word	0x200096dc
 800bda8:	0800f3ec 	.word	0x0800f3ec

0800bdac <AT_CIICR>:

uint8_t AT_CIICR  (void)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
	uint8_t str_out[10];
	sprintf(str_out, "AT+CIICR\r\n");
 800bdb2:	1d3b      	adds	r3, r7, #4
 800bdb4:	4928      	ldr	r1, [pc, #160]	; (800be58 <AT_CIICR+0xac>)
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f002 fe26 	bl	800ea08 <siprintf>

	read_rx_state = ACTIVE;
 800bdbc:	4b27      	ldr	r3, [pc, #156]	; (800be5c <AT_CIICR+0xb0>)
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800bdc2:	4b27      	ldr	r3, [pc, #156]	; (800be60 <AT_CIICR+0xb4>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800bdc8:	f7ff fcf4 	bl	800b7b4 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800bdcc:	2201      	movs	r2, #1
 800bdce:	4925      	ldr	r1, [pc, #148]	; (800be64 <AT_CIICR+0xb8>)
 800bdd0:	4825      	ldr	r0, [pc, #148]	; (800be68 <AT_CIICR+0xbc>)
 800bdd2:	f7f9 f909 	bl	8004fe8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 10);
 800bdd6:	1d3b      	adds	r3, r7, #4
 800bdd8:	220a      	movs	r2, #10
 800bdda:	4619      	mov	r1, r3
 800bddc:	4822      	ldr	r0, [pc, #136]	; (800be68 <AT_CIICR+0xbc>)
 800bdde:	f7f9 f885 	bl	8004eec <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800bde2:	4b22      	ldr	r3, [pc, #136]	; (800be6c <AT_CIICR+0xc0>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f04f 31ff 	mov.w	r1, #4294967295
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7fa fb82 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 5000);
 800bdf0:	4b1f      	ldr	r3, [pc, #124]	; (800be70 <AT_CIICR+0xc4>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f241 3188 	movw	r1, #5000	; 0x1388
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7fa fa1f 	bl	800623c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800bdfe:	e021      	b.n	800be44 <AT_CIICR+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800be00:	491c      	ldr	r1, [pc, #112]	; (800be74 <AT_CIICR+0xc8>)
 800be02:	481d      	ldr	r0, [pc, #116]	; (800be78 <AT_CIICR+0xcc>)
 800be04:	f002 fe20 	bl	800ea48 <strstr>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d009      	beq.n	800be22 <AT_CIICR+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800be0e:	4b18      	ldr	r3, [pc, #96]	; (800be70 <AT_CIICR+0xc4>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4618      	mov	r0, r3
 800be14:	f7fa fa56 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800be18:	4b10      	ldr	r3, [pc, #64]	; (800be5c <AT_CIICR+0xb0>)
 800be1a:	2200      	movs	r2, #0
 800be1c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	e015      	b.n	800be4e <AT_CIICR+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800be22:	4916      	ldr	r1, [pc, #88]	; (800be7c <AT_CIICR+0xd0>)
 800be24:	4814      	ldr	r0, [pc, #80]	; (800be78 <AT_CIICR+0xcc>)
 800be26:	f002 fe0f 	bl	800ea48 <strstr>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d009      	beq.n	800be44 <AT_CIICR+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800be30:	4b0f      	ldr	r3, [pc, #60]	; (800be70 <AT_CIICR+0xc4>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	4618      	mov	r0, r3
 800be36:	f7fa fa45 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800be3a:	4b08      	ldr	r3, [pc, #32]	; (800be5c <AT_CIICR+0xb0>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	e004      	b.n	800be4e <AT_CIICR+0xa2>
	while(read_rx_state == ACTIVE)
 800be44:	4b05      	ldr	r3, [pc, #20]	; (800be5c <AT_CIICR+0xb0>)
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d0d9      	beq.n	800be00 <AT_CIICR+0x54>
		}

	}
	return AT_ERROR;
 800be4c:	2301      	movs	r3, #1

}
 800be4e:	4618      	mov	r0, r3
 800be50:	3710      	adds	r7, #16
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	0800f420 	.word	0x0800f420
 800be5c:	200095b4 	.word	0x200095b4
 800be60:	2000080c 	.word	0x2000080c
 800be64:	200095dc 	.word	0x200095dc
 800be68:	2000806c 	.word	0x2000806c
 800be6c:	200097e8 	.word	0x200097e8
 800be70:	200094cc 	.word	0x200094cc
 800be74:	0800f300 	.word	0x0800f300
 800be78:	200096dc 	.word	0x200096dc
 800be7c:	0800f3ec 	.word	0x0800f3ec

0800be80 <AT_CIFSR>:

uint8_t AT_CIFSR  (void)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
	uint8_t str_out[10];
	sprintf(str_out, "AT+CIFSR\r\n");
 800be86:	1d3b      	adds	r3, r7, #4
 800be88:	4928      	ldr	r1, [pc, #160]	; (800bf2c <AT_CIFSR+0xac>)
 800be8a:	4618      	mov	r0, r3
 800be8c:	f002 fdbc 	bl	800ea08 <siprintf>

	read_rx_state = ACTIVE;
 800be90:	4b27      	ldr	r3, [pc, #156]	; (800bf30 <AT_CIFSR+0xb0>)
 800be92:	2201      	movs	r2, #1
 800be94:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800be96:	4b27      	ldr	r3, [pc, #156]	; (800bf34 <AT_CIFSR+0xb4>)
 800be98:	2200      	movs	r2, #0
 800be9a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800be9c:	f7ff fc8a 	bl	800b7b4 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800bea0:	2201      	movs	r2, #1
 800bea2:	4925      	ldr	r1, [pc, #148]	; (800bf38 <AT_CIFSR+0xb8>)
 800bea4:	4825      	ldr	r0, [pc, #148]	; (800bf3c <AT_CIFSR+0xbc>)
 800bea6:	f7f9 f89f 	bl	8004fe8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 10);
 800beaa:	1d3b      	adds	r3, r7, #4
 800beac:	220a      	movs	r2, #10
 800beae:	4619      	mov	r1, r3
 800beb0:	4822      	ldr	r0, [pc, #136]	; (800bf3c <AT_CIFSR+0xbc>)
 800beb2:	f7f9 f81b 	bl	8004eec <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800beb6:	4b22      	ldr	r3, [pc, #136]	; (800bf40 <AT_CIFSR+0xc0>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f04f 31ff 	mov.w	r1, #4294967295
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7fa fb18 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 5000);
 800bec4:	4b1f      	ldr	r3, [pc, #124]	; (800bf44 <AT_CIFSR+0xc4>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f241 3188 	movw	r1, #5000	; 0x1388
 800becc:	4618      	mov	r0, r3
 800bece:	f7fa f9b5 	bl	800623c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800bed2:	e021      	b.n	800bf18 <AT_CIFSR+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800bed4:	491c      	ldr	r1, [pc, #112]	; (800bf48 <AT_CIFSR+0xc8>)
 800bed6:	481d      	ldr	r0, [pc, #116]	; (800bf4c <AT_CIFSR+0xcc>)
 800bed8:	f002 fdb6 	bl	800ea48 <strstr>
 800bedc:	4603      	mov	r3, r0
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d009      	beq.n	800bef6 <AT_CIFSR+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800bee2:	4b18      	ldr	r3, [pc, #96]	; (800bf44 <AT_CIFSR+0xc4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fa f9ec 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800beec:	4b10      	ldr	r3, [pc, #64]	; (800bf30 <AT_CIFSR+0xb0>)
 800beee:	2200      	movs	r2, #0
 800bef0:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800bef2:	2300      	movs	r3, #0
 800bef4:	e015      	b.n	800bf22 <AT_CIFSR+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800bef6:	4916      	ldr	r1, [pc, #88]	; (800bf50 <AT_CIFSR+0xd0>)
 800bef8:	4814      	ldr	r0, [pc, #80]	; (800bf4c <AT_CIFSR+0xcc>)
 800befa:	f002 fda5 	bl	800ea48 <strstr>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d009      	beq.n	800bf18 <AT_CIFSR+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800bf04:	4b0f      	ldr	r3, [pc, #60]	; (800bf44 <AT_CIFSR+0xc4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7fa f9db 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800bf0e:	4b08      	ldr	r3, [pc, #32]	; (800bf30 <AT_CIFSR+0xb0>)
 800bf10:	2200      	movs	r2, #0
 800bf12:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e004      	b.n	800bf22 <AT_CIFSR+0xa2>
	while(read_rx_state == ACTIVE)
 800bf18:	4b05      	ldr	r3, [pc, #20]	; (800bf30 <AT_CIFSR+0xb0>)
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d0d9      	beq.n	800bed4 <AT_CIFSR+0x54>
		}

	}
	return AT_ERROR;
 800bf20:	2301      	movs	r3, #1

}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	0800f42c 	.word	0x0800f42c
 800bf30:	200095b4 	.word	0x200095b4
 800bf34:	2000080c 	.word	0x2000080c
 800bf38:	200095dc 	.word	0x200095dc
 800bf3c:	2000806c 	.word	0x2000806c
 800bf40:	200097e8 	.word	0x200097e8
 800bf44:	200094cc 	.word	0x200094cc
 800bf48:	0800f300 	.word	0x0800f300
 800bf4c:	200096dc 	.word	0x200096dc
 800bf50:	0800f3ec 	.word	0x0800f3ec

0800bf54 <AT_CIPSTART>:

uint8_t AT_CIPSTART (char* type , uint8_t ip1, uint8_t ip2, uint8_t ip3, uint8_t ip4, uint16_t port)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b098      	sub	sp, #96	; 0x60
 800bf58:	af04      	add	r7, sp, #16
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	4611      	mov	r1, r2
 800bf60:	461a      	mov	r2, r3
 800bf62:	4603      	mov	r3, r0
 800bf64:	70fb      	strb	r3, [r7, #3]
 800bf66:	460b      	mov	r3, r1
 800bf68:	70bb      	strb	r3, [r7, #2]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	707b      	strb	r3, [r7, #1]
	char str5[3];
	char str6[5];
	char str7[42];
	uint8_t n;

	sprintf(str1, "%s", type);
 800bf6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	4951      	ldr	r1, [pc, #324]	; (800c0bc <AT_CIPSTART+0x168>)
 800bf76:	4618      	mov	r0, r3
 800bf78:	f002 fd46 	bl	800ea08 <siprintf>
	sprintf(str2, "%u", ip1);
 800bf7c:	78fa      	ldrb	r2, [r7, #3]
 800bf7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800bf82:	494f      	ldr	r1, [pc, #316]	; (800c0c0 <AT_CIPSTART+0x16c>)
 800bf84:	4618      	mov	r0, r3
 800bf86:	f002 fd3f 	bl	800ea08 <siprintf>
	sprintf(str3, "%u", ip2);
 800bf8a:	78ba      	ldrb	r2, [r7, #2]
 800bf8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bf90:	494b      	ldr	r1, [pc, #300]	; (800c0c0 <AT_CIPSTART+0x16c>)
 800bf92:	4618      	mov	r0, r3
 800bf94:	f002 fd38 	bl	800ea08 <siprintf>
	sprintf(str4, "%u", ip3);
 800bf98:	787a      	ldrb	r2, [r7, #1]
 800bf9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf9e:	4948      	ldr	r1, [pc, #288]	; (800c0c0 <AT_CIPSTART+0x16c>)
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f002 fd31 	bl	800ea08 <siprintf>
	sprintf(str5, "%u", ip4);
 800bfa6:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800bfaa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bfae:	4944      	ldr	r1, [pc, #272]	; (800c0c0 <AT_CIPSTART+0x16c>)
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f002 fd29 	bl	800ea08 <siprintf>
	sprintf(str6, "%u", port);
 800bfb6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800bfba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bfbe:	4940      	ldr	r1, [pc, #256]	; (800c0c0 <AT_CIPSTART+0x16c>)
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f002 fd21 	bl	800ea08 <siprintf>

	n = sprintf(str7, "AT+CIPSTART=\"%s\",\"%s.%s.%s.%s\",%s\r\n", str1, str2, str3, str4, str5, str6);
 800bfc6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800bfca:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800bfce:	f107 0008 	add.w	r0, r7, #8
 800bfd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bfd6:	9303      	str	r3, [sp, #12]
 800bfd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bfdc:	9302      	str	r3, [sp, #8]
 800bfde:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bfe2:	9301      	str	r3, [sp, #4]
 800bfe4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	460b      	mov	r3, r1
 800bfec:	4935      	ldr	r1, [pc, #212]	; (800c0c4 <AT_CIPSTART+0x170>)
 800bfee:	f002 fd0b 	bl	800ea08 <siprintf>
 800bff2:	4603      	mov	r3, r0
 800bff4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

 	read_rx_state = ACTIVE;
 800bff8:	4b33      	ldr	r3, [pc, #204]	; (800c0c8 <AT_CIPSTART+0x174>)
 800bffa:	2201      	movs	r2, #1
 800bffc:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800bffe:	4b33      	ldr	r3, [pc, #204]	; (800c0cc <AT_CIPSTART+0x178>)
 800c000:	2200      	movs	r2, #0
 800c002:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c004:	f7ff fbd6 	bl	800b7b4 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c008:	2201      	movs	r2, #1
 800c00a:	4931      	ldr	r1, [pc, #196]	; (800c0d0 <AT_CIPSTART+0x17c>)
 800c00c:	4831      	ldr	r0, [pc, #196]	; (800c0d4 <AT_CIPSTART+0x180>)
 800c00e:	f7f8 ffeb 	bl	8004fe8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str7, n);
 800c012:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c016:	b29a      	uxth	r2, r3
 800c018:	f107 0308 	add.w	r3, r7, #8
 800c01c:	4619      	mov	r1, r3
 800c01e:	482d      	ldr	r0, [pc, #180]	; (800c0d4 <AT_CIPSTART+0x180>)
 800c020:	f7f8 ff64 	bl	8004eec <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c024:	4b2c      	ldr	r3, [pc, #176]	; (800c0d8 <AT_CIPSTART+0x184>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f04f 31ff 	mov.w	r1, #4294967295
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fa fa61 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 3000);
 800c032:	4b2a      	ldr	r3, [pc, #168]	; (800c0dc <AT_CIPSTART+0x188>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fa f8fe 	bl	800623c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c040:	e032      	b.n	800c0a8 <AT_CIPSTART+0x154>
	{
		//osThreadSuspend(M95TaskHandle);
		if( (strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL) )
 800c042:	4927      	ldr	r1, [pc, #156]	; (800c0e0 <AT_CIPSTART+0x18c>)
 800c044:	4827      	ldr	r0, [pc, #156]	; (800c0e4 <AT_CIPSTART+0x190>)
 800c046:	f002 fcff 	bl	800ea48 <strstr>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d009      	beq.n	800c064 <AT_CIPSTART+0x110>
		{
			osTimerStop(AT_TimerHandle);
 800c050:	4b22      	ldr	r3, [pc, #136]	; (800c0dc <AT_CIPSTART+0x188>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4618      	mov	r0, r3
 800c056:	f7fa f935 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c05a:	4b1b      	ldr	r3, [pc, #108]	; (800c0c8 <AT_CIPSTART+0x174>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c060:	2300      	movs	r3, #0
 800c062:	e026      	b.n	800c0b2 <AT_CIPSTART+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "ALREADY CONNECT\r\n") != NULL) )
 800c064:	4920      	ldr	r1, [pc, #128]	; (800c0e8 <AT_CIPSTART+0x194>)
 800c066:	481f      	ldr	r0, [pc, #124]	; (800c0e4 <AT_CIPSTART+0x190>)
 800c068:	f002 fcee 	bl	800ea48 <strstr>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d009      	beq.n	800c086 <AT_CIPSTART+0x132>
		{
			osTimerStop(AT_TimerHandle);
 800c072:	4b1a      	ldr	r3, [pc, #104]	; (800c0dc <AT_CIPSTART+0x188>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4618      	mov	r0, r3
 800c078:	f7fa f924 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c07c:	4b12      	ldr	r3, [pc, #72]	; (800c0c8 <AT_CIPSTART+0x174>)
 800c07e:	2200      	movs	r2, #0
 800c080:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	e015      	b.n	800c0b2 <AT_CIPSTART+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "CONNECT FAIL\r\n") != NULL) )
 800c086:	4919      	ldr	r1, [pc, #100]	; (800c0ec <AT_CIPSTART+0x198>)
 800c088:	4816      	ldr	r0, [pc, #88]	; (800c0e4 <AT_CIPSTART+0x190>)
 800c08a:	f002 fcdd 	bl	800ea48 <strstr>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d009      	beq.n	800c0a8 <AT_CIPSTART+0x154>
		{
			osTimerStop(AT_TimerHandle);
 800c094:	4b11      	ldr	r3, [pc, #68]	; (800c0dc <AT_CIPSTART+0x188>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4618      	mov	r0, r3
 800c09a:	f7fa f913 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c09e:	4b0a      	ldr	r3, [pc, #40]	; (800c0c8 <AT_CIPSTART+0x174>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e004      	b.n	800c0b2 <AT_CIPSTART+0x15e>
	while(read_rx_state == ACTIVE)
 800c0a8:	4b07      	ldr	r3, [pc, #28]	; (800c0c8 <AT_CIPSTART+0x174>)
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d0c8      	beq.n	800c042 <AT_CIPSTART+0xee>
		}

	}
	return AT_ERROR;
 800c0b0:	2301      	movs	r3, #1

}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3750      	adds	r7, #80	; 0x50
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	0800f438 	.word	0x0800f438
 800c0c0:	0800f43c 	.word	0x0800f43c
 800c0c4:	0800f440 	.word	0x0800f440
 800c0c8:	200095b4 	.word	0x200095b4
 800c0cc:	2000080c 	.word	0x2000080c
 800c0d0:	200095dc 	.word	0x200095dc
 800c0d4:	2000806c 	.word	0x2000806c
 800c0d8:	200097e8 	.word	0x200097e8
 800c0dc:	200094cc 	.word	0x200094cc
 800c0e0:	0800f3d0 	.word	0x0800f3d0
 800c0e4:	200096dc 	.word	0x200096dc
 800c0e8:	0800f464 	.word	0x0800f464
 800c0ec:	0800f478 	.word	0x0800f478

0800c0f0 <AT_CIPSEND>:

uint8_t AT_CIPSEND (uint8_t* buf, uint16_t length) // maximum length = 1460
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	807b      	strh	r3, [r7, #2]
	uint8_t n1;
	char str_out[17];

	n1 = sprintf(str_out, "AT+CIPSEND=%u\r\n", length);
 800c0fc:	887a      	ldrh	r2, [r7, #2]
 800c0fe:	f107 030c 	add.w	r3, r7, #12
 800c102:	493b      	ldr	r1, [pc, #236]	; (800c1f0 <AT_CIPSEND+0x100>)
 800c104:	4618      	mov	r0, r3
 800c106:	f002 fc7f 	bl	800ea08 <siprintf>
 800c10a:	4603      	mov	r3, r0
 800c10c:	77fb      	strb	r3, [r7, #31]

 	read_rx_state = ACTIVE;
 800c10e:	4b39      	ldr	r3, [pc, #228]	; (800c1f4 <AT_CIPSEND+0x104>)
 800c110:	2201      	movs	r2, #1
 800c112:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c114:	4b38      	ldr	r3, [pc, #224]	; (800c1f8 <AT_CIPSEND+0x108>)
 800c116:	2200      	movs	r2, #0
 800c118:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c11a:	f7ff fb4b 	bl	800b7b4 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c11e:	2201      	movs	r2, #1
 800c120:	4936      	ldr	r1, [pc, #216]	; (800c1fc <AT_CIPSEND+0x10c>)
 800c122:	4837      	ldr	r0, [pc, #220]	; (800c200 <AT_CIPSEND+0x110>)
 800c124:	f7f8 ff60 	bl	8004fe8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n1);
 800c128:	7ffb      	ldrb	r3, [r7, #31]
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	f107 030c 	add.w	r3, r7, #12
 800c130:	4619      	mov	r1, r3
 800c132:	4833      	ldr	r0, [pc, #204]	; (800c200 <AT_CIPSEND+0x110>)
 800c134:	f7f8 feda 	bl	8004eec <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c138:	4b32      	ldr	r3, [pc, #200]	; (800c204 <AT_CIPSEND+0x114>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f04f 31ff 	mov.w	r1, #4294967295
 800c140:	4618      	mov	r0, r3
 800c142:	f7fa f9d7 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c146:	4b30      	ldr	r3, [pc, #192]	; (800c208 <AT_CIPSEND+0x118>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fa f874 	bl	800623c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c154:	e043      	b.n	800c1de <AT_CIPSEND+0xee>
	{
		//osThreadSuspend(osThreadGetId());
		//osSemaphoreWait(ReceiveStateHandle, osWaitForever);
		if( strstr(modem_rx_buffer, "> ") != NULL )
 800c156:	492d      	ldr	r1, [pc, #180]	; (800c20c <AT_CIPSEND+0x11c>)
 800c158:	482d      	ldr	r0, [pc, #180]	; (800c210 <AT_CIPSEND+0x120>)
 800c15a:	f002 fc75 	bl	800ea48 <strstr>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d03c      	beq.n	800c1de <AT_CIPSEND+0xee>
		{
			osTimerStop(AT_TimerHandle);
 800c164:	4b28      	ldr	r3, [pc, #160]	; (800c208 <AT_CIPSEND+0x118>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fa f8ab 	bl	80062c4 <osTimerStop>
			modem_rx_number = 0;
 800c16e:	4b22      	ldr	r3, [pc, #136]	; (800c1f8 <AT_CIPSEND+0x108>)
 800c170:	2200      	movs	r2, #0
 800c172:	701a      	strb	r2, [r3, #0]
			modem_rx_buffer_clear();
 800c174:	f7ff fb1e 	bl	800b7b4 <modem_rx_buffer_clear>

			HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c178:	2201      	movs	r2, #1
 800c17a:	4920      	ldr	r1, [pc, #128]	; (800c1fc <AT_CIPSEND+0x10c>)
 800c17c:	4820      	ldr	r0, [pc, #128]	; (800c200 <AT_CIPSEND+0x110>)
 800c17e:	f7f8 ff33 	bl	8004fe8 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart3, buf, length);
 800c182:	887b      	ldrh	r3, [r7, #2]
 800c184:	461a      	mov	r2, r3
 800c186:	6879      	ldr	r1, [r7, #4]
 800c188:	481d      	ldr	r0, [pc, #116]	; (800c200 <AT_CIPSEND+0x110>)
 800c18a:	f7f8 feaf 	bl	8004eec <HAL_UART_Transmit_DMA>

			osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c18e:	4b1d      	ldr	r3, [pc, #116]	; (800c204 <AT_CIPSEND+0x114>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f04f 31ff 	mov.w	r1, #4294967295
 800c196:	4618      	mov	r0, r3
 800c198:	f7fa f9ac 	bl	80064f4 <osSemaphoreWait>

			osTimerStart(AT_TimerHandle, 3000); // маленькое время!!!!!
 800c19c:	4b1a      	ldr	r3, [pc, #104]	; (800c208 <AT_CIPSEND+0x118>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fa f849 	bl	800623c <osTimerStart>
			while(read_rx_state == ACTIVE)
 800c1aa:	e012      	b.n	800c1d2 <AT_CIPSEND+0xe2>
			{
				//osThreadSuspend(osThreadGetId());
				//osSemaphoreWait(ReceiveStateHandle, osWaitForever);

				if( find_str(modem_rx_buffer, 255, send_ok, 7) == 1 )
 800c1ac:	2307      	movs	r3, #7
 800c1ae:	4a19      	ldr	r2, [pc, #100]	; (800c214 <AT_CIPSEND+0x124>)
 800c1b0:	21ff      	movs	r1, #255	; 0xff
 800c1b2:	4817      	ldr	r0, [pc, #92]	; (800c210 <AT_CIPSEND+0x120>)
 800c1b4:	f7ff fa8a 	bl	800b6cc <find_str>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d109      	bne.n	800c1d2 <AT_CIPSEND+0xe2>
				{
					osTimerStop(AT_TimerHandle);
 800c1be:	4b12      	ldr	r3, [pc, #72]	; (800c208 <AT_CIPSEND+0x118>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7fa f87e 	bl	80062c4 <osTimerStop>
					read_rx_state = NOT_ACTIVE;
 800c1c8:	4b0a      	ldr	r3, [pc, #40]	; (800c1f4 <AT_CIPSEND+0x104>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	701a      	strb	r2, [r3, #0]
					return AT_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e00a      	b.n	800c1e8 <AT_CIPSEND+0xf8>
			while(read_rx_state == ACTIVE)
 800c1d2:	4b08      	ldr	r3, [pc, #32]	; (800c1f4 <AT_CIPSEND+0x104>)
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d0e8      	beq.n	800c1ac <AT_CIPSEND+0xbc>
					read_rx_state = NOT_ACTIVE;
					return AT_ERROR;
				}
				*/
			}
			return AT_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e004      	b.n	800c1e8 <AT_CIPSEND+0xf8>
	while(read_rx_state == ACTIVE)
 800c1de:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <AT_CIPSEND+0x104>)
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d0b7      	beq.n	800c156 <AT_CIPSEND+0x66>
			read_rx_state = NOT_ACTIVE;
			return AT_ERROR;
		}*/

	}
	return AT_ERROR;
 800c1e6:	2301      	movs	r3, #1

}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3720      	adds	r7, #32
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	0800f488 	.word	0x0800f488
 800c1f4:	200095b4 	.word	0x200095b4
 800c1f8:	2000080c 	.word	0x2000080c
 800c1fc:	200095dc 	.word	0x200095dc
 800c200:	2000806c 	.word	0x2000806c
 800c204:	200097e8 	.word	0x200097e8
 800c208:	200094cc 	.word	0x200094cc
 800c20c:	0800f498 	.word	0x0800f498
 800c210:	200096dc 	.word	0x200096dc
 800c214:	20000018 	.word	0x20000018

0800c218 <AT_CIPSHUT>:

uint8_t AT_CIPSHUT  (void)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
	uint8_t str_out[12];
	sprintf(str_out, "AT+CIPSHUT\r\n");
 800c21e:	1d3b      	adds	r3, r7, #4
 800c220:	4928      	ldr	r1, [pc, #160]	; (800c2c4 <AT_CIPSHUT+0xac>)
 800c222:	4618      	mov	r0, r3
 800c224:	f002 fbf0 	bl	800ea08 <siprintf>

	read_rx_state = ACTIVE;
 800c228:	4b27      	ldr	r3, [pc, #156]	; (800c2c8 <AT_CIPSHUT+0xb0>)
 800c22a:	2201      	movs	r2, #1
 800c22c:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 800c22e:	4b27      	ldr	r3, [pc, #156]	; (800c2cc <AT_CIPSHUT+0xb4>)
 800c230:	2200      	movs	r2, #0
 800c232:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 800c234:	f7ff fabe 	bl	800b7b4 <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c238:	2201      	movs	r2, #1
 800c23a:	4925      	ldr	r1, [pc, #148]	; (800c2d0 <AT_CIPSHUT+0xb8>)
 800c23c:	4825      	ldr	r0, [pc, #148]	; (800c2d4 <AT_CIPSHUT+0xbc>)
 800c23e:	f7f8 fed3 	bl	8004fe8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 12);
 800c242:	1d3b      	adds	r3, r7, #4
 800c244:	220c      	movs	r2, #12
 800c246:	4619      	mov	r1, r3
 800c248:	4822      	ldr	r0, [pc, #136]	; (800c2d4 <AT_CIPSHUT+0xbc>)
 800c24a:	f7f8 fe4f 	bl	8004eec <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c24e:	4b22      	ldr	r3, [pc, #136]	; (800c2d8 <AT_CIPSHUT+0xc0>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f04f 31ff 	mov.w	r1, #4294967295
 800c256:	4618      	mov	r0, r3
 800c258:	f7fa f94c 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 10000);
 800c25c:	4b1f      	ldr	r3, [pc, #124]	; (800c2dc <AT_CIPSHUT+0xc4>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f242 7110 	movw	r1, #10000	; 0x2710
 800c264:	4618      	mov	r0, r3
 800c266:	f7f9 ffe9 	bl	800623c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c26a:	e021      	b.n	800c2b0 <AT_CIPSHUT+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c26c:	491c      	ldr	r1, [pc, #112]	; (800c2e0 <AT_CIPSHUT+0xc8>)
 800c26e:	481d      	ldr	r0, [pc, #116]	; (800c2e4 <AT_CIPSHUT+0xcc>)
 800c270:	f002 fbea 	bl	800ea48 <strstr>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d009      	beq.n	800c28e <AT_CIPSHUT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 800c27a:	4b18      	ldr	r3, [pc, #96]	; (800c2dc <AT_CIPSHUT+0xc4>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	4618      	mov	r0, r3
 800c280:	f7fa f820 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c284:	4b10      	ldr	r3, [pc, #64]	; (800c2c8 <AT_CIPSHUT+0xb0>)
 800c286:	2200      	movs	r2, #0
 800c288:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	e015      	b.n	800c2ba <AT_CIPSHUT+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 800c28e:	4916      	ldr	r1, [pc, #88]	; (800c2e8 <AT_CIPSHUT+0xd0>)
 800c290:	4814      	ldr	r0, [pc, #80]	; (800c2e4 <AT_CIPSHUT+0xcc>)
 800c292:	f002 fbd9 	bl	800ea48 <strstr>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d009      	beq.n	800c2b0 <AT_CIPSHUT+0x98>
		{
			osTimerStop(AT_TimerHandle);
 800c29c:	4b0f      	ldr	r3, [pc, #60]	; (800c2dc <AT_CIPSHUT+0xc4>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7fa f80f 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c2a6:	4b08      	ldr	r3, [pc, #32]	; (800c2c8 <AT_CIPSHUT+0xb0>)
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e004      	b.n	800c2ba <AT_CIPSHUT+0xa2>
	while(read_rx_state == ACTIVE)
 800c2b0:	4b05      	ldr	r3, [pc, #20]	; (800c2c8 <AT_CIPSHUT+0xb0>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d0d9      	beq.n	800c26c <AT_CIPSHUT+0x54>
		}

	}
	return AT_ERROR;
 800c2b8:	2301      	movs	r3, #1

}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	0800f49c 	.word	0x0800f49c
 800c2c8:	200095b4 	.word	0x200095b4
 800c2cc:	2000080c 	.word	0x2000080c
 800c2d0:	200095dc 	.word	0x200095dc
 800c2d4:	2000806c 	.word	0x2000806c
 800c2d8:	200097e8 	.word	0x200097e8
 800c2dc:	200094cc 	.word	0x200094cc
 800c2e0:	0800f300 	.word	0x0800f300
 800c2e4:	200096dc 	.word	0x200096dc
 800c2e8:	0800f3ec 	.word	0x0800f3ec

0800c2ec <AT_CCID>:

uint8_t AT_CCID ( uint8_t* id, uint64_t* temp_id) // Команда для для чтения CCID сим карты. id - указатель к массиву в которую будет сохраняться CCID симкарты (должен быть 8 байт), temp_id - указатель к временному массиву для расчета (должен быть 20 байт)
{
 800c2ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2f0:	b0ae      	sub	sp, #184	; 0xb8
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 800c2f8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
	//uint64_t id1[20];
	char str_out[9];
	sprintf(str_out, "AT+CCID\r\n");
 800c2fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c300:	491d      	ldr	r1, [pc, #116]	; (800c378 <AT_CCID+0x8c>)
 800c302:	4618      	mov	r0, r3
 800c304:	f002 fb80 	bl	800ea08 <siprintf>
	read_rx_state = ACTIVE;
 800c308:	4a1c      	ldr	r2, [pc, #112]	; (800c37c <AT_CCID+0x90>)
 800c30a:	2301      	movs	r3, #1
 800c30c:	7013      	strb	r3, [r2, #0]
	modem_rx_number = 0;
 800c30e:	4a1c      	ldr	r2, [pc, #112]	; (800c380 <AT_CCID+0x94>)
 800c310:	2300      	movs	r3, #0
 800c312:	7013      	strb	r3, [r2, #0]
	modem_rx_buffer_clear();
 800c314:	f7ff fa4e 	bl	800b7b4 <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 800c318:	2201      	movs	r2, #1
 800c31a:	491a      	ldr	r1, [pc, #104]	; (800c384 <AT_CCID+0x98>)
 800c31c:	481a      	ldr	r0, [pc, #104]	; (800c388 <AT_CCID+0x9c>)
 800c31e:	f7f8 fe63 	bl	8004fe8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 800c322:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c326:	2209      	movs	r2, #9
 800c328:	4619      	mov	r1, r3
 800c32a:	4817      	ldr	r0, [pc, #92]	; (800c388 <AT_CCID+0x9c>)
 800c32c:	f7f8 fdde 	bl	8004eec <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 800c330:	4b16      	ldr	r3, [pc, #88]	; (800c38c <AT_CCID+0xa0>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f04f 31ff 	mov.w	r1, #4294967295
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fa f8db 	bl	80064f4 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 800c33e:	4b14      	ldr	r3, [pc, #80]	; (800c390 <AT_CCID+0xa4>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c346:	4618      	mov	r0, r3
 800c348:	f7f9 ff78 	bl	800623c <osTimerStart>
	while(read_rx_state == ACTIVE)
 800c34c:	e34b      	b.n	800c9e6 <AT_CCID+0x6fa>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 800c34e:	4911      	ldr	r1, [pc, #68]	; (800c394 <AT_CCID+0xa8>)
 800c350:	4811      	ldr	r0, [pc, #68]	; (800c398 <AT_CCID+0xac>)
 800c352:	f002 fb79 	bl	800ea48 <strstr>
 800c356:	4603      	mov	r3, r0
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f000 8344 	beq.w	800c9e6 <AT_CCID+0x6fa>
		{
			osTimerStop(AT_TimerHandle);
 800c35e:	4b0c      	ldr	r3, [pc, #48]	; (800c390 <AT_CCID+0xa4>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4618      	mov	r0, r3
 800c364:	f7f9 ffae 	bl	80062c4 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 800c368:	4a04      	ldr	r2, [pc, #16]	; (800c37c <AT_CCID+0x90>)
 800c36a:	2300      	movs	r3, #0
 800c36c:	7013      	strb	r3, [r2, #0]

			// В случае, когда ATE0, эхо выключено
			for(uint8_t i=0; i<19; i++)
 800c36e:	2300      	movs	r3, #0
 800c370:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800c374:	e029      	b.n	800c3ca <AT_CCID+0xde>
 800c376:	bf00      	nop
 800c378:	0800f4ac 	.word	0x0800f4ac
 800c37c:	200095b4 	.word	0x200095b4
 800c380:	2000080c 	.word	0x2000080c
 800c384:	200095dc 	.word	0x200095dc
 800c388:	2000806c 	.word	0x2000806c
 800c38c:	200097e8 	.word	0x200097e8
 800c390:	200094cc 	.word	0x200094cc
 800c394:	0800f300 	.word	0x0800f300
 800c398:	200096dc 	.word	0x200096dc
			{
				*(temp_id+i) = (uint8_t)modem_rx_buffer[4+i] - 48;
 800c39c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c3a0:	1d1a      	adds	r2, r3, #4
 800c3a2:	4bde      	ldr	r3, [pc, #888]	; (800c71c <AT_CCID+0x430>)
 800c3a4:	5c9b      	ldrb	r3, [r3, r2]
 800c3a6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 800c3aa:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c3ae:	00da      	lsls	r2, r3, #3
 800c3b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3b4:	1899      	adds	r1, r3, r2
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800c3bc:	e9c1 2300 	strd	r2, r3, [r1]
			for(uint8_t i=0; i<19; i++)
 800c3c0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800c3ca:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800c3ce:	2b12      	cmp	r3, #18
 800c3d0:	d9e4      	bls.n	800c39c <AT_CCID+0xb0>
				*(temp_id+i) = (uint8_t)modem_rx_buffer[10+i] - 48;
				//temp_id[i] = (uint8_t)modem_rx_buffer[10+i] - 48;
			}
			*/

			*(temp_id+19) = *temp_id*1000000000000000000 + *(temp_id+1)*100000000000000000 + *(temp_id+2)*10000000000000000 + *(temp_id+3)*1000000000000000 + *(temp_id+4)*100000000000000 + *(temp_id+5)*10000000000000 + *(temp_id+6)*1000000000000 + *(temp_id+7)*100000000000 + *(temp_id+8)*10000000000 + *(temp_id+9)*1000000000 + *(temp_id+10)*100000000 + *(temp_id+11)*10000000 + *(temp_id+12)*1000000 + *(temp_id+13)*100000 + *(temp_id+14)*10000 + *(temp_id+15)*1000 + *(temp_id+16)*100 + *(temp_id+17)*10 + *(temp_id+18);
 800c3d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3da:	49d1      	ldr	r1, [pc, #836]	; (800c720 <AT_CCID+0x434>)
 800c3dc:	fb01 f003 	mul.w	r0, r1, r3
 800c3e0:	49d0      	ldr	r1, [pc, #832]	; (800c724 <AT_CCID+0x438>)
 800c3e2:	fb01 f102 	mul.w	r1, r1, r2
 800c3e6:	4408      	add	r0, r1
 800c3e8:	49cd      	ldr	r1, [pc, #820]	; (800c720 <AT_CCID+0x434>)
 800c3ea:	fba2 4501 	umull	r4, r5, r2, r1
 800c3ee:	1943      	adds	r3, r0, r5
 800c3f0:	461d      	mov	r5, r3
 800c3f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fc:	49ca      	ldr	r1, [pc, #808]	; (800c728 <AT_CCID+0x43c>)
 800c3fe:	fb01 f003 	mul.w	r0, r1, r3
 800c402:	49ca      	ldr	r1, [pc, #808]	; (800c72c <AT_CCID+0x440>)
 800c404:	fb01 f102 	mul.w	r1, r1, r2
 800c408:	4408      	add	r0, r1
 800c40a:	49c7      	ldr	r1, [pc, #796]	; (800c728 <AT_CCID+0x43c>)
 800c40c:	fba2 2301 	umull	r2, r3, r2, r1
 800c410:	18c1      	adds	r1, r0, r3
 800c412:	460b      	mov	r3, r1
 800c414:	eb14 0a02 	adds.w	sl, r4, r2
 800c418:	eb45 0b03 	adc.w	fp, r5, r3
 800c41c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c420:	3318      	adds	r3, #24
 800c422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c426:	49c2      	ldr	r1, [pc, #776]	; (800c730 <AT_CCID+0x444>)
 800c428:	fb01 f003 	mul.w	r0, r1, r3
 800c42c:	49c1      	ldr	r1, [pc, #772]	; (800c734 <AT_CCID+0x448>)
 800c42e:	fb01 f102 	mul.w	r1, r1, r2
 800c432:	4408      	add	r0, r1
 800c434:	49be      	ldr	r1, [pc, #760]	; (800c730 <AT_CCID+0x444>)
 800c436:	fba2 4501 	umull	r4, r5, r2, r1
 800c43a:	1943      	adds	r3, r0, r5
 800c43c:	461d      	mov	r5, r3
 800c43e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c442:	3310      	adds	r3, #16
 800c444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c448:	49bb      	ldr	r1, [pc, #748]	; (800c738 <AT_CCID+0x44c>)
 800c44a:	fb01 f003 	mul.w	r0, r1, r3
 800c44e:	49bb      	ldr	r1, [pc, #748]	; (800c73c <AT_CCID+0x450>)
 800c450:	fb01 f102 	mul.w	r1, r1, r2
 800c454:	4408      	add	r0, r1
 800c456:	49b8      	ldr	r1, [pc, #736]	; (800c738 <AT_CCID+0x44c>)
 800c458:	fba2 2301 	umull	r2, r3, r2, r1
 800c45c:	18c1      	adds	r1, r0, r3
 800c45e:	460b      	mov	r3, r1
 800c460:	eb14 0802 	adds.w	r8, r4, r2
 800c464:	eb45 0903 	adc.w	r9, r5, r3
 800c468:	eb1a 0308 	adds.w	r3, sl, r8
 800c46c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c470:	eb4b 0309 	adc.w	r3, fp, r9
 800c474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c47c:	3328      	adds	r3, #40	; 0x28
 800c47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c482:	49af      	ldr	r1, [pc, #700]	; (800c740 <AT_CCID+0x454>)
 800c484:	fb01 f003 	mul.w	r0, r1, r3
 800c488:	f640 1118 	movw	r1, #2328	; 0x918
 800c48c:	fb01 f102 	mul.w	r1, r1, r2
 800c490:	4408      	add	r0, r1
 800c492:	49ab      	ldr	r1, [pc, #684]	; (800c740 <AT_CCID+0x454>)
 800c494:	fba2 4501 	umull	r4, r5, r2, r1
 800c498:	1943      	adds	r3, r0, r5
 800c49a:	461d      	mov	r5, r3
 800c49c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4a0:	3320      	adds	r3, #32
 800c4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a6:	49a7      	ldr	r1, [pc, #668]	; (800c744 <AT_CCID+0x458>)
 800c4a8:	fb01 f003 	mul.w	r0, r1, r3
 800c4ac:	f645 21f3 	movw	r1, #23283	; 0x5af3
 800c4b0:	fb01 f102 	mul.w	r1, r1, r2
 800c4b4:	4408      	add	r0, r1
 800c4b6:	49a3      	ldr	r1, [pc, #652]	; (800c744 <AT_CCID+0x458>)
 800c4b8:	fba2 2301 	umull	r2, r3, r2, r1
 800c4bc:	18c1      	adds	r1, r0, r3
 800c4be:	460b      	mov	r3, r1
 800c4c0:	18a1      	adds	r1, r4, r2
 800c4c2:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800c4c6:	eb45 0303 	adc.w	r3, r5, r3
 800c4ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c4ce:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800c4d2:	4623      	mov	r3, r4
 800c4d4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800c4d8:	4602      	mov	r2, r0
 800c4da:	189b      	adds	r3, r3, r2
 800c4dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	462a      	mov	r2, r5
 800c4e4:	eb42 0303 	adc.w	r3, r2, r3
 800c4e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c4ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4f0:	3338      	adds	r3, #56	; 0x38
 800c4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f6:	4994      	ldr	r1, [pc, #592]	; (800c748 <AT_CCID+0x45c>)
 800c4f8:	fb01 f003 	mul.w	r0, r1, r3
 800c4fc:	2117      	movs	r1, #23
 800c4fe:	fb01 f102 	mul.w	r1, r1, r2
 800c502:	4408      	add	r0, r1
 800c504:	4990      	ldr	r1, [pc, #576]	; (800c748 <AT_CCID+0x45c>)
 800c506:	fba2 4501 	umull	r4, r5, r2, r1
 800c50a:	1943      	adds	r3, r0, r5
 800c50c:	461d      	mov	r5, r3
 800c50e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c512:	3330      	adds	r3, #48	; 0x30
 800c514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c518:	498c      	ldr	r1, [pc, #560]	; (800c74c <AT_CCID+0x460>)
 800c51a:	fb01 f003 	mul.w	r0, r1, r3
 800c51e:	21e8      	movs	r1, #232	; 0xe8
 800c520:	fb01 f102 	mul.w	r1, r1, r2
 800c524:	4408      	add	r0, r1
 800c526:	4989      	ldr	r1, [pc, #548]	; (800c74c <AT_CCID+0x460>)
 800c528:	fba2 2301 	umull	r2, r3, r2, r1
 800c52c:	18c1      	adds	r1, r0, r3
 800c52e:	460b      	mov	r3, r1
 800c530:	18a1      	adds	r1, r4, r2
 800c532:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c536:	eb45 0303 	adc.w	r3, r5, r3
 800c53a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c53e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800c542:	4623      	mov	r3, r4
 800c544:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c548:	4602      	mov	r2, r0
 800c54a:	189b      	adds	r3, r3, r2
 800c54c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c54e:	460b      	mov	r3, r1
 800c550:	462a      	mov	r2, r5
 800c552:	eb42 0303 	adc.w	r3, r2, r3
 800c556:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c55c:	3348      	adds	r3, #72	; 0x48
 800c55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c562:	497b      	ldr	r1, [pc, #492]	; (800c750 <AT_CCID+0x464>)
 800c564:	fb01 f003 	mul.w	r0, r1, r3
 800c568:	2100      	movs	r1, #0
 800c56a:	fb01 f102 	mul.w	r1, r1, r2
 800c56e:	4408      	add	r0, r1
 800c570:	4977      	ldr	r1, [pc, #476]	; (800c750 <AT_CCID+0x464>)
 800c572:	fba2 4501 	umull	r4, r5, r2, r1
 800c576:	1943      	adds	r3, r0, r5
 800c578:	461d      	mov	r5, r3
 800c57a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c57e:	3340      	adds	r3, #64	; 0x40
 800c580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c584:	4973      	ldr	r1, [pc, #460]	; (800c754 <AT_CCID+0x468>)
 800c586:	fb01 f003 	mul.w	r0, r1, r3
 800c58a:	2102      	movs	r1, #2
 800c58c:	fb01 f102 	mul.w	r1, r1, r2
 800c590:	4408      	add	r0, r1
 800c592:	4970      	ldr	r1, [pc, #448]	; (800c754 <AT_CCID+0x468>)
 800c594:	fba2 2301 	umull	r2, r3, r2, r1
 800c598:	18c1      	adds	r1, r0, r3
 800c59a:	460b      	mov	r3, r1
 800c59c:	18a1      	adds	r1, r4, r2
 800c59e:	6739      	str	r1, [r7, #112]	; 0x70
 800c5a0:	eb45 0303 	adc.w	r3, r5, r3
 800c5a4:	677b      	str	r3, [r7, #116]	; 0x74
 800c5a6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800c5aa:	4623      	mov	r3, r4
 800c5ac:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	189b      	adds	r3, r3, r2
 800c5b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	462a      	mov	r2, r5
 800c5ba:	eb42 0303 	adc.w	r3, r2, r3
 800c5be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c5c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5c4:	3358      	adds	r3, #88	; 0x58
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	4963      	ldr	r1, [pc, #396]	; (800c758 <AT_CCID+0x46c>)
 800c5cc:	fb01 f003 	mul.w	r0, r1, r3
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	fb01 f102 	mul.w	r1, r1, r2
 800c5d6:	4408      	add	r0, r1
 800c5d8:	495f      	ldr	r1, [pc, #380]	; (800c758 <AT_CCID+0x46c>)
 800c5da:	fba2 4501 	umull	r4, r5, r2, r1
 800c5de:	1943      	adds	r3, r0, r5
 800c5e0:	461d      	mov	r5, r3
 800c5e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c5e6:	3350      	adds	r3, #80	; 0x50
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	495b      	ldr	r1, [pc, #364]	; (800c75c <AT_CCID+0x470>)
 800c5ee:	fb01 f003 	mul.w	r0, r1, r3
 800c5f2:	2100      	movs	r1, #0
 800c5f4:	fb01 f102 	mul.w	r1, r1, r2
 800c5f8:	4408      	add	r0, r1
 800c5fa:	4958      	ldr	r1, [pc, #352]	; (800c75c <AT_CCID+0x470>)
 800c5fc:	fba2 2301 	umull	r2, r3, r2, r1
 800c600:	18c1      	adds	r1, r0, r3
 800c602:	460b      	mov	r3, r1
 800c604:	18a1      	adds	r1, r4, r2
 800c606:	6639      	str	r1, [r7, #96]	; 0x60
 800c608:	eb45 0303 	adc.w	r3, r5, r3
 800c60c:	667b      	str	r3, [r7, #100]	; 0x64
 800c60e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800c612:	4623      	mov	r3, r4
 800c614:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c618:	4602      	mov	r2, r0
 800c61a:	189b      	adds	r3, r3, r2
 800c61c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c61e:	460b      	mov	r3, r1
 800c620:	462a      	mov	r2, r5
 800c622:	eb42 0303 	adc.w	r3, r2, r3
 800c626:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c628:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c62c:	3368      	adds	r3, #104	; 0x68
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	494b      	ldr	r1, [pc, #300]	; (800c760 <AT_CCID+0x474>)
 800c634:	fb01 f003 	mul.w	r0, r1, r3
 800c638:	2100      	movs	r1, #0
 800c63a:	fb01 f102 	mul.w	r1, r1, r2
 800c63e:	4408      	add	r0, r1
 800c640:	4947      	ldr	r1, [pc, #284]	; (800c760 <AT_CCID+0x474>)
 800c642:	fba2 8901 	umull	r8, r9, r2, r1
 800c646:	eb00 0309 	add.w	r3, r0, r9
 800c64a:	4699      	mov	r9, r3
 800c64c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c650:	3360      	adds	r3, #96	; 0x60
 800c652:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c656:	4622      	mov	r2, r4
 800c658:	462b      	mov	r3, r5
 800c65a:	f04f 0000 	mov.w	r0, #0
 800c65e:	f04f 0100 	mov.w	r1, #0
 800c662:	0159      	lsls	r1, r3, #5
 800c664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c668:	0150      	lsls	r0, r2, #5
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	1b12      	subs	r2, r2, r4
 800c670:	eb63 0305 	sbc.w	r3, r3, r5
 800c674:	f04f 0000 	mov.w	r0, #0
 800c678:	f04f 0100 	mov.w	r1, #0
 800c67c:	0259      	lsls	r1, r3, #9
 800c67e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c682:	0250      	lsls	r0, r2, #9
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	1912      	adds	r2, r2, r4
 800c68a:	eb45 0303 	adc.w	r3, r5, r3
 800c68e:	f04f 0000 	mov.w	r0, #0
 800c692:	f04f 0100 	mov.w	r1, #0
 800c696:	0199      	lsls	r1, r3, #6
 800c698:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 800c69c:	0190      	lsls	r0, r2, #6
 800c69e:	1a80      	subs	r0, r0, r2
 800c6a0:	eb61 0103 	sbc.w	r1, r1, r3
 800c6a4:	1903      	adds	r3, r0, r4
 800c6a6:	653b      	str	r3, [r7, #80]	; 0x50
 800c6a8:	eb41 0305 	adc.w	r3, r1, r5
 800c6ac:	657b      	str	r3, [r7, #84]	; 0x54
 800c6ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	eb18 0303 	adds.w	r3, r8, r3
 800c6b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	eb49 0303 	adc.w	r3, r9, r3
 800c6c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6c2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800c6c6:	4623      	mov	r3, r4
 800c6c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	189b      	adds	r3, r3, r2
 800c6d0:	643b      	str	r3, [r7, #64]	; 0x40
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	462a      	mov	r2, r5
 800c6d6:	eb42 0303 	adc.w	r3, r2, r3
 800c6da:	647b      	str	r3, [r7, #68]	; 0x44
 800c6dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c6e0:	3378      	adds	r3, #120	; 0x78
 800c6e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	462b      	mov	r3, r5
 800c6ea:	f04f 0000 	mov.w	r0, #0
 800c6ee:	f04f 0100 	mov.w	r1, #0
 800c6f2:	0159      	lsls	r1, r3, #5
 800c6f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c6f8:	0150      	lsls	r0, r2, #5
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	1b12      	subs	r2, r2, r4
 800c700:	eb63 0305 	sbc.w	r3, r3, r5
 800c704:	f04f 0000 	mov.w	r0, #0
 800c708:	f04f 0100 	mov.w	r1, #0
 800c70c:	0099      	lsls	r1, r3, #2
 800c70e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c712:	0090      	lsls	r0, r2, #2
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	1912      	adds	r2, r2, r4
 800c71a:	e023      	b.n	800c764 <AT_CCID+0x478>
 800c71c:	200096dc 	.word	0x200096dc
 800c720:	a7640000 	.word	0xa7640000
 800c724:	0de0b6b3 	.word	0x0de0b6b3
 800c728:	5d8a0000 	.word	0x5d8a0000
 800c72c:	01634578 	.word	0x01634578
 800c730:	a4c68000 	.word	0xa4c68000
 800c734:	00038d7e 	.word	0x00038d7e
 800c738:	6fc10000 	.word	0x6fc10000
 800c73c:	002386f2 	.word	0x002386f2
 800c740:	4e72a000 	.word	0x4e72a000
 800c744:	107a4000 	.word	0x107a4000
 800c748:	4876e800 	.word	0x4876e800
 800c74c:	d4a51000 	.word	0xd4a51000
 800c750:	3b9aca00 	.word	0x3b9aca00
 800c754:	540be400 	.word	0x540be400
 800c758:	00989680 	.word	0x00989680
 800c75c:	05f5e100 	.word	0x05f5e100
 800c760:	000186a0 	.word	0x000186a0
 800c764:	eb45 0303 	adc.w	r3, r5, r3
 800c768:	f04f 0000 	mov.w	r0, #0
 800c76c:	f04f 0100 	mov.w	r1, #0
 800c770:	00d9      	lsls	r1, r3, #3
 800c772:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c776:	00d0      	lsls	r0, r2, #3
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	4690      	mov	r8, r2
 800c77e:	4699      	mov	r9, r3
 800c780:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c784:	3370      	adds	r3, #112	; 0x70
 800c786:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c78a:	4622      	mov	r2, r4
 800c78c:	462b      	mov	r3, r5
 800c78e:	f04f 0000 	mov.w	r0, #0
 800c792:	f04f 0100 	mov.w	r1, #0
 800c796:	0099      	lsls	r1, r3, #2
 800c798:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c79c:	0090      	lsls	r0, r2, #2
 800c79e:	4602      	mov	r2, r0
 800c7a0:	460b      	mov	r3, r1
 800c7a2:	1912      	adds	r2, r2, r4
 800c7a4:	eb45 0303 	adc.w	r3, r5, r3
 800c7a8:	f04f 0000 	mov.w	r0, #0
 800c7ac:	f04f 0100 	mov.w	r1, #0
 800c7b0:	00d9      	lsls	r1, r3, #3
 800c7b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c7b6:	00d0      	lsls	r0, r2, #3
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	1b12      	subs	r2, r2, r4
 800c7be:	eb63 0305 	sbc.w	r3, r3, r5
 800c7c2:	f04f 0000 	mov.w	r0, #0
 800c7c6:	f04f 0100 	mov.w	r1, #0
 800c7ca:	0119      	lsls	r1, r3, #4
 800c7cc:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800c7d0:	0110      	lsls	r0, r2, #4
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	1912      	adds	r2, r2, r4
 800c7d8:	eb45 0303 	adc.w	r3, r5, r3
 800c7dc:	f04f 0000 	mov.w	r0, #0
 800c7e0:	f04f 0100 	mov.w	r1, #0
 800c7e4:	0119      	lsls	r1, r3, #4
 800c7e6:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 800c7ea:	0110      	lsls	r0, r2, #4
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	eb18 0102 	adds.w	r1, r8, r2
 800c7f4:	63b9      	str	r1, [r7, #56]	; 0x38
 800c7f6:	eb49 0303 	adc.w	r3, r9, r3
 800c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7fc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800c800:	4623      	mov	r3, r4
 800c802:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c806:	4602      	mov	r2, r0
 800c808:	189b      	adds	r3, r3, r2
 800c80a:	633b      	str	r3, [r7, #48]	; 0x30
 800c80c:	460b      	mov	r3, r1
 800c80e:	462a      	mov	r2, r5
 800c810:	eb42 0303 	adc.w	r3, r2, r3
 800c814:	637b      	str	r3, [r7, #52]	; 0x34
 800c816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c81a:	3388      	adds	r3, #136	; 0x88
 800c81c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c820:	4622      	mov	r2, r4
 800c822:	462b      	mov	r3, r5
 800c824:	f04f 0000 	mov.w	r0, #0
 800c828:	f04f 0100 	mov.w	r1, #0
 800c82c:	0099      	lsls	r1, r3, #2
 800c82e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800c832:	0090      	lsls	r0, r2, #2
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	1912      	adds	r2, r2, r4
 800c83a:	eb45 0303 	adc.w	r3, r5, r3
 800c83e:	1891      	adds	r1, r2, r2
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	415b      	adcs	r3, r3
 800c844:	60fb      	str	r3, [r7, #12]
 800c846:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c84a:	4690      	mov	r8, r2
 800c84c:	4699      	mov	r9, r3
 800c84e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c852:	3380      	adds	r3, #128	; 0x80
 800c854:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c858:	4622      	mov	r2, r4
 800c85a:	462b      	mov	r3, r5
 800c85c:	1891      	adds	r1, r2, r2
 800c85e:	6039      	str	r1, [r7, #0]
 800c860:	415b      	adcs	r3, r3
 800c862:	607b      	str	r3, [r7, #4]
 800c864:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c868:	1912      	adds	r2, r2, r4
 800c86a:	eb45 0303 	adc.w	r3, r5, r3
 800c86e:	f04f 0000 	mov.w	r0, #0
 800c872:	f04f 0100 	mov.w	r1, #0
 800c876:	0159      	lsls	r1, r3, #5
 800c878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c87c:	0150      	lsls	r0, r2, #5
 800c87e:	1812      	adds	r2, r2, r0
 800c880:	eb41 0303 	adc.w	r3, r1, r3
 800c884:	1911      	adds	r1, r2, r4
 800c886:	62b9      	str	r1, [r7, #40]	; 0x28
 800c888:	416b      	adcs	r3, r5
 800c88a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c88c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c890:	460b      	mov	r3, r1
 800c892:	eb18 0303 	adds.w	r3, r8, r3
 800c896:	623b      	str	r3, [r7, #32]
 800c898:	4613      	mov	r3, r2
 800c89a:	eb49 0303 	adc.w	r3, r9, r3
 800c89e:	627b      	str	r3, [r7, #36]	; 0x24
 800c8a0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c8a4:	4623      	mov	r3, r4
 800c8a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800c8aa:	4602      	mov	r2, r0
 800c8ac:	189b      	adds	r3, r3, r2
 800c8ae:	61bb      	str	r3, [r7, #24]
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	462a      	mov	r2, r5
 800c8b4:	eb42 0303 	adc.w	r3, r2, r3
 800c8b8:	61fb      	str	r3, [r7, #28]
 800c8ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c8be:	3390      	adds	r3, #144	; 0x90
 800c8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800c8c8:	3198      	adds	r1, #152	; 0x98
 800c8ca:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	1880      	adds	r0, r0, r2
 800c8d2:	6138      	str	r0, [r7, #16]
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	eb43 0000 	adc.w	r0, r3, r0
 800c8da:	6178      	str	r0, [r7, #20]
 800c8dc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c8e0:	e9c1 3400 	strd	r3, r4, [r1]
			//temp_id[19] = temp_id[0]*1000000000000000000 + temp_id[1]*100000000000000000 + temp_id[2]*10000000000000000 + temp_id[3]*1000000000000000 + temp_id[4]*100000000000000 + temp_id[5]*10000000000000 + temp_id[6]*1000000000000 + temp_id[7]*100000000000 + temp_id[8]*10000000000 + temp_id[9]*1000000000 + temp_id[10]*100000000 + temp_id[11]*10000000 + temp_id[12]*1000000 + temp_id[13]*100000 + temp_id[14]*10000 + temp_id[15]*1000 + temp_id[16]*100 + temp_id[17]*10 + temp_id[18];

			*id = (uint8_t)(*(temp_id+19)>>56);
 800c8e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c8e8:	3398      	adds	r3, #152	; 0x98
 800c8ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c8ee:	f04f 0200 	mov.w	r2, #0
 800c8f2:	f04f 0300 	mov.w	r3, #0
 800c8f6:	0e0a      	lsrs	r2, r1, #24
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	b2d2      	uxtb	r2, r2
 800c8fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c900:	701a      	strb	r2, [r3, #0]
			*(id+1) = (uint8_t)(*(temp_id+19)>>48);
 800c902:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c906:	3398      	adds	r3, #152	; 0x98
 800c908:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c90c:	f04f 0200 	mov.w	r2, #0
 800c910:	f04f 0300 	mov.w	r3, #0
 800c914:	0c0a      	lsrs	r2, r1, #16
 800c916:	2300      	movs	r3, #0
 800c918:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c91c:	3101      	adds	r1, #1
 800c91e:	b2d3      	uxtb	r3, r2
 800c920:	700b      	strb	r3, [r1, #0]
			*(id+2) = (uint8_t)(*(temp_id+19)>>40);
 800c922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c926:	3398      	adds	r3, #152	; 0x98
 800c928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c92c:	f04f 0200 	mov.w	r2, #0
 800c930:	f04f 0300 	mov.w	r3, #0
 800c934:	0a0a      	lsrs	r2, r1, #8
 800c936:	2300      	movs	r3, #0
 800c938:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c93c:	3102      	adds	r1, #2
 800c93e:	b2d3      	uxtb	r3, r2
 800c940:	700b      	strb	r3, [r1, #0]
			*(id+3) = (uint8_t)(*(temp_id+19)>>32);
 800c942:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c946:	3398      	adds	r3, #152	; 0x98
 800c948:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c94c:	f04f 0200 	mov.w	r2, #0
 800c950:	f04f 0300 	mov.w	r3, #0
 800c954:	000a      	movs	r2, r1
 800c956:	2300      	movs	r3, #0
 800c958:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c95c:	3103      	adds	r1, #3
 800c95e:	b2d3      	uxtb	r3, r2
 800c960:	700b      	strb	r3, [r1, #0]
			*(id+4) = (uint8_t)(*(temp_id+19)>>24);
 800c962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c966:	3398      	adds	r3, #152	; 0x98
 800c968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c96c:	f04f 0200 	mov.w	r2, #0
 800c970:	f04f 0300 	mov.w	r3, #0
 800c974:	0e02      	lsrs	r2, r0, #24
 800c976:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c97a:	0e0b      	lsrs	r3, r1, #24
 800c97c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c980:	3104      	adds	r1, #4
 800c982:	b2d3      	uxtb	r3, r2
 800c984:	700b      	strb	r3, [r1, #0]
			*(id+5) = (uint8_t)(*(temp_id+19)>>16);
 800c986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c98a:	3398      	adds	r3, #152	; 0x98
 800c98c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c990:	f04f 0200 	mov.w	r2, #0
 800c994:	f04f 0300 	mov.w	r3, #0
 800c998:	0c02      	lsrs	r2, r0, #16
 800c99a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c99e:	0c0b      	lsrs	r3, r1, #16
 800c9a0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c9a4:	3105      	adds	r1, #5
 800c9a6:	b2d3      	uxtb	r3, r2
 800c9a8:	700b      	strb	r3, [r1, #0]
			*(id+6) = (uint8_t)(*(temp_id+19)>>8);
 800c9aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9ae:	3398      	adds	r3, #152	; 0x98
 800c9b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9b4:	f04f 0200 	mov.w	r2, #0
 800c9b8:	f04f 0300 	mov.w	r3, #0
 800c9bc:	0a02      	lsrs	r2, r0, #8
 800c9be:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c9c2:	0a0b      	lsrs	r3, r1, #8
 800c9c4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c9c8:	3106      	adds	r1, #6
 800c9ca:	b2d3      	uxtb	r3, r2
 800c9cc:	700b      	strb	r3, [r1, #0]
			*(id+7) = (uint8_t)*(temp_id+19);
 800c9ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c9d2:	3398      	adds	r3, #152	; 0x98
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c9dc:	3107      	adds	r1, #7
 800c9de:	b2d3      	uxtb	r3, r2
 800c9e0:	700b      	strb	r3, [r1, #0]

			return AT_OK;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	e005      	b.n	800c9f2 <AT_CCID+0x706>
	while(read_rx_state == ACTIVE)
 800c9e6:	4b05      	ldr	r3, [pc, #20]	; (800c9fc <AT_CCID+0x710>)
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	f43f acaf 	beq.w	800c34e <AT_CCID+0x62>
		}

	}
	return AT_ERROR;
 800c9f0:	2301      	movs	r3, #1
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	37b8      	adds	r7, #184	; 0xb8
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9fc:	200095b4 	.word	0x200095b4

0800ca00 <read_status_registers>:
bootloader_register_struct bootloader_registers;
change_boot_register_struct change_boot_registers;

//----функция чтения из памяти регистров статуса--------------------------
void read_status_registers(void)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ca06:	4bbc      	ldr	r3, [pc, #752]	; (800ccf8 <read_status_registers+0x2f8>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f04f 31ff 	mov.w	r1, #4294967295
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7f9 fcac 	bl	800636c <osMutexWait>

	fm25v02_read(2*VERSION_REG, &status_reg_temp_h);
 800ca14:	1dfb      	adds	r3, r7, #7
 800ca16:	4619      	mov	r1, r3
 800ca18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ca1c:	f7fe fd3e 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*VERSION_REG+1, &status_reg_temp_l);
 800ca20:	1dbb      	adds	r3, r7, #6
 800ca22:	4619      	mov	r1, r3
 800ca24:	f242 0001 	movw	r0, #8193	; 0x2001
 800ca28:	f7fe fd38 	bl	800b49c <fm25v02_read>
	status_registers.version_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ca2c:	79fb      	ldrb	r3, [r7, #7]
 800ca2e:	021b      	lsls	r3, r3, #8
 800ca30:	b21a      	sxth	r2, r3
 800ca32:	79bb      	ldrb	r3, [r7, #6]
 800ca34:	b21b      	sxth	r3, r3
 800ca36:	4313      	orrs	r3, r2
 800ca38:	b21b      	sxth	r3, r3
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	4baf      	ldr	r3, [pc, #700]	; (800ccfc <read_status_registers+0x2fc>)
 800ca3e:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*SECURITY_STATUS_REG, &status_reg_temp_h);
 800ca40:	1dfb      	adds	r3, r7, #7
 800ca42:	4619      	mov	r1, r3
 800ca44:	f242 0002 	movw	r0, #8194	; 0x2002
 800ca48:	f7fe fd28 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*SECURITY_STATUS_REG+1, &status_reg_temp_l);
 800ca4c:	1dbb      	adds	r3, r7, #6
 800ca4e:	4619      	mov	r1, r3
 800ca50:	f242 0003 	movw	r0, #8195	; 0x2003
 800ca54:	f7fe fd22 	bl	800b49c <fm25v02_read>
	status_registers.security_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ca58:	79fb      	ldrb	r3, [r7, #7]
 800ca5a:	021b      	lsls	r3, r3, #8
 800ca5c:	b21a      	sxth	r2, r3
 800ca5e:	79bb      	ldrb	r3, [r7, #6]
 800ca60:	b21b      	sxth	r3, r3
 800ca62:	4313      	orrs	r3, r2
 800ca64:	b21b      	sxth	r3, r3
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	4ba4      	ldr	r3, [pc, #656]	; (800ccfc <read_status_registers+0x2fc>)
 800ca6a:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*STATUS_LOOP_REG, &status_reg_temp_h);
 800ca6c:	1dfb      	adds	r3, r7, #7
 800ca6e:	4619      	mov	r1, r3
 800ca70:	f242 0004 	movw	r0, #8196	; 0x2004
 800ca74:	f7fe fd12 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*STATUS_LOOP_REG+1, &status_reg_temp_l);
 800ca78:	1dbb      	adds	r3, r7, #6
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	f242 0005 	movw	r0, #8197	; 0x2005
 800ca80:	f7fe fd0c 	bl	800b49c <fm25v02_read>
	status_registers.status_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	021b      	lsls	r3, r3, #8
 800ca88:	b21a      	sxth	r2, r3
 800ca8a:	79bb      	ldrb	r3, [r7, #6]
 800ca8c:	b21b      	sxth	r3, r3
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	b21b      	sxth	r3, r3
 800ca92:	b29a      	uxth	r2, r3
 800ca94:	4b99      	ldr	r3, [pc, #612]	; (800ccfc <read_status_registers+0x2fc>)
 800ca96:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*ERROR_LOOP_REG, &status_reg_temp_h);
 800ca98:	1dfb      	adds	r3, r7, #7
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	f242 0006 	movw	r0, #8198	; 0x2006
 800caa0:	f7fe fcfc 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ERROR_LOOP_REG+1, &status_reg_temp_l);
 800caa4:	1dbb      	adds	r3, r7, #6
 800caa6:	4619      	mov	r1, r3
 800caa8:	f242 0007 	movw	r0, #8199	; 0x2007
 800caac:	f7fe fcf6 	bl	800b49c <fm25v02_read>
	status_registers.error_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cab0:	79fb      	ldrb	r3, [r7, #7]
 800cab2:	021b      	lsls	r3, r3, #8
 800cab4:	b21a      	sxth	r2, r3
 800cab6:	79bb      	ldrb	r3, [r7, #6]
 800cab8:	b21b      	sxth	r3, r3
 800caba:	4313      	orrs	r3, r2
 800cabc:	b21b      	sxth	r3, r3
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	4b8e      	ldr	r3, [pc, #568]	; (800ccfc <read_status_registers+0x2fc>)
 800cac2:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*ALARM_LOOP_REG, &status_reg_temp_h);
 800cac4:	1dfb      	adds	r3, r7, #7
 800cac6:	4619      	mov	r1, r3
 800cac8:	f242 0008 	movw	r0, #8200	; 0x2008
 800cacc:	f7fe fce6 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_REG+1, &status_reg_temp_l);
 800cad0:	1dbb      	adds	r3, r7, #6
 800cad2:	4619      	mov	r1, r3
 800cad4:	f242 0009 	movw	r0, #8201	; 0x2009
 800cad8:	f7fe fce0 	bl	800b49c <fm25v02_read>
	status_registers.alarm_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cadc:	79fb      	ldrb	r3, [r7, #7]
 800cade:	021b      	lsls	r3, r3, #8
 800cae0:	b21a      	sxth	r2, r3
 800cae2:	79bb      	ldrb	r3, [r7, #6]
 800cae4:	b21b      	sxth	r3, r3
 800cae6:	4313      	orrs	r3, r2
 800cae8:	b21b      	sxth	r3, r3
 800caea:	b29a      	uxth	r2, r3
 800caec:	4b83      	ldr	r3, [pc, #524]	; (800ccfc <read_status_registers+0x2fc>)
 800caee:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*TIME_CURRENT_YEAR_REG, &status_reg_temp_h);
 800caf0:	1dfb      	adds	r3, r7, #7
 800caf2:	4619      	mov	r1, r3
 800caf4:	f242 000a 	movw	r0, #8202	; 0x200a
 800caf8:	f7fe fcd0 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_YEAR_REG+1, &status_reg_temp_l);
 800cafc:	1dbb      	adds	r3, r7, #6
 800cafe:	4619      	mov	r1, r3
 800cb00:	f242 000b 	movw	r0, #8203	; 0x200b
 800cb04:	f7fe fcca 	bl	800b49c <fm25v02_read>
	status_registers.time_current_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cb08:	79fb      	ldrb	r3, [r7, #7]
 800cb0a:	021b      	lsls	r3, r3, #8
 800cb0c:	b21a      	sxth	r2, r3
 800cb0e:	79bb      	ldrb	r3, [r7, #6]
 800cb10:	b21b      	sxth	r3, r3
 800cb12:	4313      	orrs	r3, r2
 800cb14:	b21b      	sxth	r3, r3
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	4b78      	ldr	r3, [pc, #480]	; (800ccfc <read_status_registers+0x2fc>)
 800cb1a:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*TIME_CURRENT_MONTH_REG, &status_reg_temp_h);
 800cb1c:	1dfb      	adds	r3, r7, #7
 800cb1e:	4619      	mov	r1, r3
 800cb20:	f242 000c 	movw	r0, #8204	; 0x200c
 800cb24:	f7fe fcba 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MONTH_REG+1, &status_reg_temp_l);
 800cb28:	1dbb      	adds	r3, r7, #6
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	f242 000d 	movw	r0, #8205	; 0x200d
 800cb30:	f7fe fcb4 	bl	800b49c <fm25v02_read>
	status_registers.time_current_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cb34:	79fb      	ldrb	r3, [r7, #7]
 800cb36:	021b      	lsls	r3, r3, #8
 800cb38:	b21a      	sxth	r2, r3
 800cb3a:	79bb      	ldrb	r3, [r7, #6]
 800cb3c:	b21b      	sxth	r3, r3
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	b21b      	sxth	r3, r3
 800cb42:	b29a      	uxth	r2, r3
 800cb44:	4b6d      	ldr	r3, [pc, #436]	; (800ccfc <read_status_registers+0x2fc>)
 800cb46:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*TIME_CURRENT_DAY_REG, &status_reg_temp_h);
 800cb48:	1dfb      	adds	r3, r7, #7
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	f242 000e 	movw	r0, #8206	; 0x200e
 800cb50:	f7fe fca4 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_DAY_REG+1, &status_reg_temp_l);
 800cb54:	1dbb      	adds	r3, r7, #6
 800cb56:	4619      	mov	r1, r3
 800cb58:	f242 000f 	movw	r0, #8207	; 0x200f
 800cb5c:	f7fe fc9e 	bl	800b49c <fm25v02_read>
	status_registers.time_current_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cb60:	79fb      	ldrb	r3, [r7, #7]
 800cb62:	021b      	lsls	r3, r3, #8
 800cb64:	b21a      	sxth	r2, r3
 800cb66:	79bb      	ldrb	r3, [r7, #6]
 800cb68:	b21b      	sxth	r3, r3
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	b21b      	sxth	r3, r3
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	4b62      	ldr	r3, [pc, #392]	; (800ccfc <read_status_registers+0x2fc>)
 800cb72:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_CURRENT_HOUR_REG, &status_reg_temp_h);
 800cb74:	1dfb      	adds	r3, r7, #7
 800cb76:	4619      	mov	r1, r3
 800cb78:	f242 0010 	movw	r0, #8208	; 0x2010
 800cb7c:	f7fe fc8e 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_HOUR_REG+1, &status_reg_temp_l);
 800cb80:	1dbb      	adds	r3, r7, #6
 800cb82:	4619      	mov	r1, r3
 800cb84:	f242 0011 	movw	r0, #8209	; 0x2011
 800cb88:	f7fe fc88 	bl	800b49c <fm25v02_read>
	status_registers.time_current_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cb8c:	79fb      	ldrb	r3, [r7, #7]
 800cb8e:	021b      	lsls	r3, r3, #8
 800cb90:	b21a      	sxth	r2, r3
 800cb92:	79bb      	ldrb	r3, [r7, #6]
 800cb94:	b21b      	sxth	r3, r3
 800cb96:	4313      	orrs	r3, r2
 800cb98:	b21b      	sxth	r3, r3
 800cb9a:	b29a      	uxth	r2, r3
 800cb9c:	4b57      	ldr	r3, [pc, #348]	; (800ccfc <read_status_registers+0x2fc>)
 800cb9e:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_CURRENT_MINUTE_REG, &status_reg_temp_h);
 800cba0:	1dfb      	adds	r3, r7, #7
 800cba2:	4619      	mov	r1, r3
 800cba4:	f242 0012 	movw	r0, #8210	; 0x2012
 800cba8:	f7fe fc78 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MINUTE_REG+1, &status_reg_temp_l);
 800cbac:	1dbb      	adds	r3, r7, #6
 800cbae:	4619      	mov	r1, r3
 800cbb0:	f242 0013 	movw	r0, #8211	; 0x2013
 800cbb4:	f7fe fc72 	bl	800b49c <fm25v02_read>
	status_registers.time_current_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cbb8:	79fb      	ldrb	r3, [r7, #7]
 800cbba:	021b      	lsls	r3, r3, #8
 800cbbc:	b21a      	sxth	r2, r3
 800cbbe:	79bb      	ldrb	r3, [r7, #6]
 800cbc0:	b21b      	sxth	r3, r3
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	b21b      	sxth	r3, r3
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	4b4c      	ldr	r3, [pc, #304]	; (800ccfc <read_status_registers+0x2fc>)
 800cbca:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_CURRENT_SECOND_REG, &status_reg_temp_h);
 800cbcc:	1dfb      	adds	r3, r7, #7
 800cbce:	4619      	mov	r1, r3
 800cbd0:	f242 0014 	movw	r0, #8212	; 0x2014
 800cbd4:	f7fe fc62 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_SECOND_REG+1, &status_reg_temp_l);
 800cbd8:	1dbb      	adds	r3, r7, #6
 800cbda:	4619      	mov	r1, r3
 800cbdc:	f242 0015 	movw	r0, #8213	; 0x2015
 800cbe0:	f7fe fc5c 	bl	800b49c <fm25v02_read>
	status_registers.time_current_second_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	021b      	lsls	r3, r3, #8
 800cbe8:	b21a      	sxth	r2, r3
 800cbea:	79bb      	ldrb	r3, [r7, #6]
 800cbec:	b21b      	sxth	r3, r3
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	b21b      	sxth	r3, r3
 800cbf2:	b29a      	uxth	r2, r3
 800cbf4:	4b41      	ldr	r3, [pc, #260]	; (800ccfc <read_status_registers+0x2fc>)
 800cbf6:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG, &status_reg_temp_h);
 800cbf8:	1dfb      	adds	r3, r7, #7
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	f242 0016 	movw	r0, #8214	; 0x2016
 800cc00:	f7fe fc4c 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG+1, &status_reg_temp_l);
 800cc04:	1dbb      	adds	r3, r7, #6
 800cc06:	4619      	mov	r1, r3
 800cc08:	f242 0017 	movw	r0, #8215	; 0x2017
 800cc0c:	f7fe fc46 	bl	800b49c <fm25v02_read>
	status_registers.time_current_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	021b      	lsls	r3, r3, #8
 800cc14:	b21a      	sxth	r2, r3
 800cc16:	79bb      	ldrb	r3, [r7, #6]
 800cc18:	b21b      	sxth	r3, r3
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	b21b      	sxth	r3, r3
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	4b36      	ldr	r3, [pc, #216]	; (800ccfc <read_status_registers+0x2fc>)
 800cc22:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG, &status_reg_temp_h);
 800cc24:	1dfb      	adds	r3, r7, #7
 800cc26:	4619      	mov	r1, r3
 800cc28:	f242 0018 	movw	r0, #8216	; 0x2018
 800cc2c:	f7fe fc36 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG+1, &status_reg_temp_l);
 800cc30:	1dbb      	adds	r3, r7, #6
 800cc32:	4619      	mov	r1, r3
 800cc34:	f242 0019 	movw	r0, #8217	; 0x2019
 800cc38:	f7fe fc30 	bl	800b49c <fm25v02_read>
	status_registers.address_processed_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cc3c:	79fb      	ldrb	r3, [r7, #7]
 800cc3e:	021b      	lsls	r3, r3, #8
 800cc40:	b21a      	sxth	r2, r3
 800cc42:	79bb      	ldrb	r3, [r7, #6]
 800cc44:	b21b      	sxth	r3, r3
 800cc46:	4313      	orrs	r3, r2
 800cc48:	b21b      	sxth	r3, r3
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	4b2b      	ldr	r3, [pc, #172]	; (800ccfc <read_status_registers+0x2fc>)
 800cc4e:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG, &status_reg_temp_h);
 800cc50:	1dfb      	adds	r3, r7, #7
 800cc52:	4619      	mov	r1, r3
 800cc54:	f242 001a 	movw	r0, #8218	; 0x201a
 800cc58:	f7fe fc20 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG+1, &status_reg_temp_l);
 800cc5c:	1dbb      	adds	r3, r7, #6
 800cc5e:	4619      	mov	r1, r3
 800cc60:	f242 001b 	movw	r0, #8219	; 0x201b
 800cc64:	f7fe fc1a 	bl	800b49c <fm25v02_read>
	status_registers.address_processed_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cc68:	79fb      	ldrb	r3, [r7, #7]
 800cc6a:	021b      	lsls	r3, r3, #8
 800cc6c:	b21a      	sxth	r2, r3
 800cc6e:	79bb      	ldrb	r3, [r7, #6]
 800cc70:	b21b      	sxth	r3, r3
 800cc72:	4313      	orrs	r3, r2
 800cc74:	b21b      	sxth	r3, r3
 800cc76:	b29a      	uxth	r2, r3
 800cc78:	4b20      	ldr	r3, [pc, #128]	; (800ccfc <read_status_registers+0x2fc>)
 800cc7a:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG, &status_reg_temp_h);
 800cc7c:	1dfb      	adds	r3, r7, #7
 800cc7e:	4619      	mov	r1, r3
 800cc80:	f242 001c 	movw	r0, #8220	; 0x201c
 800cc84:	f7fe fc0a 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &status_reg_temp_l);
 800cc88:	1dbb      	adds	r3, r7, #6
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	f242 001d 	movw	r0, #8221	; 0x201d
 800cc90:	f7fe fc04 	bl	800b49c <fm25v02_read>
	status_registers.address_last_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cc94:	79fb      	ldrb	r3, [r7, #7]
 800cc96:	021b      	lsls	r3, r3, #8
 800cc98:	b21a      	sxth	r2, r3
 800cc9a:	79bb      	ldrb	r3, [r7, #6]
 800cc9c:	b21b      	sxth	r3, r3
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	b21b      	sxth	r3, r3
 800cca2:	b29a      	uxth	r2, r3
 800cca4:	4b15      	ldr	r3, [pc, #84]	; (800ccfc <read_status_registers+0x2fc>)
 800cca6:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG, &status_reg_temp_h);
 800cca8:	1dfb      	adds	r3, r7, #7
 800ccaa:	4619      	mov	r1, r3
 800ccac:	f242 001e 	movw	r0, #8222	; 0x201e
 800ccb0:	f7fe fbf4 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &status_reg_temp_l);
 800ccb4:	1dbb      	adds	r3, r7, #6
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	f242 001f 	movw	r0, #8223	; 0x201f
 800ccbc:	f7fe fbee 	bl	800b49c <fm25v02_read>
	status_registers.address_last_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	021b      	lsls	r3, r3, #8
 800ccc4:	b21a      	sxth	r2, r3
 800ccc6:	79bb      	ldrb	r3, [r7, #6]
 800ccc8:	b21b      	sxth	r3, r3
 800ccca:	4313      	orrs	r3, r2
 800cccc:	b21b      	sxth	r3, r3
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	4b0a      	ldr	r3, [pc, #40]	; (800ccfc <read_status_registers+0x2fc>)
 800ccd2:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*SYSTEM_STATUS_REG, &status_reg_temp_h);
 800ccd4:	1dfb      	adds	r3, r7, #7
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	f242 0020 	movw	r0, #8224	; 0x2020
 800ccdc:	f7fe fbde 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*SYSTEM_STATUS_REG+1, &status_reg_temp_l);
 800cce0:	1dbb      	adds	r3, r7, #6
 800cce2:	4619      	mov	r1, r3
 800cce4:	f242 0021 	movw	r0, #8225	; 0x2021
 800cce8:	f7fe fbd8 	bl	800b49c <fm25v02_read>
	status_registers.system_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	021b      	lsls	r3, r3, #8
 800ccf0:	b21a      	sxth	r2, r3
 800ccf2:	79bb      	ldrb	r3, [r7, #6]
 800ccf4:	e004      	b.n	800cd00 <read_status_registers+0x300>
 800ccf6:	bf00      	nop
 800ccf8:	200095d8 	.word	0x200095d8
 800ccfc:	20009e20 	.word	0x20009e20
 800cd00:	b21b      	sxth	r3, r3
 800cd02:	4313      	orrs	r3, r2
 800cd04:	b21b      	sxth	r3, r3
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	4bbd      	ldr	r3, [pc, #756]	; (800d000 <read_status_registers+0x600>)
 800cd0a:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*POWER_ON_REG, &status_reg_temp_h);
 800cd0c:	1dfb      	adds	r3, r7, #7
 800cd0e:	4619      	mov	r1, r3
 800cd10:	f242 0022 	movw	r0, #8226	; 0x2022
 800cd14:	f7fe fbc2 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*POWER_ON_REG+1, &status_reg_temp_l);
 800cd18:	1dbb      	adds	r3, r7, #6
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	f242 0023 	movw	r0, #8227	; 0x2023
 800cd20:	f7fe fbbc 	bl	800b49c <fm25v02_read>
	status_registers.power_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cd24:	79fb      	ldrb	r3, [r7, #7]
 800cd26:	021b      	lsls	r3, r3, #8
 800cd28:	b21a      	sxth	r2, r3
 800cd2a:	79bb      	ldrb	r3, [r7, #6]
 800cd2c:	b21b      	sxth	r3, r3
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	b21b      	sxth	r3, r3
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	4bb2      	ldr	r3, [pc, #712]	; (800d000 <read_status_registers+0x600>)
 800cd36:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*ERROR_RTC_REG, &status_reg_temp_h);
 800cd38:	1dfb      	adds	r3, r7, #7
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	f242 0024 	movw	r0, #8228	; 0x2024
 800cd40:	f7fe fbac 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ERROR_RTC_REG+1, &status_reg_temp_l);
 800cd44:	1dbb      	adds	r3, r7, #6
 800cd46:	4619      	mov	r1, r3
 800cd48:	f242 0025 	movw	r0, #8229	; 0x2025
 800cd4c:	f7fe fba6 	bl	800b49c <fm25v02_read>
	status_registers.error_rtc_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cd50:	79fb      	ldrb	r3, [r7, #7]
 800cd52:	021b      	lsls	r3, r3, #8
 800cd54:	b21a      	sxth	r2, r3
 800cd56:	79bb      	ldrb	r3, [r7, #6]
 800cd58:	b21b      	sxth	r3, r3
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	b21b      	sxth	r3, r3
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	4ba7      	ldr	r3, [pc, #668]	; (800d000 <read_status_registers+0x600>)
 800cd62:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*POWER_ON_LIGHTING_REG, &status_reg_temp_h);
 800cd64:	1dfb      	adds	r3, r7, #7
 800cd66:	4619      	mov	r1, r3
 800cd68:	f242 0026 	movw	r0, #8230	; 0x2026
 800cd6c:	f7fe fb96 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*POWER_ON_LIGHTING_REG+1, &status_reg_temp_l);
 800cd70:	1dbb      	adds	r3, r7, #6
 800cd72:	4619      	mov	r1, r3
 800cd74:	f242 0027 	movw	r0, #8231	; 0x2027
 800cd78:	f7fe fb90 	bl	800b49c <fm25v02_read>
	status_registers.power_on_lighting_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cd7c:	79fb      	ldrb	r3, [r7, #7]
 800cd7e:	021b      	lsls	r3, r3, #8
 800cd80:	b21a      	sxth	r2, r3
 800cd82:	79bb      	ldrb	r3, [r7, #6]
 800cd84:	b21b      	sxth	r3, r3
 800cd86:	4313      	orrs	r3, r2
 800cd88:	b21b      	sxth	r3, r3
 800cd8a:	b29a      	uxth	r2, r3
 800cd8c:	4b9c      	ldr	r3, [pc, #624]	; (800d000 <read_status_registers+0x600>)
 800cd8e:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*IBUTTON_COMPLETE_0_REG, &status_reg_temp_h);
 800cd90:	1dfb      	adds	r3, r7, #7
 800cd92:	4619      	mov	r1, r3
 800cd94:	f242 002a 	movw	r0, #8234	; 0x202a
 800cd98:	f7fe fb80 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_0_REG+1, &status_reg_temp_l);
 800cd9c:	1dbb      	adds	r3, r7, #6
 800cd9e:	4619      	mov	r1, r3
 800cda0:	f242 002b 	movw	r0, #8235	; 0x202b
 800cda4:	f7fe fb7a 	bl	800b49c <fm25v02_read>
	status_registers.ibutton_complite_0_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cda8:	79fb      	ldrb	r3, [r7, #7]
 800cdaa:	021b      	lsls	r3, r3, #8
 800cdac:	b21a      	sxth	r2, r3
 800cdae:	79bb      	ldrb	r3, [r7, #6]
 800cdb0:	b21b      	sxth	r3, r3
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	b21b      	sxth	r3, r3
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	4b91      	ldr	r3, [pc, #580]	; (800d000 <read_status_registers+0x600>)
 800cdba:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*IBUTTON_COMPLETE_1_REG, &status_reg_temp_h);
 800cdbc:	1dfb      	adds	r3, r7, #7
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	f242 002c 	movw	r0, #8236	; 0x202c
 800cdc4:	f7fe fb6a 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_1_REG+1, &status_reg_temp_l);
 800cdc8:	1dbb      	adds	r3, r7, #6
 800cdca:	4619      	mov	r1, r3
 800cdcc:	f242 002d 	movw	r0, #8237	; 0x202d
 800cdd0:	f7fe fb64 	bl	800b49c <fm25v02_read>
	status_registers.ibutton_complite_1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cdd4:	79fb      	ldrb	r3, [r7, #7]
 800cdd6:	021b      	lsls	r3, r3, #8
 800cdd8:	b21a      	sxth	r2, r3
 800cdda:	79bb      	ldrb	r3, [r7, #6]
 800cddc:	b21b      	sxth	r3, r3
 800cdde:	4313      	orrs	r3, r2
 800cde0:	b21b      	sxth	r3, r3
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	4b86      	ldr	r3, [pc, #536]	; (800d000 <read_status_registers+0x600>)
 800cde6:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*IBUTTON_COMPLETE_2_REG, &status_reg_temp_h);
 800cde8:	1dfb      	adds	r3, r7, #7
 800cdea:	4619      	mov	r1, r3
 800cdec:	f242 002e 	movw	r0, #8238	; 0x202e
 800cdf0:	f7fe fb54 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_2_REG+1, &status_reg_temp_l);
 800cdf4:	1dbb      	adds	r3, r7, #6
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	f242 002f 	movw	r0, #8239	; 0x202f
 800cdfc:	f7fe fb4e 	bl	800b49c <fm25v02_read>
	status_registers.ibutton_complite_2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	021b      	lsls	r3, r3, #8
 800ce04:	b21a      	sxth	r2, r3
 800ce06:	79bb      	ldrb	r3, [r7, #6]
 800ce08:	b21b      	sxth	r3, r3
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	b21b      	sxth	r3, r3
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	4b7b      	ldr	r3, [pc, #492]	; (800d000 <read_status_registers+0x600>)
 800ce12:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*IBUTTON_COMPLETE_3_REG, &status_reg_temp_h);
 800ce14:	1dfb      	adds	r3, r7, #7
 800ce16:	4619      	mov	r1, r3
 800ce18:	f242 0030 	movw	r0, #8240	; 0x2030
 800ce1c:	f7fe fb3e 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_3_REG+1, &status_reg_temp_l);
 800ce20:	1dbb      	adds	r3, r7, #6
 800ce22:	4619      	mov	r1, r3
 800ce24:	f242 0031 	movw	r0, #8241	; 0x2031
 800ce28:	f7fe fb38 	bl	800b49c <fm25v02_read>
	status_registers.ibutton_complite_3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ce2c:	79fb      	ldrb	r3, [r7, #7]
 800ce2e:	021b      	lsls	r3, r3, #8
 800ce30:	b21a      	sxth	r2, r3
 800ce32:	79bb      	ldrb	r3, [r7, #6]
 800ce34:	b21b      	sxth	r3, r3
 800ce36:	4313      	orrs	r3, r2
 800ce38:	b21b      	sxth	r3, r3
 800ce3a:	b29a      	uxth	r2, r3
 800ce3c:	4b70      	ldr	r3, [pc, #448]	; (800d000 <read_status_registers+0x600>)
 800ce3e:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*IBUTTON_COMPLETE_4_REG, &status_reg_temp_h);
 800ce40:	1dfb      	adds	r3, r7, #7
 800ce42:	4619      	mov	r1, r3
 800ce44:	f242 0032 	movw	r0, #8242	; 0x2032
 800ce48:	f7fe fb28 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_4_REG+1, &status_reg_temp_l);
 800ce4c:	1dbb      	adds	r3, r7, #6
 800ce4e:	4619      	mov	r1, r3
 800ce50:	f242 0033 	movw	r0, #8243	; 0x2033
 800ce54:	f7fe fb22 	bl	800b49c <fm25v02_read>
	status_registers.ibutton_complite_4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ce58:	79fb      	ldrb	r3, [r7, #7]
 800ce5a:	021b      	lsls	r3, r3, #8
 800ce5c:	b21a      	sxth	r2, r3
 800ce5e:	79bb      	ldrb	r3, [r7, #6]
 800ce60:	b21b      	sxth	r3, r3
 800ce62:	4313      	orrs	r3, r2
 800ce64:	b21b      	sxth	r3, r3
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	4b65      	ldr	r3, [pc, #404]	; (800d000 <read_status_registers+0x600>)
 800ce6a:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*IBUTTON_COMPLETE_5_REG, &status_reg_temp_h);
 800ce6c:	1dfb      	adds	r3, r7, #7
 800ce6e:	4619      	mov	r1, r3
 800ce70:	f242 0034 	movw	r0, #8244	; 0x2034
 800ce74:	f7fe fb12 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_5_REG+1, &status_reg_temp_l);
 800ce78:	1dbb      	adds	r3, r7, #6
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	f242 0035 	movw	r0, #8245	; 0x2035
 800ce80:	f7fe fb0c 	bl	800b49c <fm25v02_read>
	status_registers.ibutton_complite_5_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ce84:	79fb      	ldrb	r3, [r7, #7]
 800ce86:	021b      	lsls	r3, r3, #8
 800ce88:	b21a      	sxth	r2, r3
 800ce8a:	79bb      	ldrb	r3, [r7, #6]
 800ce8c:	b21b      	sxth	r3, r3
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	b21b      	sxth	r3, r3
 800ce92:	b29a      	uxth	r2, r3
 800ce94:	4b5a      	ldr	r3, [pc, #360]	; (800d000 <read_status_registers+0x600>)
 800ce96:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*IBUTTON_COMPLETE_6_REG, &status_reg_temp_h);
 800ce98:	1dfb      	adds	r3, r7, #7
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	f242 0036 	movw	r0, #8246	; 0x2036
 800cea0:	f7fe fafc 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_6_REG+1, &status_reg_temp_l);
 800cea4:	1dbb      	adds	r3, r7, #6
 800cea6:	4619      	mov	r1, r3
 800cea8:	f242 0037 	movw	r0, #8247	; 0x2037
 800ceac:	f7fe faf6 	bl	800b49c <fm25v02_read>
	status_registers.ibutton_complite_6_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	021b      	lsls	r3, r3, #8
 800ceb4:	b21a      	sxth	r2, r3
 800ceb6:	79bb      	ldrb	r3, [r7, #6]
 800ceb8:	b21b      	sxth	r3, r3
 800ceba:	4313      	orrs	r3, r2
 800cebc:	b21b      	sxth	r3, r3
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	4b4f      	ldr	r3, [pc, #316]	; (800d000 <read_status_registers+0x600>)
 800cec2:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*IBUTTON_COMPLETE_7_REG, &status_reg_temp_h);
 800cec4:	1dfb      	adds	r3, r7, #7
 800cec6:	4619      	mov	r1, r3
 800cec8:	f242 0038 	movw	r0, #8248	; 0x2038
 800cecc:	f7fe fae6 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_7_REG+1, &status_reg_temp_l);
 800ced0:	1dbb      	adds	r3, r7, #6
 800ced2:	4619      	mov	r1, r3
 800ced4:	f242 0039 	movw	r0, #8249	; 0x2039
 800ced8:	f7fe fae0 	bl	800b49c <fm25v02_read>
	status_registers.ibutton_complite_7_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cedc:	79fb      	ldrb	r3, [r7, #7]
 800cede:	021b      	lsls	r3, r3, #8
 800cee0:	b21a      	sxth	r2, r3
 800cee2:	79bb      	ldrb	r3, [r7, #6]
 800cee4:	b21b      	sxth	r3, r3
 800cee6:	4313      	orrs	r3, r2
 800cee8:	b21b      	sxth	r3, r3
 800ceea:	b29a      	uxth	r2, r3
 800ceec:	4b44      	ldr	r3, [pc, #272]	; (800d000 <read_status_registers+0x600>)
 800ceee:	871a      	strh	r2, [r3, #56]	; 0x38

	//fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG, &status_reg_temp_h);
	//fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG+1, &status_reg_temp_l);
	//status_registers.ce303_tarif5_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;

	fm25v02_read(2*SIGNAL_LEVEL_REG, &status_reg_temp_h);
 800cef0:	1dfb      	adds	r3, r7, #7
 800cef2:	4619      	mov	r1, r3
 800cef4:	f242 00a6 	movw	r0, #8358	; 0x20a6
 800cef8:	f7fe fad0 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*SIGNAL_LEVEL_REG+1, &status_reg_temp_l);
 800cefc:	1dbb      	adds	r3, r7, #6
 800cefe:	4619      	mov	r1, r3
 800cf00:	f242 00a7 	movw	r0, #8359	; 0x20a7
 800cf04:	f7fe faca 	bl	800b49c <fm25v02_read>
	status_registers.signal_level_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cf08:	79fb      	ldrb	r3, [r7, #7]
 800cf0a:	021b      	lsls	r3, r3, #8
 800cf0c:	b21a      	sxth	r2, r3
 800cf0e:	79bb      	ldrb	r3, [r7, #6]
 800cf10:	b21b      	sxth	r3, r3
 800cf12:	4313      	orrs	r3, r2
 800cf14:	b21b      	sxth	r3, r3
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	4b39      	ldr	r3, [pc, #228]	; (800d000 <read_status_registers+0x600>)
 800cf1a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6

	//fm25v02_read(2*ADDITIONAL_INPUT_REG2, &status_reg_temp_h);
	//fm25v02_read(2*ADDITIONAL_INPUT_REG2+1, &status_reg_temp_l);
	//status_registers.additional_input_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;

	fm25v02_read(2*ICCID_NUMBER_REG1, &status_reg_temp_h);
 800cf1e:	1dfb      	adds	r3, r7, #7
 800cf20:	4619      	mov	r1, r3
 800cf22:	f242 00b0 	movw	r0, #8368	; 0x20b0
 800cf26:	f7fe fab9 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG1+1, &status_reg_temp_l);
 800cf2a:	1dbb      	adds	r3, r7, #6
 800cf2c:	4619      	mov	r1, r3
 800cf2e:	f242 00b1 	movw	r0, #8369	; 0x20b1
 800cf32:	f7fe fab3 	bl	800b49c <fm25v02_read>
	status_registers.iccid_number_reg1 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cf36:	79fb      	ldrb	r3, [r7, #7]
 800cf38:	021b      	lsls	r3, r3, #8
 800cf3a:	b21a      	sxth	r2, r3
 800cf3c:	79bb      	ldrb	r3, [r7, #6]
 800cf3e:	b21b      	sxth	r3, r3
 800cf40:	4313      	orrs	r3, r2
 800cf42:	b21b      	sxth	r3, r3
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	4b2e      	ldr	r3, [pc, #184]	; (800d000 <read_status_registers+0x600>)
 800cf48:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	fm25v02_read(2*ICCID_NUMBER_REG2, &status_reg_temp_h);
 800cf4c:	1dfb      	adds	r3, r7, #7
 800cf4e:	4619      	mov	r1, r3
 800cf50:	f242 00b2 	movw	r0, #8370	; 0x20b2
 800cf54:	f7fe faa2 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG2+1, &status_reg_temp_l);
 800cf58:	1dbb      	adds	r3, r7, #6
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	f242 00b3 	movw	r0, #8371	; 0x20b3
 800cf60:	f7fe fa9c 	bl	800b49c <fm25v02_read>
	status_registers.iccid_number_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cf64:	79fb      	ldrb	r3, [r7, #7]
 800cf66:	021b      	lsls	r3, r3, #8
 800cf68:	b21a      	sxth	r2, r3
 800cf6a:	79bb      	ldrb	r3, [r7, #6]
 800cf6c:	b21b      	sxth	r3, r3
 800cf6e:	4313      	orrs	r3, r2
 800cf70:	b21b      	sxth	r3, r3
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	4b22      	ldr	r3, [pc, #136]	; (800d000 <read_status_registers+0x600>)
 800cf76:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

	fm25v02_read(2*ICCID_NUMBER_REG3, &status_reg_temp_h);
 800cf7a:	1dfb      	adds	r3, r7, #7
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	f242 00b4 	movw	r0, #8372	; 0x20b4
 800cf82:	f7fe fa8b 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG3+1, &status_reg_temp_l);
 800cf86:	1dbb      	adds	r3, r7, #6
 800cf88:	4619      	mov	r1, r3
 800cf8a:	f242 00b5 	movw	r0, #8373	; 0x20b5
 800cf8e:	f7fe fa85 	bl	800b49c <fm25v02_read>
	status_registers.iccid_number_reg3 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cf92:	79fb      	ldrb	r3, [r7, #7]
 800cf94:	021b      	lsls	r3, r3, #8
 800cf96:	b21a      	sxth	r2, r3
 800cf98:	79bb      	ldrb	r3, [r7, #6]
 800cf9a:	b21b      	sxth	r3, r3
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	b21b      	sxth	r3, r3
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	4b17      	ldr	r3, [pc, #92]	; (800d000 <read_status_registers+0x600>)
 800cfa4:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	fm25v02_read(2*ICCID_NUMBER_REG4, &status_reg_temp_h);
 800cfa8:	1dfb      	adds	r3, r7, #7
 800cfaa:	4619      	mov	r1, r3
 800cfac:	f242 00b6 	movw	r0, #8374	; 0x20b6
 800cfb0:	f7fe fa74 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG4+1, &status_reg_temp_l);
 800cfb4:	1dbb      	adds	r3, r7, #6
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	f242 00b7 	movw	r0, #8375	; 0x20b7
 800cfbc:	f7fe fa6e 	bl	800b49c <fm25v02_read>
	status_registers.iccid_number_reg4 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cfc0:	79fb      	ldrb	r3, [r7, #7]
 800cfc2:	021b      	lsls	r3, r3, #8
 800cfc4:	b21a      	sxth	r2, r3
 800cfc6:	79bb      	ldrb	r3, [r7, #6]
 800cfc8:	b21b      	sxth	r3, r3
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	b21b      	sxth	r3, r3
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <read_status_registers+0x600>)
 800cfd2:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

	fm25v02_read(2*ICCID_NUMBER_REG5, &status_reg_temp_h);
 800cfd6:	1dfb      	adds	r3, r7, #7
 800cfd8:	4619      	mov	r1, r3
 800cfda:	f242 00b8 	movw	r0, #8376	; 0x20b8
 800cfde:	f7fe fa5d 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG5+1, &status_reg_temp_l);
 800cfe2:	1dbb      	adds	r3, r7, #6
 800cfe4:	4619      	mov	r1, r3
 800cfe6:	f242 00b9 	movw	r0, #8377	; 0x20b9
 800cfea:	f7fe fa57 	bl	800b49c <fm25v02_read>
	status_registers.iccid_number_reg5 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800cfee:	79fb      	ldrb	r3, [r7, #7]
 800cff0:	021b      	lsls	r3, r3, #8
 800cff2:	b21a      	sxth	r2, r3
 800cff4:	79bb      	ldrb	r3, [r7, #6]
 800cff6:	b21b      	sxth	r3, r3
 800cff8:	4313      	orrs	r3, r2
 800cffa:	b21b      	sxth	r3, r3
 800cffc:	e002      	b.n	800d004 <read_status_registers+0x604>
 800cffe:	bf00      	nop
 800d000:	20009e20 	.word	0x20009e20
 800d004:	b29a      	uxth	r2, r3
 800d006:	4b28      	ldr	r3, [pc, #160]	; (800d0a8 <read_status_registers+0x6a8>)
 800d008:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

	fm25v02_read(2*ICCID_NUMBER_REG6, &status_reg_temp_h);
 800d00c:	1dfb      	adds	r3, r7, #7
 800d00e:	4619      	mov	r1, r3
 800d010:	f242 00ba 	movw	r0, #8378	; 0x20ba
 800d014:	f7fe fa42 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG6+1, &status_reg_temp_l);
 800d018:	1dbb      	adds	r3, r7, #6
 800d01a:	4619      	mov	r1, r3
 800d01c:	f242 00bb 	movw	r0, #8379	; 0x20bb
 800d020:	f7fe fa3c 	bl	800b49c <fm25v02_read>
	status_registers.iccid_number_reg6 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d024:	79fb      	ldrb	r3, [r7, #7]
 800d026:	021b      	lsls	r3, r3, #8
 800d028:	b21a      	sxth	r2, r3
 800d02a:	79bb      	ldrb	r3, [r7, #6]
 800d02c:	b21b      	sxth	r3, r3
 800d02e:	4313      	orrs	r3, r2
 800d030:	b21b      	sxth	r3, r3
 800d032:	b29a      	uxth	r2, r3
 800d034:	4b1c      	ldr	r3, [pc, #112]	; (800d0a8 <read_status_registers+0x6a8>)
 800d036:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

	fm25v02_read(2*ICCID_NUMBER_REG7, &status_reg_temp_h);
 800d03a:	1dfb      	adds	r3, r7, #7
 800d03c:	4619      	mov	r1, r3
 800d03e:	f242 00bc 	movw	r0, #8380	; 0x20bc
 800d042:	f7fe fa2b 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG7+1, &status_reg_temp_l);
 800d046:	1dbb      	adds	r3, r7, #6
 800d048:	4619      	mov	r1, r3
 800d04a:	f242 00bd 	movw	r0, #8381	; 0x20bd
 800d04e:	f7fe fa25 	bl	800b49c <fm25v02_read>
	status_registers.iccid_number_reg7 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d052:	79fb      	ldrb	r3, [r7, #7]
 800d054:	021b      	lsls	r3, r3, #8
 800d056:	b21a      	sxth	r2, r3
 800d058:	79bb      	ldrb	r3, [r7, #6]
 800d05a:	b21b      	sxth	r3, r3
 800d05c:	4313      	orrs	r3, r2
 800d05e:	b21b      	sxth	r3, r3
 800d060:	b29a      	uxth	r2, r3
 800d062:	4b11      	ldr	r3, [pc, #68]	; (800d0a8 <read_status_registers+0x6a8>)
 800d064:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	fm25v02_read(2*ICCID_NUMBER_REG8, &status_reg_temp_h);
 800d068:	1dfb      	adds	r3, r7, #7
 800d06a:	4619      	mov	r1, r3
 800d06c:	f242 00be 	movw	r0, #8382	; 0x20be
 800d070:	f7fe fa14 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG8+1, &status_reg_temp_l);
 800d074:	1dbb      	adds	r3, r7, #6
 800d076:	4619      	mov	r1, r3
 800d078:	f242 00bf 	movw	r0, #8383	; 0x20bf
 800d07c:	f7fe fa0e 	bl	800b49c <fm25v02_read>
	status_registers.iccid_number_reg8 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d080:	79fb      	ldrb	r3, [r7, #7]
 800d082:	021b      	lsls	r3, r3, #8
 800d084:	b21a      	sxth	r2, r3
 800d086:	79bb      	ldrb	r3, [r7, #6]
 800d088:	b21b      	sxth	r3, r3
 800d08a:	4313      	orrs	r3, r2
 800d08c:	b21b      	sxth	r3, r3
 800d08e:	b29a      	uxth	r2, r3
 800d090:	4b05      	ldr	r3, [pc, #20]	; (800d0a8 <read_status_registers+0x6a8>)
 800d092:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc

	osMutexRelease(Fm25v02MutexHandle);
 800d096:	4b05      	ldr	r3, [pc, #20]	; (800d0ac <read_status_registers+0x6ac>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7f9 f9b4 	bl	8006408 <osMutexRelease>
}
 800d0a0:	bf00      	nop
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	20009e20 	.word	0x20009e20
 800d0ac:	200095d8 	.word	0x200095d8

0800d0b0 <read_control_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти управляющих регистров--------------
void read_control_registers(void)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d0b6:	4bbc      	ldr	r3, [pc, #752]	; (800d3a8 <read_control_registers+0x2f8>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f04f 31ff 	mov.w	r1, #4294967295
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7f9 f954 	bl	800636c <osMutexWait>

	fm25v02_read(2*SECURITY_CONTROL_REG, &status_reg_temp_h);
 800d0c4:	1dfb      	adds	r3, r7, #7
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	f242 1020 	movw	r0, #8480	; 0x2120
 800d0cc:	f7fe f9e6 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*SECURITY_CONTROL_REG+1, &status_reg_temp_l);
 800d0d0:	1dbb      	adds	r3, r7, #6
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	f242 1021 	movw	r0, #8481	; 0x2121
 800d0d8:	f7fe f9e0 	bl	800b49c <fm25v02_read>
	control_registers.security_control_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d0dc:	79fb      	ldrb	r3, [r7, #7]
 800d0de:	021b      	lsls	r3, r3, #8
 800d0e0:	b21a      	sxth	r2, r3
 800d0e2:	79bb      	ldrb	r3, [r7, #6]
 800d0e4:	b21b      	sxth	r3, r3
 800d0e6:	4313      	orrs	r3, r2
 800d0e8:	b21b      	sxth	r3, r3
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	4baf      	ldr	r3, [pc, #700]	; (800d3ac <read_control_registers+0x2fc>)
 800d0ee:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*CONTROL_LOOP_REG, &status_reg_temp_h);
 800d0f0:	1dfb      	adds	r3, r7, #7
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	f242 1022 	movw	r0, #8482	; 0x2122
 800d0f8:	f7fe f9d0 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CONTROL_LOOP_REG+1, &status_reg_temp_l);
 800d0fc:	1dbb      	adds	r3, r7, #6
 800d0fe:	4619      	mov	r1, r3
 800d100:	f242 1023 	movw	r0, #8483	; 0x2123
 800d104:	f7fe f9ca 	bl	800b49c <fm25v02_read>
	control_registers.control_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d108:	79fb      	ldrb	r3, [r7, #7]
 800d10a:	021b      	lsls	r3, r3, #8
 800d10c:	b21a      	sxth	r2, r3
 800d10e:	79bb      	ldrb	r3, [r7, #6]
 800d110:	b21b      	sxth	r3, r3
 800d112:	4313      	orrs	r3, r2
 800d114:	b21b      	sxth	r3, r3
 800d116:	b29a      	uxth	r2, r3
 800d118:	4ba4      	ldr	r3, [pc, #656]	; (800d3ac <read_control_registers+0x2fc>)
 800d11a:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*FILTER_TIME_LOOP_REG, &status_reg_temp_h);
 800d11c:	1dfb      	adds	r3, r7, #7
 800d11e:	4619      	mov	r1, r3
 800d120:	f242 1024 	movw	r0, #8484	; 0x2124
 800d124:	f7fe f9ba 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*FILTER_TIME_LOOP_REG+1, &status_reg_temp_l);
 800d128:	1dbb      	adds	r3, r7, #6
 800d12a:	4619      	mov	r1, r3
 800d12c:	f242 1025 	movw	r0, #8485	; 0x2125
 800d130:	f7fe f9b4 	bl	800b49c <fm25v02_read>
	control_registers.filter_time_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d134:	79fb      	ldrb	r3, [r7, #7]
 800d136:	021b      	lsls	r3, r3, #8
 800d138:	b21a      	sxth	r2, r3
 800d13a:	79bb      	ldrb	r3, [r7, #6]
 800d13c:	b21b      	sxth	r3, r3
 800d13e:	4313      	orrs	r3, r2
 800d140:	b21b      	sxth	r3, r3
 800d142:	b29a      	uxth	r2, r3
 800d144:	4b99      	ldr	r3, [pc, #612]	; (800d3ac <read_control_registers+0x2fc>)
 800d146:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG, &status_reg_temp_h);
 800d148:	1dfb      	adds	r3, r7, #7
 800d14a:	4619      	mov	r1, r3
 800d14c:	f242 1026 	movw	r0, #8486	; 0x2126
 800d150:	f7fe f9a4 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG+1, &status_reg_temp_l);
 800d154:	1dbb      	adds	r3, r7, #6
 800d156:	4619      	mov	r1, r3
 800d158:	f242 1027 	movw	r0, #8487	; 0x2127
 800d15c:	f7fe f99e 	bl	800b49c <fm25v02_read>
	control_registers.quantity_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d160:	79fb      	ldrb	r3, [r7, #7]
 800d162:	021b      	lsls	r3, r3, #8
 800d164:	b21a      	sxth	r2, r3
 800d166:	79bb      	ldrb	r3, [r7, #6]
 800d168:	b21b      	sxth	r3, r3
 800d16a:	4313      	orrs	r3, r2
 800d16c:	b21b      	sxth	r3, r3
 800d16e:	b29a      	uxth	r2, r3
 800d170:	4b8e      	ldr	r3, [pc, #568]	; (800d3ac <read_control_registers+0x2fc>)
 800d172:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*TIME_FALSE_LOOP_REG, &status_reg_temp_h);
 800d174:	1dfb      	adds	r3, r7, #7
 800d176:	4619      	mov	r1, r3
 800d178:	f242 1028 	movw	r0, #8488	; 0x2128
 800d17c:	f7fe f98e 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_FALSE_LOOP_REG+1, &status_reg_temp_l);
 800d180:	1dbb      	adds	r3, r7, #6
 800d182:	4619      	mov	r1, r3
 800d184:	f242 1029 	movw	r0, #8489	; 0x2129
 800d188:	f7fe f988 	bl	800b49c <fm25v02_read>
	control_registers.time_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d18c:	79fb      	ldrb	r3, [r7, #7]
 800d18e:	021b      	lsls	r3, r3, #8
 800d190:	b21a      	sxth	r2, r3
 800d192:	79bb      	ldrb	r3, [r7, #6]
 800d194:	b21b      	sxth	r3, r3
 800d196:	4313      	orrs	r3, r2
 800d198:	b21b      	sxth	r3, r3
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	4b83      	ldr	r3, [pc, #524]	; (800d3ac <read_control_registers+0x2fc>)
 800d19e:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*ALARM_LOOP_CLEAR_REG, &status_reg_temp_h);
 800d1a0:	1dfb      	adds	r3, r7, #7
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	f242 102a 	movw	r0, #8490	; 0x212a
 800d1a8:	f7fe f978 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 800d1ac:	1dbb      	adds	r3, r7, #6
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	f242 102b 	movw	r0, #8491	; 0x212b
 800d1b4:	f7fe f972 	bl	800b49c <fm25v02_read>
	control_registers.alarm_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d1b8:	79fb      	ldrb	r3, [r7, #7]
 800d1ba:	021b      	lsls	r3, r3, #8
 800d1bc:	b21a      	sxth	r2, r3
 800d1be:	79bb      	ldrb	r3, [r7, #6]
 800d1c0:	b21b      	sxth	r3, r3
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	b21b      	sxth	r3, r3
 800d1c6:	b29a      	uxth	r2, r3
 800d1c8:	4b78      	ldr	r3, [pc, #480]	; (800d3ac <read_control_registers+0x2fc>)
 800d1ca:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*FALSE_LOOP_CLEAR_REG, &status_reg_temp_h);
 800d1cc:	1dfb      	adds	r3, r7, #7
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	f242 102c 	movw	r0, #8492	; 0x212c
 800d1d4:	f7fe f962 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*FALSE_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 800d1d8:	1dbb      	adds	r3, r7, #6
 800d1da:	4619      	mov	r1, r3
 800d1dc:	f242 102d 	movw	r0, #8493	; 0x212d
 800d1e0:	f7fe f95c 	bl	800b49c <fm25v02_read>
	control_registers.false_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d1e4:	79fb      	ldrb	r3, [r7, #7]
 800d1e6:	021b      	lsls	r3, r3, #8
 800d1e8:	b21a      	sxth	r2, r3
 800d1ea:	79bb      	ldrb	r3, [r7, #6]
 800d1ec:	b21b      	sxth	r3, r3
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	b21b      	sxth	r3, r3
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	4b6d      	ldr	r3, [pc, #436]	; (800d3ac <read_control_registers+0x2fc>)
 800d1f6:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*SECURITY_TIME_MAX_REG, &status_reg_temp_h);
 800d1f8:	1dfb      	adds	r3, r7, #7
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	f242 102e 	movw	r0, #8494	; 0x212e
 800d200:	f7fe f94c 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*SECURITY_TIME_MAX_REG+1, &status_reg_temp_l);
 800d204:	1dbb      	adds	r3, r7, #6
 800d206:	4619      	mov	r1, r3
 800d208:	f242 102f 	movw	r0, #8495	; 0x212f
 800d20c:	f7fe f946 	bl	800b49c <fm25v02_read>
	control_registers.security_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d210:	79fb      	ldrb	r3, [r7, #7]
 800d212:	021b      	lsls	r3, r3, #8
 800d214:	b21a      	sxth	r2, r3
 800d216:	79bb      	ldrb	r3, [r7, #6]
 800d218:	b21b      	sxth	r3, r3
 800d21a:	4313      	orrs	r3, r2
 800d21c:	b21b      	sxth	r3, r3
 800d21e:	b29a      	uxth	r2, r3
 800d220:	4b62      	ldr	r3, [pc, #392]	; (800d3ac <read_control_registers+0x2fc>)
 800d222:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_UPDATE_REG, &status_reg_temp_h);
 800d224:	1dfb      	adds	r3, r7, #7
 800d226:	4619      	mov	r1, r3
 800d228:	f242 1030 	movw	r0, #8496	; 0x2130
 800d22c:	f7fe f936 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_UPDATE_REG+1, &status_reg_temp_l);
 800d230:	1dbb      	adds	r3, r7, #6
 800d232:	4619      	mov	r1, r3
 800d234:	f242 1031 	movw	r0, #8497	; 0x2131
 800d238:	f7fe f930 	bl	800b49c <fm25v02_read>
	control_registers.time_update_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d23c:	79fb      	ldrb	r3, [r7, #7]
 800d23e:	021b      	lsls	r3, r3, #8
 800d240:	b21a      	sxth	r2, r3
 800d242:	79bb      	ldrb	r3, [r7, #6]
 800d244:	b21b      	sxth	r3, r3
 800d246:	4313      	orrs	r3, r2
 800d248:	b21b      	sxth	r3, r3
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	4b57      	ldr	r3, [pc, #348]	; (800d3ac <read_control_registers+0x2fc>)
 800d24e:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_YEAR_REG, &status_reg_temp_h);
 800d250:	1dfb      	adds	r3, r7, #7
 800d252:	4619      	mov	r1, r3
 800d254:	f242 1032 	movw	r0, #8498	; 0x2132
 800d258:	f7fe f920 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_YEAR_REG+1, &status_reg_temp_l);
 800d25c:	1dbb      	adds	r3, r7, #6
 800d25e:	4619      	mov	r1, r3
 800d260:	f242 1033 	movw	r0, #8499	; 0x2133
 800d264:	f7fe f91a 	bl	800b49c <fm25v02_read>
	control_registers.time_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d268:	79fb      	ldrb	r3, [r7, #7]
 800d26a:	021b      	lsls	r3, r3, #8
 800d26c:	b21a      	sxth	r2, r3
 800d26e:	79bb      	ldrb	r3, [r7, #6]
 800d270:	b21b      	sxth	r3, r3
 800d272:	4313      	orrs	r3, r2
 800d274:	b21b      	sxth	r3, r3
 800d276:	b29a      	uxth	r2, r3
 800d278:	4b4c      	ldr	r3, [pc, #304]	; (800d3ac <read_control_registers+0x2fc>)
 800d27a:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_MONTH_REG, &status_reg_temp_h);
 800d27c:	1dfb      	adds	r3, r7, #7
 800d27e:	4619      	mov	r1, r3
 800d280:	f242 1034 	movw	r0, #8500	; 0x2134
 800d284:	f7fe f90a 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_MONTH_REG+1, &status_reg_temp_l);
 800d288:	1dbb      	adds	r3, r7, #6
 800d28a:	4619      	mov	r1, r3
 800d28c:	f242 1035 	movw	r0, #8501	; 0x2135
 800d290:	f7fe f904 	bl	800b49c <fm25v02_read>
	control_registers.time_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d294:	79fb      	ldrb	r3, [r7, #7]
 800d296:	021b      	lsls	r3, r3, #8
 800d298:	b21a      	sxth	r2, r3
 800d29a:	79bb      	ldrb	r3, [r7, #6]
 800d29c:	b21b      	sxth	r3, r3
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	b21b      	sxth	r3, r3
 800d2a2:	b29a      	uxth	r2, r3
 800d2a4:	4b41      	ldr	r3, [pc, #260]	; (800d3ac <read_control_registers+0x2fc>)
 800d2a6:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_DAY_REG, &status_reg_temp_h);
 800d2a8:	1dfb      	adds	r3, r7, #7
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	f242 1036 	movw	r0, #8502	; 0x2136
 800d2b0:	f7fe f8f4 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_DAY_REG+1, &status_reg_temp_l);
 800d2b4:	1dbb      	adds	r3, r7, #6
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	f242 1037 	movw	r0, #8503	; 0x2137
 800d2bc:	f7fe f8ee 	bl	800b49c <fm25v02_read>
	control_registers.time_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d2c0:	79fb      	ldrb	r3, [r7, #7]
 800d2c2:	021b      	lsls	r3, r3, #8
 800d2c4:	b21a      	sxth	r2, r3
 800d2c6:	79bb      	ldrb	r3, [r7, #6]
 800d2c8:	b21b      	sxth	r3, r3
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	b21b      	sxth	r3, r3
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	4b36      	ldr	r3, [pc, #216]	; (800d3ac <read_control_registers+0x2fc>)
 800d2d2:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*TIME_HOUR_REG, &status_reg_temp_h);
 800d2d4:	1dfb      	adds	r3, r7, #7
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	f242 1038 	movw	r0, #8504	; 0x2138
 800d2dc:	f7fe f8de 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_HOUR_REG+1, &status_reg_temp_l);
 800d2e0:	1dbb      	adds	r3, r7, #6
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	f242 1039 	movw	r0, #8505	; 0x2139
 800d2e8:	f7fe f8d8 	bl	800b49c <fm25v02_read>
	control_registers.time_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d2ec:	79fb      	ldrb	r3, [r7, #7]
 800d2ee:	021b      	lsls	r3, r3, #8
 800d2f0:	b21a      	sxth	r2, r3
 800d2f2:	79bb      	ldrb	r3, [r7, #6]
 800d2f4:	b21b      	sxth	r3, r3
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	b21b      	sxth	r3, r3
 800d2fa:	b29a      	uxth	r2, r3
 800d2fc:	4b2b      	ldr	r3, [pc, #172]	; (800d3ac <read_control_registers+0x2fc>)
 800d2fe:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*TIME_MINUTE_REG, &status_reg_temp_h);
 800d300:	1dfb      	adds	r3, r7, #7
 800d302:	4619      	mov	r1, r3
 800d304:	f242 103a 	movw	r0, #8506	; 0x213a
 800d308:	f7fe f8c8 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_MINUTE_REG+1, &status_reg_temp_l);
 800d30c:	1dbb      	adds	r3, r7, #6
 800d30e:	4619      	mov	r1, r3
 800d310:	f242 103b 	movw	r0, #8507	; 0x213b
 800d314:	f7fe f8c2 	bl	800b49c <fm25v02_read>
	control_registers.time_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d318:	79fb      	ldrb	r3, [r7, #7]
 800d31a:	021b      	lsls	r3, r3, #8
 800d31c:	b21a      	sxth	r2, r3
 800d31e:	79bb      	ldrb	r3, [r7, #6]
 800d320:	b21b      	sxth	r3, r3
 800d322:	4313      	orrs	r3, r2
 800d324:	b21b      	sxth	r3, r3
 800d326:	b29a      	uxth	r2, r3
 800d328:	4b20      	ldr	r3, [pc, #128]	; (800d3ac <read_control_registers+0x2fc>)
 800d32a:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*TIME_SECONDS_REG, &status_reg_temp_h);
 800d32c:	1dfb      	adds	r3, r7, #7
 800d32e:	4619      	mov	r1, r3
 800d330:	f242 103c 	movw	r0, #8508	; 0x213c
 800d334:	f7fe f8b2 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_SECONDS_REG+1, &status_reg_temp_l);
 800d338:	1dbb      	adds	r3, r7, #6
 800d33a:	4619      	mov	r1, r3
 800d33c:	f242 103d 	movw	r0, #8509	; 0x213d
 800d340:	f7fe f8ac 	bl	800b49c <fm25v02_read>
	control_registers.time_seconds_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d344:	79fb      	ldrb	r3, [r7, #7]
 800d346:	021b      	lsls	r3, r3, #8
 800d348:	b21a      	sxth	r2, r3
 800d34a:	79bb      	ldrb	r3, [r7, #6]
 800d34c:	b21b      	sxth	r3, r3
 800d34e:	4313      	orrs	r3, r2
 800d350:	b21b      	sxth	r3, r3
 800d352:	b29a      	uxth	r2, r3
 800d354:	4b15      	ldr	r3, [pc, #84]	; (800d3ac <read_control_registers+0x2fc>)
 800d356:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*TIME_WEEKDAY_REG, &status_reg_temp_h);
 800d358:	1dfb      	adds	r3, r7, #7
 800d35a:	4619      	mov	r1, r3
 800d35c:	f242 103e 	movw	r0, #8510	; 0x213e
 800d360:	f7fe f89c 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_WEEKDAY_REG+1, &status_reg_temp_l);
 800d364:	1dbb      	adds	r3, r7, #6
 800d366:	4619      	mov	r1, r3
 800d368:	f242 103f 	movw	r0, #8511	; 0x213f
 800d36c:	f7fe f896 	bl	800b49c <fm25v02_read>
	control_registers.time_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d370:	79fb      	ldrb	r3, [r7, #7]
 800d372:	021b      	lsls	r3, r3, #8
 800d374:	b21a      	sxth	r2, r3
 800d376:	79bb      	ldrb	r3, [r7, #6]
 800d378:	b21b      	sxth	r3, r3
 800d37a:	4313      	orrs	r3, r2
 800d37c:	b21b      	sxth	r3, r3
 800d37e:	b29a      	uxth	r2, r3
 800d380:	4b0a      	ldr	r3, [pc, #40]	; (800d3ac <read_control_registers+0x2fc>)
 800d382:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG, &status_reg_temp_h);
 800d384:	1dfb      	adds	r3, r7, #7
 800d386:	4619      	mov	r1, r3
 800d388:	f44f 5005 	mov.w	r0, #8512	; 0x2140
 800d38c:	f7fe f886 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG+1, &status_reg_temp_l);
 800d390:	1dbb      	adds	r3, r7, #6
 800d392:	4619      	mov	r1, r3
 800d394:	f242 1041 	movw	r0, #8513	; 0x2141
 800d398:	f7fe f880 	bl	800b49c <fm25v02_read>
	control_registers.modbus_idle_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d39c:	79fb      	ldrb	r3, [r7, #7]
 800d39e:	021b      	lsls	r3, r3, #8
 800d3a0:	b21a      	sxth	r2, r3
 800d3a2:	79bb      	ldrb	r3, [r7, #6]
 800d3a4:	e004      	b.n	800d3b0 <read_control_registers+0x300>
 800d3a6:	bf00      	nop
 800d3a8:	200095d8 	.word	0x200095d8
 800d3ac:	20009ee0 	.word	0x20009ee0
 800d3b0:	b21b      	sxth	r3, r3
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	b21b      	sxth	r3, r3
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	4bbb      	ldr	r3, [pc, #748]	; (800d6a8 <read_control_registers+0x5f8>)
 800d3ba:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*TIME_CONNECTION_TEST_REG, &status_reg_temp_h);
 800d3bc:	1dfb      	adds	r3, r7, #7
 800d3be:	4619      	mov	r1, r3
 800d3c0:	f242 1042 	movw	r0, #8514	; 0x2142
 800d3c4:	f7fe f86a 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*TIME_CONNECTION_TEST_REG+1, &status_reg_temp_l);
 800d3c8:	1dbb      	adds	r3, r7, #6
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	f242 1043 	movw	r0, #8515	; 0x2143
 800d3d0:	f7fe f864 	bl	800b49c <fm25v02_read>
	control_registers.time_connection_test_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d3d4:	79fb      	ldrb	r3, [r7, #7]
 800d3d6:	021b      	lsls	r3, r3, #8
 800d3d8:	b21a      	sxth	r2, r3
 800d3da:	79bb      	ldrb	r3, [r7, #6]
 800d3dc:	b21b      	sxth	r3, r3
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	b21b      	sxth	r3, r3
 800d3e2:	b29a      	uxth	r2, r3
 800d3e4:	4bb0      	ldr	r3, [pc, #704]	; (800d6a8 <read_control_registers+0x5f8>)
 800d3e6:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*EVENT_READ_REG, &status_reg_temp_h);
 800d3e8:	1dfb      	adds	r3, r7, #7
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	f242 1044 	movw	r0, #8516	; 0x2144
 800d3f0:	f7fe f854 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*EVENT_READ_REG+1, &status_reg_temp_l);
 800d3f4:	1dbb      	adds	r3, r7, #6
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	f242 1045 	movw	r0, #8517	; 0x2145
 800d3fc:	f7fe f84e 	bl	800b49c <fm25v02_read>
	control_registers.event_read_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d400:	79fb      	ldrb	r3, [r7, #7]
 800d402:	021b      	lsls	r3, r3, #8
 800d404:	b21a      	sxth	r2, r3
 800d406:	79bb      	ldrb	r3, [r7, #6]
 800d408:	b21b      	sxth	r3, r3
 800d40a:	4313      	orrs	r3, r2
 800d40c:	b21b      	sxth	r3, r3
 800d40e:	b29a      	uxth	r2, r3
 800d410:	4ba5      	ldr	r3, [pc, #660]	; (800d6a8 <read_control_registers+0x5f8>)
 800d412:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG, &status_reg_temp_h);
 800d414:	1dfb      	adds	r3, r7, #7
 800d416:	4619      	mov	r1, r3
 800d418:	f242 1046 	movw	r0, #8518	; 0x2146
 800d41c:	f7fe f83e 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG+1, &status_reg_temp_l);
 800d420:	1dbb      	adds	r3, r7, #6
 800d422:	4619      	mov	r1, r3
 800d424:	f242 1047 	movw	r0, #8519	; 0x2147
 800d428:	f7fe f838 	bl	800b49c <fm25v02_read>
	control_registers.event_address_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d42c:	79fb      	ldrb	r3, [r7, #7]
 800d42e:	021b      	lsls	r3, r3, #8
 800d430:	b21a      	sxth	r2, r3
 800d432:	79bb      	ldrb	r3, [r7, #6]
 800d434:	b21b      	sxth	r3, r3
 800d436:	4313      	orrs	r3, r2
 800d438:	b21b      	sxth	r3, r3
 800d43a:	b29a      	uxth	r2, r3
 800d43c:	4b9a      	ldr	r3, [pc, #616]	; (800d6a8 <read_control_registers+0x5f8>)
 800d43e:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*EVENT_ADDRESS_LOW_REG, &status_reg_temp_h);
 800d440:	1dfb      	adds	r3, r7, #7
 800d442:	4619      	mov	r1, r3
 800d444:	f242 1048 	movw	r0, #8520	; 0x2148
 800d448:	f7fe f828 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_LOW_REG+1, &status_reg_temp_l);
 800d44c:	1dbb      	adds	r3, r7, #6
 800d44e:	4619      	mov	r1, r3
 800d450:	f242 1049 	movw	r0, #8521	; 0x2149
 800d454:	f7fe f822 	bl	800b49c <fm25v02_read>
	control_registers.event_address_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d458:	79fb      	ldrb	r3, [r7, #7]
 800d45a:	021b      	lsls	r3, r3, #8
 800d45c:	b21a      	sxth	r2, r3
 800d45e:	79bb      	ldrb	r3, [r7, #6]
 800d460:	b21b      	sxth	r3, r3
 800d462:	4313      	orrs	r3, r2
 800d464:	b21b      	sxth	r3, r3
 800d466:	b29a      	uxth	r2, r3
 800d468:	4b8f      	ldr	r3, [pc, #572]	; (800d6a8 <read_control_registers+0x5f8>)
 800d46a:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG, &status_reg_temp_h);
 800d46c:	1dfb      	adds	r3, r7, #7
 800d46e:	4619      	mov	r1, r3
 800d470:	f242 104a 	movw	r0, #8522	; 0x214a
 800d474:	f7fe f812 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG+1, &status_reg_temp_l);
 800d478:	1dbb      	adds	r3, r7, #6
 800d47a:	4619      	mov	r1, r3
 800d47c:	f242 104b 	movw	r0, #8523	; 0x214b
 800d480:	f7fe f80c 	bl	800b49c <fm25v02_read>
	control_registers.modem_ring_try_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d484:	79fb      	ldrb	r3, [r7, #7]
 800d486:	021b      	lsls	r3, r3, #8
 800d488:	b21a      	sxth	r2, r3
 800d48a:	79bb      	ldrb	r3, [r7, #6]
 800d48c:	b21b      	sxth	r3, r3
 800d48e:	4313      	orrs	r3, r2
 800d490:	b21b      	sxth	r3, r3
 800d492:	b29a      	uxth	r2, r3
 800d494:	4b84      	ldr	r3, [pc, #528]	; (800d6a8 <read_control_registers+0x5f8>)
 800d496:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG, &status_reg_temp_h);
 800d498:	1dfb      	adds	r3, r7, #7
 800d49a:	4619      	mov	r1, r3
 800d49c:	f242 104c 	movw	r0, #8524	; 0x214c
 800d4a0:	f7fd fffc 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG+1, &status_reg_temp_l);
 800d4a4:	1dbb      	adds	r3, r7, #6
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	f242 104d 	movw	r0, #8525	; 0x214d
 800d4ac:	f7fd fff6 	bl	800b49c <fm25v02_read>
	control_registers.modem_ring_pause_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d4b0:	79fb      	ldrb	r3, [r7, #7]
 800d4b2:	021b      	lsls	r3, r3, #8
 800d4b4:	b21a      	sxth	r2, r3
 800d4b6:	79bb      	ldrb	r3, [r7, #6]
 800d4b8:	b21b      	sxth	r3, r3
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	b21b      	sxth	r3, r3
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	4b79      	ldr	r3, [pc, #484]	; (800d6a8 <read_control_registers+0x5f8>)
 800d4c2:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG, &status_reg_temp_h);
 800d4c4:	1dfb      	adds	r3, r7, #7
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	f242 104e 	movw	r0, #8526	; 0x214e
 800d4cc:	f7fd ffe6 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG+1, &status_reg_temp_l);
 800d4d0:	1dbb      	adds	r3, r7, #6
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	f242 104f 	movw	r0, #8527	; 0x214f
 800d4d8:	f7fd ffe0 	bl	800b49c <fm25v02_read>
	control_registers.modem_ring_pause2_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d4dc:	79fb      	ldrb	r3, [r7, #7]
 800d4de:	021b      	lsls	r3, r3, #8
 800d4e0:	b21a      	sxth	r2, r3
 800d4e2:	79bb      	ldrb	r3, [r7, #6]
 800d4e4:	b21b      	sxth	r3, r3
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	b21b      	sxth	r3, r3
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	4b6e      	ldr	r3, [pc, #440]	; (800d6a8 <read_control_registers+0x5f8>)
 800d4ee:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*RING_MINUTE_TIME_REG, &status_reg_temp_h);
 800d4f0:	1dfb      	adds	r3, r7, #7
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	f242 1050 	movw	r0, #8528	; 0x2150
 800d4f8:	f7fd ffd0 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*RING_MINUTE_TIME_REG+1, &status_reg_temp_l);
 800d4fc:	1dbb      	adds	r3, r7, #6
 800d4fe:	4619      	mov	r1, r3
 800d500:	f242 1051 	movw	r0, #8529	; 0x2151
 800d504:	f7fd ffca 	bl	800b49c <fm25v02_read>
	control_registers.ring_minute_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d508:	79fb      	ldrb	r3, [r7, #7]
 800d50a:	021b      	lsls	r3, r3, #8
 800d50c:	b21a      	sxth	r2, r3
 800d50e:	79bb      	ldrb	r3, [r7, #6]
 800d510:	b21b      	sxth	r3, r3
 800d512:	4313      	orrs	r3, r2
 800d514:	b21b      	sxth	r3, r3
 800d516:	b29a      	uxth	r2, r3
 800d518:	4b63      	ldr	r3, [pc, #396]	; (800d6a8 <read_control_registers+0x5f8>)
 800d51a:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*RING_HOUR_TIME_REG, &status_reg_temp_h);
 800d51c:	1dfb      	adds	r3, r7, #7
 800d51e:	4619      	mov	r1, r3
 800d520:	f242 1052 	movw	r0, #8530	; 0x2152
 800d524:	f7fd ffba 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*RING_HOUR_TIME_REG+1, &status_reg_temp_l);
 800d528:	1dbb      	adds	r3, r7, #6
 800d52a:	4619      	mov	r1, r3
 800d52c:	f242 1053 	movw	r0, #8531	; 0x2153
 800d530:	f7fd ffb4 	bl	800b49c <fm25v02_read>
	control_registers.ring_hour_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d534:	79fb      	ldrb	r3, [r7, #7]
 800d536:	021b      	lsls	r3, r3, #8
 800d538:	b21a      	sxth	r2, r3
 800d53a:	79bb      	ldrb	r3, [r7, #6]
 800d53c:	b21b      	sxth	r3, r3
 800d53e:	4313      	orrs	r3, r2
 800d540:	b21b      	sxth	r3, r3
 800d542:	b29a      	uxth	r2, r3
 800d544:	4b58      	ldr	r3, [pc, #352]	; (800d6a8 <read_control_registers+0x5f8>)
 800d546:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*ID_HIGH_REG, &status_reg_temp_h);
 800d548:	1dfb      	adds	r3, r7, #7
 800d54a:	4619      	mov	r1, r3
 800d54c:	f242 1056 	movw	r0, #8534	; 0x2156
 800d550:	f7fd ffa4 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ID_HIGH_REG+1, &status_reg_temp_l);
 800d554:	1dbb      	adds	r3, r7, #6
 800d556:	4619      	mov	r1, r3
 800d558:	f242 1057 	movw	r0, #8535	; 0x2157
 800d55c:	f7fd ff9e 	bl	800b49c <fm25v02_read>
	control_registers.id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d560:	79fb      	ldrb	r3, [r7, #7]
 800d562:	021b      	lsls	r3, r3, #8
 800d564:	b21a      	sxth	r2, r3
 800d566:	79bb      	ldrb	r3, [r7, #6]
 800d568:	b21b      	sxth	r3, r3
 800d56a:	4313      	orrs	r3, r2
 800d56c:	b21b      	sxth	r3, r3
 800d56e:	b29a      	uxth	r2, r3
 800d570:	4b4d      	ldr	r3, [pc, #308]	; (800d6a8 <read_control_registers+0x5f8>)
 800d572:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ID_LOW_REG, &status_reg_temp_h);
 800d574:	1dfb      	adds	r3, r7, #7
 800d576:	4619      	mov	r1, r3
 800d578:	f242 1058 	movw	r0, #8536	; 0x2158
 800d57c:	f7fd ff8e 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ID_LOW_REG+1, &status_reg_temp_l);
 800d580:	1dbb      	adds	r3, r7, #6
 800d582:	4619      	mov	r1, r3
 800d584:	f242 1059 	movw	r0, #8537	; 0x2159
 800d588:	f7fd ff88 	bl	800b49c <fm25v02_read>
	control_registers.id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d58c:	79fb      	ldrb	r3, [r7, #7]
 800d58e:	021b      	lsls	r3, r3, #8
 800d590:	b21a      	sxth	r2, r3
 800d592:	79bb      	ldrb	r3, [r7, #6]
 800d594:	b21b      	sxth	r3, r3
 800d596:	4313      	orrs	r3, r2
 800d598:	b21b      	sxth	r3, r3
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	4b42      	ldr	r3, [pc, #264]	; (800d6a8 <read_control_registers+0x5f8>)
 800d59e:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*RESET_CONTROL_REG, &status_reg_temp_h);
 800d5a0:	1dfb      	adds	r3, r7, #7
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	f242 105a 	movw	r0, #8538	; 0x215a
 800d5a8:	f7fd ff78 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*RESET_CONTROL_REG+1, &status_reg_temp_l);
 800d5ac:	1dbb      	adds	r3, r7, #6
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	f242 105b 	movw	r0, #8539	; 0x215b
 800d5b4:	f7fd ff72 	bl	800b49c <fm25v02_read>
	control_registers.reset_control_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d5b8:	79fb      	ldrb	r3, [r7, #7]
 800d5ba:	021b      	lsls	r3, r3, #8
 800d5bc:	b21a      	sxth	r2, r3
 800d5be:	79bb      	ldrb	r3, [r7, #6]
 800d5c0:	b21b      	sxth	r3, r3
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	b21b      	sxth	r3, r3
 800d5c6:	b29a      	uxth	r2, r3
 800d5c8:	4b37      	ldr	r3, [pc, #220]	; (800d6a8 <read_control_registers+0x5f8>)
 800d5ca:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*METER_POLLING_REG, &status_reg_temp_h);
 800d5cc:	1dfb      	adds	r3, r7, #7
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	f242 105c 	movw	r0, #8540	; 0x215c
 800d5d4:	f7fd ff62 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*METER_POLLING_REG+1, &status_reg_temp_l);
 800d5d8:	1dbb      	adds	r3, r7, #6
 800d5da:	4619      	mov	r1, r3
 800d5dc:	f242 105d 	movw	r0, #8541	; 0x215d
 800d5e0:	f7fd ff5c 	bl	800b49c <fm25v02_read>
	control_registers.meter_polling_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d5e4:	79fb      	ldrb	r3, [r7, #7]
 800d5e6:	021b      	lsls	r3, r3, #8
 800d5e8:	b21a      	sxth	r2, r3
 800d5ea:	79bb      	ldrb	r3, [r7, #6]
 800d5ec:	b21b      	sxth	r3, r3
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	b21b      	sxth	r3, r3
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	4b2c      	ldr	r3, [pc, #176]	; (800d6a8 <read_control_registers+0x5f8>)
 800d5f6:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*IP_1_REG, &status_reg_temp_h);
 800d5f8:	1dfb      	adds	r3, r7, #7
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	f242 105e 	movw	r0, #8542	; 0x215e
 800d600:	f7fd ff4c 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IP_1_REG+1, &status_reg_temp_l);
 800d604:	1dbb      	adds	r3, r7, #6
 800d606:	4619      	mov	r1, r3
 800d608:	f242 105f 	movw	r0, #8543	; 0x215f
 800d60c:	f7fd ff46 	bl	800b49c <fm25v02_read>
	control_registers.ip1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d610:	79fb      	ldrb	r3, [r7, #7]
 800d612:	021b      	lsls	r3, r3, #8
 800d614:	b21a      	sxth	r2, r3
 800d616:	79bb      	ldrb	r3, [r7, #6]
 800d618:	b21b      	sxth	r3, r3
 800d61a:	4313      	orrs	r3, r2
 800d61c:	b21b      	sxth	r3, r3
 800d61e:	b29a      	uxth	r2, r3
 800d620:	4b21      	ldr	r3, [pc, #132]	; (800d6a8 <read_control_registers+0x5f8>)
 800d622:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*IP_2_REG, &status_reg_temp_h);
 800d624:	1dfb      	adds	r3, r7, #7
 800d626:	4619      	mov	r1, r3
 800d628:	f242 1060 	movw	r0, #8544	; 0x2160
 800d62c:	f7fd ff36 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IP_2_REG+1, &status_reg_temp_l);
 800d630:	1dbb      	adds	r3, r7, #6
 800d632:	4619      	mov	r1, r3
 800d634:	f242 1061 	movw	r0, #8545	; 0x2161
 800d638:	f7fd ff30 	bl	800b49c <fm25v02_read>
	control_registers.ip2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d63c:	79fb      	ldrb	r3, [r7, #7]
 800d63e:	021b      	lsls	r3, r3, #8
 800d640:	b21a      	sxth	r2, r3
 800d642:	79bb      	ldrb	r3, [r7, #6]
 800d644:	b21b      	sxth	r3, r3
 800d646:	4313      	orrs	r3, r2
 800d648:	b21b      	sxth	r3, r3
 800d64a:	b29a      	uxth	r2, r3
 800d64c:	4b16      	ldr	r3, [pc, #88]	; (800d6a8 <read_control_registers+0x5f8>)
 800d64e:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*IP_3_REG, &status_reg_temp_h);
 800d650:	1dfb      	adds	r3, r7, #7
 800d652:	4619      	mov	r1, r3
 800d654:	f242 1062 	movw	r0, #8546	; 0x2162
 800d658:	f7fd ff20 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IP_3_REG+1, &status_reg_temp_l);
 800d65c:	1dbb      	adds	r3, r7, #6
 800d65e:	4619      	mov	r1, r3
 800d660:	f242 1063 	movw	r0, #8547	; 0x2163
 800d664:	f7fd ff1a 	bl	800b49c <fm25v02_read>
	control_registers.ip3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d668:	79fb      	ldrb	r3, [r7, #7]
 800d66a:	021b      	lsls	r3, r3, #8
 800d66c:	b21a      	sxth	r2, r3
 800d66e:	79bb      	ldrb	r3, [r7, #6]
 800d670:	b21b      	sxth	r3, r3
 800d672:	4313      	orrs	r3, r2
 800d674:	b21b      	sxth	r3, r3
 800d676:	b29a      	uxth	r2, r3
 800d678:	4b0b      	ldr	r3, [pc, #44]	; (800d6a8 <read_control_registers+0x5f8>)
 800d67a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*IP_4_REG, &status_reg_temp_h);
 800d67e:	1dfb      	adds	r3, r7, #7
 800d680:	4619      	mov	r1, r3
 800d682:	f242 1064 	movw	r0, #8548	; 0x2164
 800d686:	f7fd ff09 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*IP_4_REG+1, &status_reg_temp_l);
 800d68a:	1dbb      	adds	r3, r7, #6
 800d68c:	4619      	mov	r1, r3
 800d68e:	f242 1065 	movw	r0, #8549	; 0x2165
 800d692:	f7fd ff03 	bl	800b49c <fm25v02_read>
	control_registers.ip4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d696:	79fb      	ldrb	r3, [r7, #7]
 800d698:	021b      	lsls	r3, r3, #8
 800d69a:	b21a      	sxth	r2, r3
 800d69c:	79bb      	ldrb	r3, [r7, #6]
 800d69e:	b21b      	sxth	r3, r3
 800d6a0:	4313      	orrs	r3, r2
 800d6a2:	b21b      	sxth	r3, r3
 800d6a4:	e002      	b.n	800d6ac <read_control_registers+0x5fc>
 800d6a6:	bf00      	nop
 800d6a8:	20009ee0 	.word	0x20009ee0
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	4b3f      	ldr	r3, [pc, #252]	; (800d7ac <read_control_registers+0x6fc>)
 800d6b0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PORT_HIGH_REG, &status_reg_temp_h);
 800d6b4:	1dfb      	adds	r3, r7, #7
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	f242 1066 	movw	r0, #8550	; 0x2166
 800d6bc:	f7fd feee 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PORT_HIGH_REG+1, &status_reg_temp_l);
 800d6c0:	1dbb      	adds	r3, r7, #6
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	f242 1067 	movw	r0, #8551	; 0x2167
 800d6c8:	f7fd fee8 	bl	800b49c <fm25v02_read>
	control_registers.port_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d6cc:	79fb      	ldrb	r3, [r7, #7]
 800d6ce:	021b      	lsls	r3, r3, #8
 800d6d0:	b21a      	sxth	r2, r3
 800d6d2:	79bb      	ldrb	r3, [r7, #6]
 800d6d4:	b21b      	sxth	r3, r3
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	b21b      	sxth	r3, r3
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	4b33      	ldr	r3, [pc, #204]	; (800d7ac <read_control_registers+0x6fc>)
 800d6de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PORT_LOW_REG, &status_reg_temp_h);
 800d6e2:	1dfb      	adds	r3, r7, #7
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	f242 1068 	movw	r0, #8552	; 0x2168
 800d6ea:	f7fd fed7 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PORT_LOW_REG+1, &status_reg_temp_l);
 800d6ee:	1dbb      	adds	r3, r7, #6
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	f242 1069 	movw	r0, #8553	; 0x2169
 800d6f6:	f7fd fed1 	bl	800b49c <fm25v02_read>
	control_registers.port_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d6fa:	79fb      	ldrb	r3, [r7, #7]
 800d6fc:	021b      	lsls	r3, r3, #8
 800d6fe:	b21a      	sxth	r2, r3
 800d700:	79bb      	ldrb	r3, [r7, #6]
 800d702:	b21b      	sxth	r3, r3
 800d704:	4313      	orrs	r3, r2
 800d706:	b21b      	sxth	r3, r3
 800d708:	b29a      	uxth	r2, r3
 800d70a:	4b28      	ldr	r3, [pc, #160]	; (800d7ac <read_control_registers+0x6fc>)
 800d70c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*METER_ID_HIGH_REG, &status_reg_temp_h);
 800d710:	1dfb      	adds	r3, r7, #7
 800d712:	4619      	mov	r1, r3
 800d714:	f242 106a 	movw	r0, #8554	; 0x216a
 800d718:	f7fd fec0 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*METER_ID_HIGH_REG+1, &status_reg_temp_l);
 800d71c:	1dbb      	adds	r3, r7, #6
 800d71e:	4619      	mov	r1, r3
 800d720:	f242 106b 	movw	r0, #8555	; 0x216b
 800d724:	f7fd feba 	bl	800b49c <fm25v02_read>
	control_registers.meter_id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d728:	79fb      	ldrb	r3, [r7, #7]
 800d72a:	021b      	lsls	r3, r3, #8
 800d72c:	b21a      	sxth	r2, r3
 800d72e:	79bb      	ldrb	r3, [r7, #6]
 800d730:	b21b      	sxth	r3, r3
 800d732:	4313      	orrs	r3, r2
 800d734:	b21b      	sxth	r3, r3
 800d736:	b29a      	uxth	r2, r3
 800d738:	4b1c      	ldr	r3, [pc, #112]	; (800d7ac <read_control_registers+0x6fc>)
 800d73a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	fm25v02_read(2*METER_ID_LOW_REG, &status_reg_temp_h);
 800d73e:	1dfb      	adds	r3, r7, #7
 800d740:	4619      	mov	r1, r3
 800d742:	f242 106c 	movw	r0, #8556	; 0x216c
 800d746:	f7fd fea9 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*METER_ID_LOW_REG+1, &status_reg_temp_l);
 800d74a:	1dbb      	adds	r3, r7, #6
 800d74c:	4619      	mov	r1, r3
 800d74e:	f242 106d 	movw	r0, #8557	; 0x216d
 800d752:	f7fd fea3 	bl	800b49c <fm25v02_read>
	control_registers.meter_id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d756:	79fb      	ldrb	r3, [r7, #7]
 800d758:	021b      	lsls	r3, r3, #8
 800d75a:	b21a      	sxth	r2, r3
 800d75c:	79bb      	ldrb	r3, [r7, #6]
 800d75e:	b21b      	sxth	r3, r3
 800d760:	4313      	orrs	r3, r2
 800d762:	b21b      	sxth	r3, r3
 800d764:	b29a      	uxth	r2, r3
 800d766:	4b11      	ldr	r3, [pc, #68]	; (800d7ac <read_control_registers+0x6fc>)
 800d768:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	fm25v02_read(2*GPRS_CALL_REG, &status_reg_temp_h);
 800d76c:	1dfb      	adds	r3, r7, #7
 800d76e:	4619      	mov	r1, r3
 800d770:	f242 106e 	movw	r0, #8558	; 0x216e
 800d774:	f7fd fe92 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*GPRS_CALL_REG+1, &status_reg_temp_l);
 800d778:	1dbb      	adds	r3, r7, #6
 800d77a:	4619      	mov	r1, r3
 800d77c:	f242 106f 	movw	r0, #8559	; 0x216f
 800d780:	f7fd fe8c 	bl	800b49c <fm25v02_read>
	control_registers.gprs_call_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 800d784:	79fb      	ldrb	r3, [r7, #7]
 800d786:	021b      	lsls	r3, r3, #8
 800d788:	b21a      	sxth	r2, r3
 800d78a:	79bb      	ldrb	r3, [r7, #6]
 800d78c:	b21b      	sxth	r3, r3
 800d78e:	4313      	orrs	r3, r2
 800d790:	b21b      	sxth	r3, r3
 800d792:	b29a      	uxth	r2, r3
 800d794:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <read_control_registers+0x6fc>)
 800d796:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	//fm25v02_read(2*ALARM_SWITCHING_REG, &status_reg_temp_h);
	//fm25v02_read(2*ALARM_SWITCHING_REG+1, &status_reg_temp_l);
	//control_registers.alarm_switching_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;

	osMutexRelease(Fm25v02MutexHandle);
 800d79a:	4b05      	ldr	r3, [pc, #20]	; (800d7b0 <read_control_registers+0x700>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7f8 fe32 	bl	8006408 <osMutexRelease>

}
 800d7a4:	bf00      	nop
 800d7a6:	3708      	adds	r7, #8
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	20009ee0 	.word	0x20009ee0
 800d7b0:	200095d8 	.word	0x200095d8

0800d7b4 <read_bootloader_registers>:


//----Функция чтения из памяти регистров бутлоадера---------------

void read_bootloader_registers(void)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d7ba:	4bbc      	ldr	r3, [pc, #752]	; (800daac <read_bootloader_registers+0x2f8>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f04f 31ff 	mov.w	r1, #4294967295
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7f8 fdd2 	bl	800636c <osMutexWait>

	fm25v02_read(2*BOOTLOADER_VERSION_REG, &status_reg_temp_h);
 800d7c8:	1dfb      	adds	r3, r7, #7
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d7d0:	f7fd fe64 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*BOOTLOADER_VERSION_REG+1, &status_reg_temp_l);
 800d7d4:	1dbb      	adds	r3, r7, #6
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	f240 2001 	movw	r0, #513	; 0x201
 800d7dc:	f7fd fe5e 	bl	800b49c <fm25v02_read>
	bootloader_registers.bootloader_version_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d7e0:	79fb      	ldrb	r3, [r7, #7]
 800d7e2:	021b      	lsls	r3, r3, #8
 800d7e4:	b21a      	sxth	r2, r3
 800d7e6:	79bb      	ldrb	r3, [r7, #6]
 800d7e8:	b21b      	sxth	r3, r3
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	b21b      	sxth	r3, r3
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	4baf      	ldr	r3, [pc, #700]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d7f2:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800d7f4:	1dfb      	adds	r3, r7, #7
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	f44f 7001 	mov.w	r0, #516	; 0x204
 800d7fc:	f7fd fe4e 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800d800:	1dbb      	adds	r3, r7, #6
 800d802:	4619      	mov	r1, r3
 800d804:	f240 2005 	movw	r0, #517	; 0x205
 800d808:	f7fd fe48 	bl	800b49c <fm25v02_read>
	bootloader_registers.start_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d80c:	79fb      	ldrb	r3, [r7, #7]
 800d80e:	021b      	lsls	r3, r3, #8
 800d810:	b21a      	sxth	r2, r3
 800d812:	79bb      	ldrb	r3, [r7, #6]
 800d814:	b21b      	sxth	r3, r3
 800d816:	4313      	orrs	r3, r2
 800d818:	b21b      	sxth	r3, r3
 800d81a:	b29a      	uxth	r2, r3
 800d81c:	4ba4      	ldr	r3, [pc, #656]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d81e:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800d820:	1dfb      	adds	r3, r7, #7
 800d822:	4619      	mov	r1, r3
 800d824:	f240 2006 	movw	r0, #518	; 0x206
 800d828:	f7fd fe38 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800d82c:	1dbb      	adds	r3, r7, #6
 800d82e:	4619      	mov	r1, r3
 800d830:	f240 2007 	movw	r0, #519	; 0x207
 800d834:	f7fd fe32 	bl	800b49c <fm25v02_read>
	bootloader_registers.start_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	021b      	lsls	r3, r3, #8
 800d83c:	b21a      	sxth	r2, r3
 800d83e:	79bb      	ldrb	r3, [r7, #6]
 800d840:	b21b      	sxth	r3, r3
 800d842:	4313      	orrs	r3, r2
 800d844:	b21b      	sxth	r3, r3
 800d846:	b29a      	uxth	r2, r3
 800d848:	4b99      	ldr	r3, [pc, #612]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d84a:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800d84c:	1dfb      	adds	r3, r7, #7
 800d84e:	4619      	mov	r1, r3
 800d850:	f44f 7002 	mov.w	r0, #520	; 0x208
 800d854:	f7fd fe22 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800d858:	1dbb      	adds	r3, r7, #6
 800d85a:	4619      	mov	r1, r3
 800d85c:	f240 2009 	movw	r0, #521	; 0x209
 800d860:	f7fd fe1c 	bl	800b49c <fm25v02_read>
	bootloader_registers.start_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d864:	79fb      	ldrb	r3, [r7, #7]
 800d866:	021b      	lsls	r3, r3, #8
 800d868:	b21a      	sxth	r2, r3
 800d86a:	79bb      	ldrb	r3, [r7, #6]
 800d86c:	b21b      	sxth	r3, r3
 800d86e:	4313      	orrs	r3, r2
 800d870:	b21b      	sxth	r3, r3
 800d872:	b29a      	uxth	r2, r3
 800d874:	4b8e      	ldr	r3, [pc, #568]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d876:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800d878:	1dfb      	adds	r3, r7, #7
 800d87a:	4619      	mov	r1, r3
 800d87c:	f240 200a 	movw	r0, #522	; 0x20a
 800d880:	f7fd fe0c 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800d884:	1dbb      	adds	r3, r7, #6
 800d886:	4619      	mov	r1, r3
 800d888:	f240 200b 	movw	r0, #523	; 0x20b
 800d88c:	f7fd fe06 	bl	800b49c <fm25v02_read>
	bootloader_registers.start_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d890:	79fb      	ldrb	r3, [r7, #7]
 800d892:	021b      	lsls	r3, r3, #8
 800d894:	b21a      	sxth	r2, r3
 800d896:	79bb      	ldrb	r3, [r7, #6]
 800d898:	b21b      	sxth	r3, r3
 800d89a:	4313      	orrs	r3, r2
 800d89c:	b21b      	sxth	r3, r3
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	4b83      	ldr	r3, [pc, #524]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d8a2:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800d8a4:	1dfb      	adds	r3, r7, #7
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800d8ac:	f7fd fdf6 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800d8b0:	1dbb      	adds	r3, r7, #6
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	f240 200d 	movw	r0, #525	; 0x20d
 800d8b8:	f7fd fdf0 	bl	800b49c <fm25v02_read>
	bootloader_registers.end_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d8bc:	79fb      	ldrb	r3, [r7, #7]
 800d8be:	021b      	lsls	r3, r3, #8
 800d8c0:	b21a      	sxth	r2, r3
 800d8c2:	79bb      	ldrb	r3, [r7, #6]
 800d8c4:	b21b      	sxth	r3, r3
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	b21b      	sxth	r3, r3
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	4b78      	ldr	r3, [pc, #480]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d8ce:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800d8d0:	1dfb      	adds	r3, r7, #7
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	f240 200e 	movw	r0, #526	; 0x20e
 800d8d8:	f7fd fde0 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800d8dc:	1dbb      	adds	r3, r7, #6
 800d8de:	4619      	mov	r1, r3
 800d8e0:	f240 200f 	movw	r0, #527	; 0x20f
 800d8e4:	f7fd fdda 	bl	800b49c <fm25v02_read>
	bootloader_registers.end_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d8e8:	79fb      	ldrb	r3, [r7, #7]
 800d8ea:	021b      	lsls	r3, r3, #8
 800d8ec:	b21a      	sxth	r2, r3
 800d8ee:	79bb      	ldrb	r3, [r7, #6]
 800d8f0:	b21b      	sxth	r3, r3
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	b21b      	sxth	r3, r3
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	4b6d      	ldr	r3, [pc, #436]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d8fa:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800d8fc:	1dfb      	adds	r3, r7, #7
 800d8fe:	4619      	mov	r1, r3
 800d900:	f44f 7004 	mov.w	r0, #528	; 0x210
 800d904:	f7fd fdca 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800d908:	1dbb      	adds	r3, r7, #6
 800d90a:	4619      	mov	r1, r3
 800d90c:	f240 2011 	movw	r0, #529	; 0x211
 800d910:	f7fd fdc4 	bl	800b49c <fm25v02_read>
	bootloader_registers.crc_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d914:	79fb      	ldrb	r3, [r7, #7]
 800d916:	021b      	lsls	r3, r3, #8
 800d918:	b21a      	sxth	r2, r3
 800d91a:	79bb      	ldrb	r3, [r7, #6]
 800d91c:	b21b      	sxth	r3, r3
 800d91e:	4313      	orrs	r3, r2
 800d920:	b21b      	sxth	r3, r3
 800d922:	b29a      	uxth	r2, r3
 800d924:	4b62      	ldr	r3, [pc, #392]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d926:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CRC_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800d928:	1dfb      	adds	r3, r7, #7
 800d92a:	4619      	mov	r1, r3
 800d92c:	f240 2012 	movw	r0, #530	; 0x212
 800d930:	f7fd fdb4 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800d934:	1dbb      	adds	r3, r7, #6
 800d936:	4619      	mov	r1, r3
 800d938:	f240 2013 	movw	r0, #531	; 0x213
 800d93c:	f7fd fdae 	bl	800b49c <fm25v02_read>
	bootloader_registers.crc_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d940:	79fb      	ldrb	r3, [r7, #7]
 800d942:	021b      	lsls	r3, r3, #8
 800d944:	b21a      	sxth	r2, r3
 800d946:	79bb      	ldrb	r3, [r7, #6]
 800d948:	b21b      	sxth	r3, r3
 800d94a:	4313      	orrs	r3, r2
 800d94c:	b21b      	sxth	r3, r3
 800d94e:	b29a      	uxth	r2, r3
 800d950:	4b57      	ldr	r3, [pc, #348]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d952:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*JUMP_VECTOR_HIGH_REG, &status_reg_temp_h);
 800d954:	1dfb      	adds	r3, r7, #7
 800d956:	4619      	mov	r1, r3
 800d958:	f44f 7005 	mov.w	r0, #532	; 0x214
 800d95c:	f7fd fd9e 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_HIGH_REG+1, &status_reg_temp_l);
 800d960:	1dbb      	adds	r3, r7, #6
 800d962:	4619      	mov	r1, r3
 800d964:	f240 2015 	movw	r0, #533	; 0x215
 800d968:	f7fd fd98 	bl	800b49c <fm25v02_read>
	bootloader_registers.jump_vector_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d96c:	79fb      	ldrb	r3, [r7, #7]
 800d96e:	021b      	lsls	r3, r3, #8
 800d970:	b21a      	sxth	r2, r3
 800d972:	79bb      	ldrb	r3, [r7, #6]
 800d974:	b21b      	sxth	r3, r3
 800d976:	4313      	orrs	r3, r2
 800d978:	b21b      	sxth	r3, r3
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	4b4c      	ldr	r3, [pc, #304]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d97e:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*JUMP_VECTOR_2_REG, &status_reg_temp_h);
 800d980:	1dfb      	adds	r3, r7, #7
 800d982:	4619      	mov	r1, r3
 800d984:	f240 2016 	movw	r0, #534	; 0x216
 800d988:	f7fd fd88 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_2_REG+1, &status_reg_temp_l);
 800d98c:	1dbb      	adds	r3, r7, #6
 800d98e:	4619      	mov	r1, r3
 800d990:	f240 2017 	movw	r0, #535	; 0x217
 800d994:	f7fd fd82 	bl	800b49c <fm25v02_read>
	bootloader_registers.jump_vector_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d998:	79fb      	ldrb	r3, [r7, #7]
 800d99a:	021b      	lsls	r3, r3, #8
 800d99c:	b21a      	sxth	r2, r3
 800d99e:	79bb      	ldrb	r3, [r7, #6]
 800d9a0:	b21b      	sxth	r3, r3
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	b21b      	sxth	r3, r3
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	4b41      	ldr	r3, [pc, #260]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d9aa:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*JUMP_VECTOR_3_REG, &status_reg_temp_h);
 800d9ac:	1dfb      	adds	r3, r7, #7
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	f44f 7006 	mov.w	r0, #536	; 0x218
 800d9b4:	f7fd fd72 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_3_REG+1, &status_reg_temp_l);
 800d9b8:	1dbb      	adds	r3, r7, #6
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	f240 2019 	movw	r0, #537	; 0x219
 800d9c0:	f7fd fd6c 	bl	800b49c <fm25v02_read>
	bootloader_registers.jump_vector_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d9c4:	79fb      	ldrb	r3, [r7, #7]
 800d9c6:	021b      	lsls	r3, r3, #8
 800d9c8:	b21a      	sxth	r2, r3
 800d9ca:	79bb      	ldrb	r3, [r7, #6]
 800d9cc:	b21b      	sxth	r3, r3
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	b21b      	sxth	r3, r3
 800d9d2:	b29a      	uxth	r2, r3
 800d9d4:	4b36      	ldr	r3, [pc, #216]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800d9d6:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*JUMP_VECTOR_LOW_REG, &status_reg_temp_h);
 800d9d8:	1dfb      	adds	r3, r7, #7
 800d9da:	4619      	mov	r1, r3
 800d9dc:	f240 201a 	movw	r0, #538	; 0x21a
 800d9e0:	f7fd fd5c 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_LOW_REG+1, &status_reg_temp_l);
 800d9e4:	1dbb      	adds	r3, r7, #6
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	f240 201b 	movw	r0, #539	; 0x21b
 800d9ec:	f7fd fd56 	bl	800b49c <fm25v02_read>
	bootloader_registers.jump_vector_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800d9f0:	79fb      	ldrb	r3, [r7, #7]
 800d9f2:	021b      	lsls	r3, r3, #8
 800d9f4:	b21a      	sxth	r2, r3
 800d9f6:	79bb      	ldrb	r3, [r7, #6]
 800d9f8:	b21b      	sxth	r3, r3
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	b21b      	sxth	r3, r3
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	4b2b      	ldr	r3, [pc, #172]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800da02:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG, &status_reg_temp_h);
 800da04:	1dfb      	adds	r3, r7, #7
 800da06:	4619      	mov	r1, r3
 800da08:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800da0c:	f7fd fd46 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG+1, &status_reg_temp_l);
 800da10:	1dbb      	adds	r3, r7, #6
 800da12:	4619      	mov	r1, r3
 800da14:	f240 201d 	movw	r0, #541	; 0x21d
 800da18:	f7fd fd40 	bl	800b49c <fm25v02_read>
	bootloader_registers.firmware_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800da1c:	79fb      	ldrb	r3, [r7, #7]
 800da1e:	021b      	lsls	r3, r3, #8
 800da20:	b21a      	sxth	r2, r3
 800da22:	79bb      	ldrb	r3, [r7, #6]
 800da24:	b21b      	sxth	r3, r3
 800da26:	4313      	orrs	r3, r2
 800da28:	b21b      	sxth	r3, r3
 800da2a:	b29a      	uxth	r2, r3
 800da2c:	4b20      	ldr	r3, [pc, #128]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800da2e:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*WORKING_MODE_REG, &status_reg_temp_h);
 800da30:	1dfb      	adds	r3, r7, #7
 800da32:	4619      	mov	r1, r3
 800da34:	f240 201e 	movw	r0, #542	; 0x21e
 800da38:	f7fd fd30 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*WORKING_MODE_REG+1, &status_reg_temp_l);
 800da3c:	1dbb      	adds	r3, r7, #6
 800da3e:	4619      	mov	r1, r3
 800da40:	f240 201f 	movw	r0, #543	; 0x21f
 800da44:	f7fd fd2a 	bl	800b49c <fm25v02_read>
	bootloader_registers.working_mode_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800da48:	79fb      	ldrb	r3, [r7, #7]
 800da4a:	021b      	lsls	r3, r3, #8
 800da4c:	b21a      	sxth	r2, r3
 800da4e:	79bb      	ldrb	r3, [r7, #6]
 800da50:	b21b      	sxth	r3, r3
 800da52:	4313      	orrs	r3, r2
 800da54:	b21b      	sxth	r3, r3
 800da56:	b29a      	uxth	r2, r3
 800da58:	4b15      	ldr	r3, [pc, #84]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800da5a:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*READY_DOWNLOAD_REG, &status_reg_temp_h);
 800da5c:	1dfb      	adds	r3, r7, #7
 800da5e:	4619      	mov	r1, r3
 800da60:	f44f 7008 	mov.w	r0, #544	; 0x220
 800da64:	f7fd fd1a 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*READY_DOWNLOAD_REG+1, &status_reg_temp_l);
 800da68:	1dbb      	adds	r3, r7, #6
 800da6a:	4619      	mov	r1, r3
 800da6c:	f240 2021 	movw	r0, #545	; 0x221
 800da70:	f7fd fd14 	bl	800b49c <fm25v02_read>
	bootloader_registers.ready_download_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800da74:	79fb      	ldrb	r3, [r7, #7]
 800da76:	021b      	lsls	r3, r3, #8
 800da78:	b21a      	sxth	r2, r3
 800da7a:	79bb      	ldrb	r3, [r7, #6]
 800da7c:	b21b      	sxth	r3, r3
 800da7e:	4313      	orrs	r3, r2
 800da80:	b21b      	sxth	r3, r3
 800da82:	b29a      	uxth	r2, r3
 800da84:	4b0a      	ldr	r3, [pc, #40]	; (800dab0 <read_bootloader_registers+0x2fc>)
 800da86:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG, &status_reg_temp_h);
 800da88:	1dfb      	adds	r3, r7, #7
 800da8a:	4619      	mov	r1, r3
 800da8c:	f240 2022 	movw	r0, #546	; 0x222
 800da90:	f7fd fd04 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG+1, &status_reg_temp_l);
 800da94:	1dbb      	adds	r3, r7, #6
 800da96:	4619      	mov	r1, r3
 800da98:	f240 2023 	movw	r0, #547	; 0x223
 800da9c:	f7fd fcfe 	bl	800b49c <fm25v02_read>
	bootloader_registers.download_timeout_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800daa0:	79fb      	ldrb	r3, [r7, #7]
 800daa2:	021b      	lsls	r3, r3, #8
 800daa4:	b21a      	sxth	r2, r3
 800daa6:	79bb      	ldrb	r3, [r7, #6]
 800daa8:	e004      	b.n	800dab4 <read_bootloader_registers+0x300>
 800daaa:	bf00      	nop
 800daac:	200095d8 	.word	0x200095d8
 800dab0:	20009db4 	.word	0x20009db4
 800dab4:	b21b      	sxth	r3, r3
 800dab6:	4313      	orrs	r3, r2
 800dab8:	b21b      	sxth	r3, r3
 800daba:	b29a      	uxth	r2, r3
 800dabc:	4bbb      	ldr	r3, [pc, #748]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dabe:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800dac0:	1dfb      	adds	r3, r7, #7
 800dac2:	4619      	mov	r1, r3
 800dac4:	f44f 7009 	mov.w	r0, #548	; 0x224
 800dac8:	f7fd fce8 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800dacc:	1dbb      	adds	r3, r7, #6
 800dace:	4619      	mov	r1, r3
 800dad0:	f240 2025 	movw	r0, #549	; 0x225
 800dad4:	f7fd fce2 	bl	800b49c <fm25v02_read>
	bootloader_registers.jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dad8:	79fb      	ldrb	r3, [r7, #7]
 800dada:	021b      	lsls	r3, r3, #8
 800dadc:	b21a      	sxth	r2, r3
 800dade:	79bb      	ldrb	r3, [r7, #6]
 800dae0:	b21b      	sxth	r3, r3
 800dae2:	4313      	orrs	r3, r2
 800dae4:	b21b      	sxth	r3, r3
 800dae6:	b29a      	uxth	r2, r3
 800dae8:	4bb0      	ldr	r3, [pc, #704]	; (800ddac <read_bootloader_registers+0x5f8>)
 800daea:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800daec:	1dfb      	adds	r3, r7, #7
 800daee:	4619      	mov	r1, r3
 800daf0:	f240 2026 	movw	r0, #550	; 0x226
 800daf4:	f7fd fcd2 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800daf8:	1dbb      	adds	r3, r7, #6
 800dafa:	4619      	mov	r1, r3
 800dafc:	f240 2027 	movw	r0, #551	; 0x227
 800db00:	f7fd fccc 	bl	800b49c <fm25v02_read>
	bootloader_registers.max_jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800db04:	79fb      	ldrb	r3, [r7, #7]
 800db06:	021b      	lsls	r3, r3, #8
 800db08:	b21a      	sxth	r2, r3
 800db0a:	79bb      	ldrb	r3, [r7, #6]
 800db0c:	b21b      	sxth	r3, r3
 800db0e:	4313      	orrs	r3, r2
 800db10:	b21b      	sxth	r3, r3
 800db12:	b29a      	uxth	r2, r3
 800db14:	4ba5      	ldr	r3, [pc, #660]	; (800ddac <read_bootloader_registers+0x5f8>)
 800db16:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800db18:	1dfb      	adds	r3, r7, #7
 800db1a:	4619      	mov	r1, r3
 800db1c:	f44f 700a 	mov.w	r0, #552	; 0x228
 800db20:	f7fd fcbc 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800db24:	1dbb      	adds	r3, r7, #6
 800db26:	4619      	mov	r1, r3
 800db28:	f240 2029 	movw	r0, #553	; 0x229
 800db2c:	f7fd fcb6 	bl	800b49c <fm25v02_read>
	bootloader_registers.end_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800db30:	79fb      	ldrb	r3, [r7, #7]
 800db32:	021b      	lsls	r3, r3, #8
 800db34:	b21a      	sxth	r2, r3
 800db36:	79bb      	ldrb	r3, [r7, #6]
 800db38:	b21b      	sxth	r3, r3
 800db3a:	4313      	orrs	r3, r2
 800db3c:	b21b      	sxth	r3, r3
 800db3e:	b29a      	uxth	r2, r3
 800db40:	4b9a      	ldr	r3, [pc, #616]	; (800ddac <read_bootloader_registers+0x5f8>)
 800db42:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800db44:	1dfb      	adds	r3, r7, #7
 800db46:	4619      	mov	r1, r3
 800db48:	f240 202a 	movw	r0, #554	; 0x22a
 800db4c:	f7fd fca6 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800db50:	1dbb      	adds	r3, r7, #6
 800db52:	4619      	mov	r1, r3
 800db54:	f240 202b 	movw	r0, #555	; 0x22b
 800db58:	f7fd fca0 	bl	800b49c <fm25v02_read>
	bootloader_registers.end_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800db5c:	79fb      	ldrb	r3, [r7, #7]
 800db5e:	021b      	lsls	r3, r3, #8
 800db60:	b21a      	sxth	r2, r3
 800db62:	79bb      	ldrb	r3, [r7, #6]
 800db64:	b21b      	sxth	r3, r3
 800db66:	4313      	orrs	r3, r2
 800db68:	b21b      	sxth	r3, r3
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	4b8f      	ldr	r3, [pc, #572]	; (800ddac <read_bootloader_registers+0x5f8>)
 800db6e:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 800db70:	1dfb      	adds	r3, r7, #7
 800db72:	4619      	mov	r1, r3
 800db74:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800db78:	f7fd fc90 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 800db7c:	1dbb      	adds	r3, r7, #6
 800db7e:	4619      	mov	r1, r3
 800db80:	f240 202d 	movw	r0, #557	; 0x22d
 800db84:	f7fd fc8a 	bl	800b49c <fm25v02_read>
	bootloader_registers.address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800db88:	79fb      	ldrb	r3, [r7, #7]
 800db8a:	021b      	lsls	r3, r3, #8
 800db8c:	b21a      	sxth	r2, r3
 800db8e:	79bb      	ldrb	r3, [r7, #6]
 800db90:	b21b      	sxth	r3, r3
 800db92:	4313      	orrs	r3, r2
 800db94:	b21b      	sxth	r3, r3
 800db96:	b29a      	uxth	r2, r3
 800db98:	4b84      	ldr	r3, [pc, #528]	; (800ddac <read_bootloader_registers+0x5f8>)
 800db9a:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 800db9c:	1dfb      	adds	r3, r7, #7
 800db9e:	4619      	mov	r1, r3
 800dba0:	f240 202e 	movw	r0, #558	; 0x22e
 800dba4:	f7fd fc7a 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 800dba8:	1dbb      	adds	r3, r7, #6
 800dbaa:	4619      	mov	r1, r3
 800dbac:	f240 202f 	movw	r0, #559	; 0x22f
 800dbb0:	f7fd fc74 	bl	800b49c <fm25v02_read>
	bootloader_registers.address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dbb4:	79fb      	ldrb	r3, [r7, #7]
 800dbb6:	021b      	lsls	r3, r3, #8
 800dbb8:	b21a      	sxth	r2, r3
 800dbba:	79bb      	ldrb	r3, [r7, #6]
 800dbbc:	b21b      	sxth	r3, r3
 800dbbe:	4313      	orrs	r3, r2
 800dbc0:	b21b      	sxth	r3, r3
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	4b79      	ldr	r3, [pc, #484]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dbc6:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &status_reg_temp_h);
 800dbc8:	1dfb      	adds	r3, r7, #7
 800dbca:	4619      	mov	r1, r3
 800dbcc:	f240 203e 	movw	r0, #574	; 0x23e
 800dbd0:	f7fd fc64 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &status_reg_temp_l);
 800dbd4:	1dbb      	adds	r3, r7, #6
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	f240 203f 	movw	r0, #575	; 0x23f
 800dbdc:	f7fd fc5e 	bl	800b49c <fm25v02_read>
	bootloader_registers.clear_page_number_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dbe0:	79fb      	ldrb	r3, [r7, #7]
 800dbe2:	021b      	lsls	r3, r3, #8
 800dbe4:	b21a      	sxth	r2, r3
 800dbe6:	79bb      	ldrb	r3, [r7, #6]
 800dbe8:	b21b      	sxth	r3, r3
 800dbea:	4313      	orrs	r3, r2
 800dbec:	b21b      	sxth	r3, r3
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	4b6e      	ldr	r3, [pc, #440]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dbf2:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &status_reg_temp_h);
 800dbf4:	1dfb      	adds	r3, r7, #7
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	f44f 7010 	mov.w	r0, #576	; 0x240
 800dbfc:	f7fd fc4e 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &status_reg_temp_l);
 800dc00:	1dbb      	adds	r3, r7, #6
 800dc02:	4619      	mov	r1, r3
 800dc04:	f240 2041 	movw	r0, #577	; 0x241
 800dc08:	f7fd fc48 	bl	800b49c <fm25v02_read>
	bootloader_registers.clear_page_on_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dc0c:	79fb      	ldrb	r3, [r7, #7]
 800dc0e:	021b      	lsls	r3, r3, #8
 800dc10:	b21a      	sxth	r2, r3
 800dc12:	79bb      	ldrb	r3, [r7, #6]
 800dc14:	b21b      	sxth	r3, r3
 800dc16:	4313      	orrs	r3, r2
 800dc18:	b21b      	sxth	r3, r3
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	4b63      	ldr	r3, [pc, #396]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dc1e:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &status_reg_temp_h);
 800dc20:	1dfb      	adds	r3, r7, #7
 800dc22:	4619      	mov	r1, r3
 800dc24:	f240 2042 	movw	r0, #578	; 0x242
 800dc28:	f7fd fc38 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &status_reg_temp_l);
 800dc2c:	1dbb      	adds	r3, r7, #6
 800dc2e:	4619      	mov	r1, r3
 800dc30:	f240 2043 	movw	r0, #579	; 0x243
 800dc34:	f7fd fc32 	bl	800b49c <fm25v02_read>
	bootloader_registers.write_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dc38:	79fb      	ldrb	r3, [r7, #7]
 800dc3a:	021b      	lsls	r3, r3, #8
 800dc3c:	b21a      	sxth	r2, r3
 800dc3e:	79bb      	ldrb	r3, [r7, #6]
 800dc40:	b21b      	sxth	r3, r3
 800dc42:	4313      	orrs	r3, r2
 800dc44:	b21b      	sxth	r3, r3
 800dc46:	b29a      	uxth	r2, r3
 800dc48:	4b58      	ldr	r3, [pc, #352]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dc4a:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &status_reg_temp_h);
 800dc4c:	1dfb      	adds	r3, r7, #7
 800dc4e:	4619      	mov	r1, r3
 800dc50:	f44f 7011 	mov.w	r0, #580	; 0x244
 800dc54:	f7fd fc22 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &status_reg_temp_l);
 800dc58:	1dbb      	adds	r3, r7, #6
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	f240 2045 	movw	r0, #581	; 0x245
 800dc60:	f7fd fc1c 	bl	800b49c <fm25v02_read>
	bootloader_registers.read_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dc64:	79fb      	ldrb	r3, [r7, #7]
 800dc66:	021b      	lsls	r3, r3, #8
 800dc68:	b21a      	sxth	r2, r3
 800dc6a:	79bb      	ldrb	r3, [r7, #6]
 800dc6c:	b21b      	sxth	r3, r3
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	b21b      	sxth	r3, r3
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	4b4d      	ldr	r3, [pc, #308]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dc76:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &status_reg_temp_h);
 800dc78:	1dfb      	adds	r3, r7, #7
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	f240 2046 	movw	r0, #582	; 0x246
 800dc80:	f7fd fc0c 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &status_reg_temp_l);
 800dc84:	1dbb      	adds	r3, r7, #6
 800dc86:	4619      	mov	r1, r3
 800dc88:	f240 2047 	movw	r0, #583	; 0x247
 800dc8c:	f7fd fc06 	bl	800b49c <fm25v02_read>
	bootloader_registers.address_to_write_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dc90:	79fb      	ldrb	r3, [r7, #7]
 800dc92:	021b      	lsls	r3, r3, #8
 800dc94:	b21a      	sxth	r2, r3
 800dc96:	79bb      	ldrb	r3, [r7, #6]
 800dc98:	b21b      	sxth	r3, r3
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	b21b      	sxth	r3, r3
 800dc9e:	b29a      	uxth	r2, r3
 800dca0:	4b42      	ldr	r3, [pc, #264]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dca2:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &status_reg_temp_h);
 800dca4:	1dfb      	adds	r3, r7, #7
 800dca6:	4619      	mov	r1, r3
 800dca8:	f44f 7012 	mov.w	r0, #584	; 0x248
 800dcac:	f7fd fbf6 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &status_reg_temp_l);
 800dcb0:	1dbb      	adds	r3, r7, #6
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	f240 2049 	movw	r0, #585	; 0x249
 800dcb8:	f7fd fbf0 	bl	800b49c <fm25v02_read>
	bootloader_registers.address_to_write_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dcbc:	79fb      	ldrb	r3, [r7, #7]
 800dcbe:	021b      	lsls	r3, r3, #8
 800dcc0:	b21a      	sxth	r2, r3
 800dcc2:	79bb      	ldrb	r3, [r7, #6]
 800dcc4:	b21b      	sxth	r3, r3
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	b21b      	sxth	r3, r3
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	4b37      	ldr	r3, [pc, #220]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dcce:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*BYTE_QUANTITY_REG, &status_reg_temp_h);
 800dcd0:	1dfb      	adds	r3, r7, #7
 800dcd2:	4619      	mov	r1, r3
 800dcd4:	f240 204a 	movw	r0, #586	; 0x24a
 800dcd8:	f7fd fbe0 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*BYTE_QUANTITY_REG+1, &status_reg_temp_l);
 800dcdc:	1dbb      	adds	r3, r7, #6
 800dcde:	4619      	mov	r1, r3
 800dce0:	f240 204b 	movw	r0, #587	; 0x24b
 800dce4:	f7fd fbda 	bl	800b49c <fm25v02_read>
	bootloader_registers.byte_quantity_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dce8:	79fb      	ldrb	r3, [r7, #7]
 800dcea:	021b      	lsls	r3, r3, #8
 800dcec:	b21a      	sxth	r2, r3
 800dcee:	79bb      	ldrb	r3, [r7, #6]
 800dcf0:	b21b      	sxth	r3, r3
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	b21b      	sxth	r3, r3
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	4b2c      	ldr	r3, [pc, #176]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dcfa:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*PACKET_CRC_HIGH_REG, &status_reg_temp_h);
 800dcfc:	1dfb      	adds	r3, r7, #7
 800dcfe:	4619      	mov	r1, r3
 800dd00:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800dd04:	f7fd fbca 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &status_reg_temp_l);
 800dd08:	1dbb      	adds	r3, r7, #6
 800dd0a:	4619      	mov	r1, r3
 800dd0c:	f240 204d 	movw	r0, #589	; 0x24d
 800dd10:	f7fd fbc4 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dd14:	79fb      	ldrb	r3, [r7, #7]
 800dd16:	021b      	lsls	r3, r3, #8
 800dd18:	b21a      	sxth	r2, r3
 800dd1a:	79bb      	ldrb	r3, [r7, #6]
 800dd1c:	b21b      	sxth	r3, r3
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	b21b      	sxth	r3, r3
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	4b21      	ldr	r3, [pc, #132]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dd26:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*PACKET_CRC_LOW_REG, &status_reg_temp_h);
 800dd28:	1dfb      	adds	r3, r7, #7
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	f240 204e 	movw	r0, #590	; 0x24e
 800dd30:	f7fd fbb4 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_LOW_REG+1, &status_reg_temp_l);
 800dd34:	1dbb      	adds	r3, r7, #6
 800dd36:	4619      	mov	r1, r3
 800dd38:	f240 204f 	movw	r0, #591	; 0x24f
 800dd3c:	f7fd fbae 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dd40:	79fb      	ldrb	r3, [r7, #7]
 800dd42:	021b      	lsls	r3, r3, #8
 800dd44:	b21a      	sxth	r2, r3
 800dd46:	79bb      	ldrb	r3, [r7, #6]
 800dd48:	b21b      	sxth	r3, r3
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	b21b      	sxth	r3, r3
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	4b16      	ldr	r3, [pc, #88]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dd52:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*PACKET_DATA_0_REG, &status_reg_temp_h);
 800dd54:	1dfb      	adds	r3, r7, #7
 800dd56:	4619      	mov	r1, r3
 800dd58:	f44f 7014 	mov.w	r0, #592	; 0x250
 800dd5c:	f7fd fb9e 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_0_REG+1, &status_reg_temp_l);
 800dd60:	1dbb      	adds	r3, r7, #6
 800dd62:	4619      	mov	r1, r3
 800dd64:	f240 2051 	movw	r0, #593	; 0x251
 800dd68:	f7fd fb98 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_data_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dd6c:	79fb      	ldrb	r3, [r7, #7]
 800dd6e:	021b      	lsls	r3, r3, #8
 800dd70:	b21a      	sxth	r2, r3
 800dd72:	79bb      	ldrb	r3, [r7, #6]
 800dd74:	b21b      	sxth	r3, r3
 800dd76:	4313      	orrs	r3, r2
 800dd78:	b21b      	sxth	r3, r3
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	4b0b      	ldr	r3, [pc, #44]	; (800ddac <read_bootloader_registers+0x5f8>)
 800dd7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*PACKET_DATA_1_REG, &status_reg_temp_h);
 800dd82:	1dfb      	adds	r3, r7, #7
 800dd84:	4619      	mov	r1, r3
 800dd86:	f240 2052 	movw	r0, #594	; 0x252
 800dd8a:	f7fd fb87 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_1_REG+1, &status_reg_temp_l);
 800dd8e:	1dbb      	adds	r3, r7, #6
 800dd90:	4619      	mov	r1, r3
 800dd92:	f240 2053 	movw	r0, #595	; 0x253
 800dd96:	f7fd fb81 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_data_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dd9a:	79fb      	ldrb	r3, [r7, #7]
 800dd9c:	021b      	lsls	r3, r3, #8
 800dd9e:	b21a      	sxth	r2, r3
 800dda0:	79bb      	ldrb	r3, [r7, #6]
 800dda2:	b21b      	sxth	r3, r3
 800dda4:	4313      	orrs	r3, r2
 800dda6:	b21b      	sxth	r3, r3
 800dda8:	e002      	b.n	800ddb0 <read_bootloader_registers+0x5fc>
 800ddaa:	bf00      	nop
 800ddac:	20009db4 	.word	0x20009db4
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	4b28      	ldr	r3, [pc, #160]	; (800de54 <read_bootloader_registers+0x6a0>)
 800ddb4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PACKET_DATA_2_REG, &status_reg_temp_h);
 800ddb8:	1dfb      	adds	r3, r7, #7
 800ddba:	4619      	mov	r1, r3
 800ddbc:	f44f 7015 	mov.w	r0, #596	; 0x254
 800ddc0:	f7fd fb6c 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_2_REG+1, &status_reg_temp_l);
 800ddc4:	1dbb      	adds	r3, r7, #6
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	f240 2055 	movw	r0, #597	; 0x255
 800ddcc:	f7fd fb66 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_data_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ddd0:	79fb      	ldrb	r3, [r7, #7]
 800ddd2:	021b      	lsls	r3, r3, #8
 800ddd4:	b21a      	sxth	r2, r3
 800ddd6:	79bb      	ldrb	r3, [r7, #6]
 800ddd8:	b21b      	sxth	r3, r3
 800ddda:	4313      	orrs	r3, r2
 800dddc:	b21b      	sxth	r3, r3
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	4b1c      	ldr	r3, [pc, #112]	; (800de54 <read_bootloader_registers+0x6a0>)
 800dde2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PACKET_DATA_3_REG, &status_reg_temp_h);
 800dde6:	1dfb      	adds	r3, r7, #7
 800dde8:	4619      	mov	r1, r3
 800ddea:	f240 2056 	movw	r0, #598	; 0x256
 800ddee:	f7fd fb55 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_3_REG+1, &status_reg_temp_l);
 800ddf2:	1dbb      	adds	r3, r7, #6
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	f240 2057 	movw	r0, #599	; 0x257
 800ddfa:	f7fd fb4f 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_data_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ddfe:	79fb      	ldrb	r3, [r7, #7]
 800de00:	021b      	lsls	r3, r3, #8
 800de02:	b21a      	sxth	r2, r3
 800de04:	79bb      	ldrb	r3, [r7, #6]
 800de06:	b21b      	sxth	r3, r3
 800de08:	4313      	orrs	r3, r2
 800de0a:	b21b      	sxth	r3, r3
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	4b11      	ldr	r3, [pc, #68]	; (800de54 <read_bootloader_registers+0x6a0>)
 800de10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*PACKET_DATA_4_REG, &status_reg_temp_h);
 800de14:	1dfb      	adds	r3, r7, #7
 800de16:	4619      	mov	r1, r3
 800de18:	f44f 7016 	mov.w	r0, #600	; 0x258
 800de1c:	f7fd fb3e 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_4_REG+1, &status_reg_temp_l);
 800de20:	1dbb      	adds	r3, r7, #6
 800de22:	4619      	mov	r1, r3
 800de24:	f240 2059 	movw	r0, #601	; 0x259
 800de28:	f7fd fb38 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_data_4_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800de2c:	79fb      	ldrb	r3, [r7, #7]
 800de2e:	021b      	lsls	r3, r3, #8
 800de30:	b21a      	sxth	r2, r3
 800de32:	79bb      	ldrb	r3, [r7, #6]
 800de34:	b21b      	sxth	r3, r3
 800de36:	4313      	orrs	r3, r2
 800de38:	b21b      	sxth	r3, r3
 800de3a:	b29a      	uxth	r2, r3
 800de3c:	4b05      	ldr	r3, [pc, #20]	; (800de54 <read_bootloader_registers+0x6a0>)
 800de3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	osMutexRelease(Fm25v02MutexHandle);
 800de42:	4b05      	ldr	r3, [pc, #20]	; (800de58 <read_bootloader_registers+0x6a4>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4618      	mov	r0, r3
 800de48:	f7f8 fade 	bl	8006408 <osMutexRelease>

}
 800de4c:	bf00      	nop
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}
 800de54:	20009db4 	.word	0x20009db4
 800de58:	200095d8 	.word	0x200095d8

0800de5c <read_bootloader_registers_no_rtos>:
//----------------------------------------------------------------

//----Функция чтения из памяти регистров бутлоадера без запуска операционной системы---------------

void read_bootloader_registers_no_rtos(void)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	fm25v02_read(2*BOOTLOADER_VERSION_REG, &status_reg_temp_h);
 800de62:	1dfb      	adds	r3, r7, #7
 800de64:	4619      	mov	r1, r3
 800de66:	f44f 7000 	mov.w	r0, #512	; 0x200
 800de6a:	f7fd fb17 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*BOOTLOADER_VERSION_REG+1, &status_reg_temp_l);
 800de6e:	1dbb      	adds	r3, r7, #6
 800de70:	4619      	mov	r1, r3
 800de72:	f240 2001 	movw	r0, #513	; 0x201
 800de76:	f7fd fb11 	bl	800b49c <fm25v02_read>
	bootloader_registers.bootloader_version_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800de7a:	79fb      	ldrb	r3, [r7, #7]
 800de7c:	021b      	lsls	r3, r3, #8
 800de7e:	b21a      	sxth	r2, r3
 800de80:	79bb      	ldrb	r3, [r7, #6]
 800de82:	b21b      	sxth	r3, r3
 800de84:	4313      	orrs	r3, r2
 800de86:	b21b      	sxth	r3, r3
 800de88:	b29a      	uxth	r2, r3
 800de8a:	4bbb      	ldr	r3, [pc, #748]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800de8c:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800de8e:	1dfb      	adds	r3, r7, #7
 800de90:	4619      	mov	r1, r3
 800de92:	f44f 7001 	mov.w	r0, #516	; 0x204
 800de96:	f7fd fb01 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800de9a:	1dbb      	adds	r3, r7, #6
 800de9c:	4619      	mov	r1, r3
 800de9e:	f240 2005 	movw	r0, #517	; 0x205
 800dea2:	f7fd fafb 	bl	800b49c <fm25v02_read>
	bootloader_registers.start_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dea6:	79fb      	ldrb	r3, [r7, #7]
 800dea8:	021b      	lsls	r3, r3, #8
 800deaa:	b21a      	sxth	r2, r3
 800deac:	79bb      	ldrb	r3, [r7, #6]
 800deae:	b21b      	sxth	r3, r3
 800deb0:	4313      	orrs	r3, r2
 800deb2:	b21b      	sxth	r3, r3
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	4bb0      	ldr	r3, [pc, #704]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800deb8:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800deba:	1dfb      	adds	r3, r7, #7
 800debc:	4619      	mov	r1, r3
 800debe:	f240 2006 	movw	r0, #518	; 0x206
 800dec2:	f7fd faeb 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800dec6:	1dbb      	adds	r3, r7, #6
 800dec8:	4619      	mov	r1, r3
 800deca:	f240 2007 	movw	r0, #519	; 0x207
 800dece:	f7fd fae5 	bl	800b49c <fm25v02_read>
	bootloader_registers.start_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800ded2:	79fb      	ldrb	r3, [r7, #7]
 800ded4:	021b      	lsls	r3, r3, #8
 800ded6:	b21a      	sxth	r2, r3
 800ded8:	79bb      	ldrb	r3, [r7, #6]
 800deda:	b21b      	sxth	r3, r3
 800dedc:	4313      	orrs	r3, r2
 800dede:	b21b      	sxth	r3, r3
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	4ba5      	ldr	r3, [pc, #660]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800dee4:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800dee6:	1dfb      	adds	r3, r7, #7
 800dee8:	4619      	mov	r1, r3
 800deea:	f44f 7002 	mov.w	r0, #520	; 0x208
 800deee:	f7fd fad5 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800def2:	1dbb      	adds	r3, r7, #6
 800def4:	4619      	mov	r1, r3
 800def6:	f240 2009 	movw	r0, #521	; 0x209
 800defa:	f7fd facf 	bl	800b49c <fm25v02_read>
	bootloader_registers.start_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800defe:	79fb      	ldrb	r3, [r7, #7]
 800df00:	021b      	lsls	r3, r3, #8
 800df02:	b21a      	sxth	r2, r3
 800df04:	79bb      	ldrb	r3, [r7, #6]
 800df06:	b21b      	sxth	r3, r3
 800df08:	4313      	orrs	r3, r2
 800df0a:	b21b      	sxth	r3, r3
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	4b9a      	ldr	r3, [pc, #616]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800df10:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800df12:	1dfb      	adds	r3, r7, #7
 800df14:	4619      	mov	r1, r3
 800df16:	f240 200a 	movw	r0, #522	; 0x20a
 800df1a:	f7fd fabf 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*START_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800df1e:	1dbb      	adds	r3, r7, #6
 800df20:	4619      	mov	r1, r3
 800df22:	f240 200b 	movw	r0, #523	; 0x20b
 800df26:	f7fd fab9 	bl	800b49c <fm25v02_read>
	bootloader_registers.start_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800df2a:	79fb      	ldrb	r3, [r7, #7]
 800df2c:	021b      	lsls	r3, r3, #8
 800df2e:	b21a      	sxth	r2, r3
 800df30:	79bb      	ldrb	r3, [r7, #6]
 800df32:	b21b      	sxth	r3, r3
 800df34:	4313      	orrs	r3, r2
 800df36:	b21b      	sxth	r3, r3
 800df38:	b29a      	uxth	r2, r3
 800df3a:	4b8f      	ldr	r3, [pc, #572]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800df3c:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800df3e:	1dfb      	adds	r3, r7, #7
 800df40:	4619      	mov	r1, r3
 800df42:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800df46:	f7fd faa9 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800df4a:	1dbb      	adds	r3, r7, #6
 800df4c:	4619      	mov	r1, r3
 800df4e:	f240 200d 	movw	r0, #525	; 0x20d
 800df52:	f7fd faa3 	bl	800b49c <fm25v02_read>
	bootloader_registers.end_address_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800df56:	79fb      	ldrb	r3, [r7, #7]
 800df58:	021b      	lsls	r3, r3, #8
 800df5a:	b21a      	sxth	r2, r3
 800df5c:	79bb      	ldrb	r3, [r7, #6]
 800df5e:	b21b      	sxth	r3, r3
 800df60:	4313      	orrs	r3, r2
 800df62:	b21b      	sxth	r3, r3
 800df64:	b29a      	uxth	r2, r3
 800df66:	4b84      	ldr	r3, [pc, #528]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800df68:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800df6a:	1dfb      	adds	r3, r7, #7
 800df6c:	4619      	mov	r1, r3
 800df6e:	f240 200e 	movw	r0, #526	; 0x20e
 800df72:	f7fd fa93 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800df76:	1dbb      	adds	r3, r7, #6
 800df78:	4619      	mov	r1, r3
 800df7a:	f240 200f 	movw	r0, #527	; 0x20f
 800df7e:	f7fd fa8d 	bl	800b49c <fm25v02_read>
	bootloader_registers.end_address_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800df82:	79fb      	ldrb	r3, [r7, #7]
 800df84:	021b      	lsls	r3, r3, #8
 800df86:	b21a      	sxth	r2, r3
 800df88:	79bb      	ldrb	r3, [r7, #6]
 800df8a:	b21b      	sxth	r3, r3
 800df8c:	4313      	orrs	r3, r2
 800df8e:	b21b      	sxth	r3, r3
 800df90:	b29a      	uxth	r2, r3
 800df92:	4b79      	ldr	r3, [pc, #484]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800df94:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG, &status_reg_temp_h);
 800df96:	1dfb      	adds	r3, r7, #7
 800df98:	4619      	mov	r1, r3
 800df9a:	f44f 7004 	mov.w	r0, #528	; 0x210
 800df9e:	f7fd fa7d 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_HIGH_REG+1, &status_reg_temp_l);
 800dfa2:	1dbb      	adds	r3, r7, #6
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	f240 2011 	movw	r0, #529	; 0x211
 800dfaa:	f7fd fa77 	bl	800b49c <fm25v02_read>
	bootloader_registers.crc_firmware_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dfae:	79fb      	ldrb	r3, [r7, #7]
 800dfb0:	021b      	lsls	r3, r3, #8
 800dfb2:	b21a      	sxth	r2, r3
 800dfb4:	79bb      	ldrb	r3, [r7, #6]
 800dfb6:	b21b      	sxth	r3, r3
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	b21b      	sxth	r3, r3
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	4b6e      	ldr	r3, [pc, #440]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800dfc0:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CRC_FIRMWARE_LOW_REG, &status_reg_temp_h);
 800dfc2:	1dfb      	adds	r3, r7, #7
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	f240 2012 	movw	r0, #530	; 0x212
 800dfca:	f7fd fa67 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CRC_FIRMWARE_LOW_REG+1, &status_reg_temp_l);
 800dfce:	1dbb      	adds	r3, r7, #6
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	f240 2013 	movw	r0, #531	; 0x213
 800dfd6:	f7fd fa61 	bl	800b49c <fm25v02_read>
	bootloader_registers.crc_firmware_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800dfda:	79fb      	ldrb	r3, [r7, #7]
 800dfdc:	021b      	lsls	r3, r3, #8
 800dfde:	b21a      	sxth	r2, r3
 800dfe0:	79bb      	ldrb	r3, [r7, #6]
 800dfe2:	b21b      	sxth	r3, r3
 800dfe4:	4313      	orrs	r3, r2
 800dfe6:	b21b      	sxth	r3, r3
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	4b63      	ldr	r3, [pc, #396]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800dfec:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*JUMP_VECTOR_HIGH_REG, &status_reg_temp_h);
 800dfee:	1dfb      	adds	r3, r7, #7
 800dff0:	4619      	mov	r1, r3
 800dff2:	f44f 7005 	mov.w	r0, #532	; 0x214
 800dff6:	f7fd fa51 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_HIGH_REG+1, &status_reg_temp_l);
 800dffa:	1dbb      	adds	r3, r7, #6
 800dffc:	4619      	mov	r1, r3
 800dffe:	f240 2015 	movw	r0, #533	; 0x215
 800e002:	f7fd fa4b 	bl	800b49c <fm25v02_read>
	bootloader_registers.jump_vector_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e006:	79fb      	ldrb	r3, [r7, #7]
 800e008:	021b      	lsls	r3, r3, #8
 800e00a:	b21a      	sxth	r2, r3
 800e00c:	79bb      	ldrb	r3, [r7, #6]
 800e00e:	b21b      	sxth	r3, r3
 800e010:	4313      	orrs	r3, r2
 800e012:	b21b      	sxth	r3, r3
 800e014:	b29a      	uxth	r2, r3
 800e016:	4b58      	ldr	r3, [pc, #352]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800e018:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*JUMP_VECTOR_2_REG, &status_reg_temp_h);
 800e01a:	1dfb      	adds	r3, r7, #7
 800e01c:	4619      	mov	r1, r3
 800e01e:	f240 2016 	movw	r0, #534	; 0x216
 800e022:	f7fd fa3b 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_2_REG+1, &status_reg_temp_l);
 800e026:	1dbb      	adds	r3, r7, #6
 800e028:	4619      	mov	r1, r3
 800e02a:	f240 2017 	movw	r0, #535	; 0x217
 800e02e:	f7fd fa35 	bl	800b49c <fm25v02_read>
	bootloader_registers.jump_vector_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e032:	79fb      	ldrb	r3, [r7, #7]
 800e034:	021b      	lsls	r3, r3, #8
 800e036:	b21a      	sxth	r2, r3
 800e038:	79bb      	ldrb	r3, [r7, #6]
 800e03a:	b21b      	sxth	r3, r3
 800e03c:	4313      	orrs	r3, r2
 800e03e:	b21b      	sxth	r3, r3
 800e040:	b29a      	uxth	r2, r3
 800e042:	4b4d      	ldr	r3, [pc, #308]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800e044:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*JUMP_VECTOR_3_REG, &status_reg_temp_h);
 800e046:	1dfb      	adds	r3, r7, #7
 800e048:	4619      	mov	r1, r3
 800e04a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e04e:	f7fd fa25 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_3_REG+1, &status_reg_temp_l);
 800e052:	1dbb      	adds	r3, r7, #6
 800e054:	4619      	mov	r1, r3
 800e056:	f240 2019 	movw	r0, #537	; 0x219
 800e05a:	f7fd fa1f 	bl	800b49c <fm25v02_read>
	bootloader_registers.jump_vector_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e05e:	79fb      	ldrb	r3, [r7, #7]
 800e060:	021b      	lsls	r3, r3, #8
 800e062:	b21a      	sxth	r2, r3
 800e064:	79bb      	ldrb	r3, [r7, #6]
 800e066:	b21b      	sxth	r3, r3
 800e068:	4313      	orrs	r3, r2
 800e06a:	b21b      	sxth	r3, r3
 800e06c:	b29a      	uxth	r2, r3
 800e06e:	4b42      	ldr	r3, [pc, #264]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800e070:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*JUMP_VECTOR_LOW_REG, &status_reg_temp_h);
 800e072:	1dfb      	adds	r3, r7, #7
 800e074:	4619      	mov	r1, r3
 800e076:	f240 201a 	movw	r0, #538	; 0x21a
 800e07a:	f7fd fa0f 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*JUMP_VECTOR_LOW_REG+1, &status_reg_temp_l);
 800e07e:	1dbb      	adds	r3, r7, #6
 800e080:	4619      	mov	r1, r3
 800e082:	f240 201b 	movw	r0, #539	; 0x21b
 800e086:	f7fd fa09 	bl	800b49c <fm25v02_read>
	bootloader_registers.jump_vector_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e08a:	79fb      	ldrb	r3, [r7, #7]
 800e08c:	021b      	lsls	r3, r3, #8
 800e08e:	b21a      	sxth	r2, r3
 800e090:	79bb      	ldrb	r3, [r7, #6]
 800e092:	b21b      	sxth	r3, r3
 800e094:	4313      	orrs	r3, r2
 800e096:	b21b      	sxth	r3, r3
 800e098:	b29a      	uxth	r2, r3
 800e09a:	4b37      	ldr	r3, [pc, #220]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800e09c:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG, &status_reg_temp_h);
 800e09e:	1dfb      	adds	r3, r7, #7
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e0a6:	f7fd f9f9 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*FIRMWARE_CORRECTNESS_REG+1, &status_reg_temp_l);
 800e0aa:	1dbb      	adds	r3, r7, #6
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	f240 201d 	movw	r0, #541	; 0x21d
 800e0b2:	f7fd f9f3 	bl	800b49c <fm25v02_read>
	bootloader_registers.firmware_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e0b6:	79fb      	ldrb	r3, [r7, #7]
 800e0b8:	021b      	lsls	r3, r3, #8
 800e0ba:	b21a      	sxth	r2, r3
 800e0bc:	79bb      	ldrb	r3, [r7, #6]
 800e0be:	b21b      	sxth	r3, r3
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	b21b      	sxth	r3, r3
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	4b2c      	ldr	r3, [pc, #176]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800e0c8:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*WORKING_MODE_REG, &status_reg_temp_h);
 800e0ca:	1dfb      	adds	r3, r7, #7
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	f240 201e 	movw	r0, #542	; 0x21e
 800e0d2:	f7fd f9e3 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*WORKING_MODE_REG+1, &status_reg_temp_l);
 800e0d6:	1dbb      	adds	r3, r7, #6
 800e0d8:	4619      	mov	r1, r3
 800e0da:	f240 201f 	movw	r0, #543	; 0x21f
 800e0de:	f7fd f9dd 	bl	800b49c <fm25v02_read>
	bootloader_registers.working_mode_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	021b      	lsls	r3, r3, #8
 800e0e6:	b21a      	sxth	r2, r3
 800e0e8:	79bb      	ldrb	r3, [r7, #6]
 800e0ea:	b21b      	sxth	r3, r3
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	b21b      	sxth	r3, r3
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	4b21      	ldr	r3, [pc, #132]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800e0f4:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*READY_DOWNLOAD_REG, &status_reg_temp_h);
 800e0f6:	1dfb      	adds	r3, r7, #7
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	f44f 7008 	mov.w	r0, #544	; 0x220
 800e0fe:	f7fd f9cd 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*READY_DOWNLOAD_REG+1, &status_reg_temp_l);
 800e102:	1dbb      	adds	r3, r7, #6
 800e104:	4619      	mov	r1, r3
 800e106:	f240 2021 	movw	r0, #545	; 0x221
 800e10a:	f7fd f9c7 	bl	800b49c <fm25v02_read>
	bootloader_registers.ready_download_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e10e:	79fb      	ldrb	r3, [r7, #7]
 800e110:	021b      	lsls	r3, r3, #8
 800e112:	b21a      	sxth	r2, r3
 800e114:	79bb      	ldrb	r3, [r7, #6]
 800e116:	b21b      	sxth	r3, r3
 800e118:	4313      	orrs	r3, r2
 800e11a:	b21b      	sxth	r3, r3
 800e11c:	b29a      	uxth	r2, r3
 800e11e:	4b16      	ldr	r3, [pc, #88]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800e120:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG, &status_reg_temp_h);
 800e122:	1dfb      	adds	r3, r7, #7
 800e124:	4619      	mov	r1, r3
 800e126:	f240 2022 	movw	r0, #546	; 0x222
 800e12a:	f7fd f9b7 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*DOWNLOAD_TIMEOUT_REG+1, &status_reg_temp_l);
 800e12e:	1dbb      	adds	r3, r7, #6
 800e130:	4619      	mov	r1, r3
 800e132:	f240 2023 	movw	r0, #547	; 0x223
 800e136:	f7fd f9b1 	bl	800b49c <fm25v02_read>
	bootloader_registers.download_timeout_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e13a:	79fb      	ldrb	r3, [r7, #7]
 800e13c:	021b      	lsls	r3, r3, #8
 800e13e:	b21a      	sxth	r2, r3
 800e140:	79bb      	ldrb	r3, [r7, #6]
 800e142:	b21b      	sxth	r3, r3
 800e144:	4313      	orrs	r3, r2
 800e146:	b21b      	sxth	r3, r3
 800e148:	b29a      	uxth	r2, r3
 800e14a:	4b0b      	ldr	r3, [pc, #44]	; (800e178 <read_bootloader_registers_no_rtos+0x31c>)
 800e14c:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800e14e:	1dfb      	adds	r3, r7, #7
 800e150:	4619      	mov	r1, r3
 800e152:	f44f 7009 	mov.w	r0, #548	; 0x224
 800e156:	f7fd f9a1 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800e15a:	1dbb      	adds	r3, r7, #6
 800e15c:	4619      	mov	r1, r3
 800e15e:	f240 2025 	movw	r0, #549	; 0x225
 800e162:	f7fd f99b 	bl	800b49c <fm25v02_read>
	bootloader_registers.jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e166:	79fb      	ldrb	r3, [r7, #7]
 800e168:	021b      	lsls	r3, r3, #8
 800e16a:	b21a      	sxth	r2, r3
 800e16c:	79bb      	ldrb	r3, [r7, #6]
 800e16e:	b21b      	sxth	r3, r3
 800e170:	4313      	orrs	r3, r2
 800e172:	b21b      	sxth	r3, r3
 800e174:	e002      	b.n	800e17c <read_bootloader_registers_no_rtos+0x320>
 800e176:	bf00      	nop
 800e178:	20009db4 	.word	0x20009db4
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	4bbc      	ldr	r3, [pc, #752]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e180:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG, &status_reg_temp_h);
 800e182:	1dfb      	adds	r3, r7, #7
 800e184:	4619      	mov	r1, r3
 800e186:	f240 2026 	movw	r0, #550	; 0x226
 800e18a:	f7fd f987 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*MAX_JUMP_ATTEMPT_REG+1, &status_reg_temp_l);
 800e18e:	1dbb      	adds	r3, r7, #6
 800e190:	4619      	mov	r1, r3
 800e192:	f240 2027 	movw	r0, #551	; 0x227
 800e196:	f7fd f981 	bl	800b49c <fm25v02_read>
	bootloader_registers.max_jump_attempt_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e19a:	79fb      	ldrb	r3, [r7, #7]
 800e19c:	021b      	lsls	r3, r3, #8
 800e19e:	b21a      	sxth	r2, r3
 800e1a0:	79bb      	ldrb	r3, [r7, #6]
 800e1a2:	b21b      	sxth	r3, r3
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	b21b      	sxth	r3, r3
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	4bb1      	ldr	r3, [pc, #708]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e1ac:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG, &status_reg_temp_h);
 800e1ae:	1dfb      	adds	r3, r7, #7
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	f44f 700a 	mov.w	r0, #552	; 0x228
 800e1b6:	f7fd f971 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_2_REG+1, &status_reg_temp_l);
 800e1ba:	1dbb      	adds	r3, r7, #6
 800e1bc:	4619      	mov	r1, r3
 800e1be:	f240 2029 	movw	r0, #553	; 0x229
 800e1c2:	f7fd f96b 	bl	800b49c <fm25v02_read>
	bootloader_registers.end_address_firmware_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e1c6:	79fb      	ldrb	r3, [r7, #7]
 800e1c8:	021b      	lsls	r3, r3, #8
 800e1ca:	b21a      	sxth	r2, r3
 800e1cc:	79bb      	ldrb	r3, [r7, #6]
 800e1ce:	b21b      	sxth	r3, r3
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	b21b      	sxth	r3, r3
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	4ba6      	ldr	r3, [pc, #664]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e1d8:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG, &status_reg_temp_h);
 800e1da:	1dfb      	adds	r3, r7, #7
 800e1dc:	4619      	mov	r1, r3
 800e1de:	f240 202a 	movw	r0, #554	; 0x22a
 800e1e2:	f7fd f95b 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*END_ADDRESS_FIRMWARE_3_REG+1, &status_reg_temp_l);
 800e1e6:	1dbb      	adds	r3, r7, #6
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	f240 202b 	movw	r0, #555	; 0x22b
 800e1ee:	f7fd f955 	bl	800b49c <fm25v02_read>
	bootloader_registers.end_address_firmware_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e1f2:	79fb      	ldrb	r3, [r7, #7]
 800e1f4:	021b      	lsls	r3, r3, #8
 800e1f6:	b21a      	sxth	r2, r3
 800e1f8:	79bb      	ldrb	r3, [r7, #6]
 800e1fa:	b21b      	sxth	r3, r3
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	b21b      	sxth	r3, r3
 800e200:	b29a      	uxth	r2, r3
 800e202:	4b9b      	ldr	r3, [pc, #620]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e204:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 800e206:	1dfb      	adds	r3, r7, #7
 800e208:	4619      	mov	r1, r3
 800e20a:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800e20e:	f7fd f945 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 800e212:	1dbb      	adds	r3, r7, #6
 800e214:	4619      	mov	r1, r3
 800e216:	f240 202d 	movw	r0, #557	; 0x22d
 800e21a:	f7fd f93f 	bl	800b49c <fm25v02_read>
	bootloader_registers.address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e21e:	79fb      	ldrb	r3, [r7, #7]
 800e220:	021b      	lsls	r3, r3, #8
 800e222:	b21a      	sxth	r2, r3
 800e224:	79bb      	ldrb	r3, [r7, #6]
 800e226:	b21b      	sxth	r3, r3
 800e228:	4313      	orrs	r3, r2
 800e22a:	b21b      	sxth	r3, r3
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	4b90      	ldr	r3, [pc, #576]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e230:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 800e232:	1dfb      	adds	r3, r7, #7
 800e234:	4619      	mov	r1, r3
 800e236:	f240 202e 	movw	r0, #558	; 0x22e
 800e23a:	f7fd f92f 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 800e23e:	1dbb      	adds	r3, r7, #6
 800e240:	4619      	mov	r1, r3
 800e242:	f240 202f 	movw	r0, #559	; 0x22f
 800e246:	f7fd f929 	bl	800b49c <fm25v02_read>
	bootloader_registers.address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e24a:	79fb      	ldrb	r3, [r7, #7]
 800e24c:	021b      	lsls	r3, r3, #8
 800e24e:	b21a      	sxth	r2, r3
 800e250:	79bb      	ldrb	r3, [r7, #6]
 800e252:	b21b      	sxth	r3, r3
 800e254:	4313      	orrs	r3, r2
 800e256:	b21b      	sxth	r3, r3
 800e258:	b29a      	uxth	r2, r3
 800e25a:	4b85      	ldr	r3, [pc, #532]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e25c:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG, &status_reg_temp_h);
 800e25e:	1dfb      	adds	r3, r7, #7
 800e260:	4619      	mov	r1, r3
 800e262:	f240 203e 	movw	r0, #574	; 0x23e
 800e266:	f7fd f919 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_NUMBER_REG+1, &status_reg_temp_l);
 800e26a:	1dbb      	adds	r3, r7, #6
 800e26c:	4619      	mov	r1, r3
 800e26e:	f240 203f 	movw	r0, #575	; 0x23f
 800e272:	f7fd f913 	bl	800b49c <fm25v02_read>
	bootloader_registers.clear_page_number_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e276:	79fb      	ldrb	r3, [r7, #7]
 800e278:	021b      	lsls	r3, r3, #8
 800e27a:	b21a      	sxth	r2, r3
 800e27c:	79bb      	ldrb	r3, [r7, #6]
 800e27e:	b21b      	sxth	r3, r3
 800e280:	4313      	orrs	r3, r2
 800e282:	b21b      	sxth	r3, r3
 800e284:	b29a      	uxth	r2, r3
 800e286:	4b7a      	ldr	r3, [pc, #488]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e288:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*CLEAR_PAGE_ON_REG, &status_reg_temp_h);
 800e28a:	1dfb      	adds	r3, r7, #7
 800e28c:	4619      	mov	r1, r3
 800e28e:	f44f 7010 	mov.w	r0, #576	; 0x240
 800e292:	f7fd f903 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CLEAR_PAGE_ON_REG+1, &status_reg_temp_l);
 800e296:	1dbb      	adds	r3, r7, #6
 800e298:	4619      	mov	r1, r3
 800e29a:	f240 2041 	movw	r0, #577	; 0x241
 800e29e:	f7fd f8fd 	bl	800b49c <fm25v02_read>
	bootloader_registers.clear_page_on_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e2a2:	79fb      	ldrb	r3, [r7, #7]
 800e2a4:	021b      	lsls	r3, r3, #8
 800e2a6:	b21a      	sxth	r2, r3
 800e2a8:	79bb      	ldrb	r3, [r7, #6]
 800e2aa:	b21b      	sxth	r3, r3
 800e2ac:	4313      	orrs	r3, r2
 800e2ae:	b21b      	sxth	r3, r3
 800e2b0:	b29a      	uxth	r2, r3
 800e2b2:	4b6f      	ldr	r3, [pc, #444]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e2b4:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*WRITE_ARRAY_REG, &status_reg_temp_h);
 800e2b6:	1dfb      	adds	r3, r7, #7
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	f240 2042 	movw	r0, #578	; 0x242
 800e2be:	f7fd f8ed 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*WRITE_ARRAY_REG+1, &status_reg_temp_l);
 800e2c2:	1dbb      	adds	r3, r7, #6
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	f240 2043 	movw	r0, #579	; 0x243
 800e2ca:	f7fd f8e7 	bl	800b49c <fm25v02_read>
	bootloader_registers.write_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e2ce:	79fb      	ldrb	r3, [r7, #7]
 800e2d0:	021b      	lsls	r3, r3, #8
 800e2d2:	b21a      	sxth	r2, r3
 800e2d4:	79bb      	ldrb	r3, [r7, #6]
 800e2d6:	b21b      	sxth	r3, r3
 800e2d8:	4313      	orrs	r3, r2
 800e2da:	b21b      	sxth	r3, r3
 800e2dc:	b29a      	uxth	r2, r3
 800e2de:	4b64      	ldr	r3, [pc, #400]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e2e0:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*READ_ARRAY_REG, &status_reg_temp_h);
 800e2e2:	1dfb      	adds	r3, r7, #7
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	f44f 7011 	mov.w	r0, #580	; 0x244
 800e2ea:	f7fd f8d7 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*READ_ARRAY_REG+1, &status_reg_temp_l);
 800e2ee:	1dbb      	adds	r3, r7, #6
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	f240 2045 	movw	r0, #581	; 0x245
 800e2f6:	f7fd f8d1 	bl	800b49c <fm25v02_read>
	bootloader_registers.read_array_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e2fa:	79fb      	ldrb	r3, [r7, #7]
 800e2fc:	021b      	lsls	r3, r3, #8
 800e2fe:	b21a      	sxth	r2, r3
 800e300:	79bb      	ldrb	r3, [r7, #6]
 800e302:	b21b      	sxth	r3, r3
 800e304:	4313      	orrs	r3, r2
 800e306:	b21b      	sxth	r3, r3
 800e308:	b29a      	uxth	r2, r3
 800e30a:	4b59      	ldr	r3, [pc, #356]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e30c:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG, &status_reg_temp_h);
 800e30e:	1dfb      	adds	r3, r7, #7
 800e310:	4619      	mov	r1, r3
 800e312:	f240 2046 	movw	r0, #582	; 0x246
 800e316:	f7fd f8c1 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_HIGH_REG+1, &status_reg_temp_l);
 800e31a:	1dbb      	adds	r3, r7, #6
 800e31c:	4619      	mov	r1, r3
 800e31e:	f240 2047 	movw	r0, #583	; 0x247
 800e322:	f7fd f8bb 	bl	800b49c <fm25v02_read>
	bootloader_registers.address_to_write_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e326:	79fb      	ldrb	r3, [r7, #7]
 800e328:	021b      	lsls	r3, r3, #8
 800e32a:	b21a      	sxth	r2, r3
 800e32c:	79bb      	ldrb	r3, [r7, #6]
 800e32e:	b21b      	sxth	r3, r3
 800e330:	4313      	orrs	r3, r2
 800e332:	b21b      	sxth	r3, r3
 800e334:	b29a      	uxth	r2, r3
 800e336:	4b4e      	ldr	r3, [pc, #312]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e338:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG, &status_reg_temp_h);
 800e33a:	1dfb      	adds	r3, r7, #7
 800e33c:	4619      	mov	r1, r3
 800e33e:	f44f 7012 	mov.w	r0, #584	; 0x248
 800e342:	f7fd f8ab 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*ADDRESS_TO_WRITE_LOW_REG+1, &status_reg_temp_l);
 800e346:	1dbb      	adds	r3, r7, #6
 800e348:	4619      	mov	r1, r3
 800e34a:	f240 2049 	movw	r0, #585	; 0x249
 800e34e:	f7fd f8a5 	bl	800b49c <fm25v02_read>
	bootloader_registers.address_to_write_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e352:	79fb      	ldrb	r3, [r7, #7]
 800e354:	021b      	lsls	r3, r3, #8
 800e356:	b21a      	sxth	r2, r3
 800e358:	79bb      	ldrb	r3, [r7, #6]
 800e35a:	b21b      	sxth	r3, r3
 800e35c:	4313      	orrs	r3, r2
 800e35e:	b21b      	sxth	r3, r3
 800e360:	b29a      	uxth	r2, r3
 800e362:	4b43      	ldr	r3, [pc, #268]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e364:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*BYTE_QUANTITY_REG, &status_reg_temp_h);
 800e366:	1dfb      	adds	r3, r7, #7
 800e368:	4619      	mov	r1, r3
 800e36a:	f240 204a 	movw	r0, #586	; 0x24a
 800e36e:	f7fd f895 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*BYTE_QUANTITY_REG+1, &status_reg_temp_l);
 800e372:	1dbb      	adds	r3, r7, #6
 800e374:	4619      	mov	r1, r3
 800e376:	f240 204b 	movw	r0, #587	; 0x24b
 800e37a:	f7fd f88f 	bl	800b49c <fm25v02_read>
	bootloader_registers.byte_quantity_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e37e:	79fb      	ldrb	r3, [r7, #7]
 800e380:	021b      	lsls	r3, r3, #8
 800e382:	b21a      	sxth	r2, r3
 800e384:	79bb      	ldrb	r3, [r7, #6]
 800e386:	b21b      	sxth	r3, r3
 800e388:	4313      	orrs	r3, r2
 800e38a:	b21b      	sxth	r3, r3
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	4b38      	ldr	r3, [pc, #224]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e390:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*PACKET_CRC_HIGH_REG, &status_reg_temp_h);
 800e392:	1dfb      	adds	r3, r7, #7
 800e394:	4619      	mov	r1, r3
 800e396:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800e39a:	f7fd f87f 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_HIGH_REG+1, &status_reg_temp_l);
 800e39e:	1dbb      	adds	r3, r7, #6
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	f240 204d 	movw	r0, #589	; 0x24d
 800e3a6:	f7fd f879 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e3aa:	79fb      	ldrb	r3, [r7, #7]
 800e3ac:	021b      	lsls	r3, r3, #8
 800e3ae:	b21a      	sxth	r2, r3
 800e3b0:	79bb      	ldrb	r3, [r7, #6]
 800e3b2:	b21b      	sxth	r3, r3
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	b21b      	sxth	r3, r3
 800e3b8:	b29a      	uxth	r2, r3
 800e3ba:	4b2d      	ldr	r3, [pc, #180]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e3bc:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*PACKET_CRC_LOW_REG, &status_reg_temp_h);
 800e3be:	1dfb      	adds	r3, r7, #7
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	f240 204e 	movw	r0, #590	; 0x24e
 800e3c6:	f7fd f869 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_CRC_LOW_REG+1, &status_reg_temp_l);
 800e3ca:	1dbb      	adds	r3, r7, #6
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	f240 204f 	movw	r0, #591	; 0x24f
 800e3d2:	f7fd f863 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e3d6:	79fb      	ldrb	r3, [r7, #7]
 800e3d8:	021b      	lsls	r3, r3, #8
 800e3da:	b21a      	sxth	r2, r3
 800e3dc:	79bb      	ldrb	r3, [r7, #6]
 800e3de:	b21b      	sxth	r3, r3
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	b21b      	sxth	r3, r3
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	4b22      	ldr	r3, [pc, #136]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e3e8:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*PACKET_DATA_0_REG, &status_reg_temp_h);
 800e3ea:	1dfb      	adds	r3, r7, #7
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	f44f 7014 	mov.w	r0, #592	; 0x250
 800e3f2:	f7fd f853 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_0_REG+1, &status_reg_temp_l);
 800e3f6:	1dbb      	adds	r3, r7, #6
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	f240 2051 	movw	r0, #593	; 0x251
 800e3fe:	f7fd f84d 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_data_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e402:	79fb      	ldrb	r3, [r7, #7]
 800e404:	021b      	lsls	r3, r3, #8
 800e406:	b21a      	sxth	r2, r3
 800e408:	79bb      	ldrb	r3, [r7, #6]
 800e40a:	b21b      	sxth	r3, r3
 800e40c:	4313      	orrs	r3, r2
 800e40e:	b21b      	sxth	r3, r3
 800e410:	b29a      	uxth	r2, r3
 800e412:	4b17      	ldr	r3, [pc, #92]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*PACKET_DATA_1_REG, &status_reg_temp_h);
 800e418:	1dfb      	adds	r3, r7, #7
 800e41a:	4619      	mov	r1, r3
 800e41c:	f240 2052 	movw	r0, #594	; 0x252
 800e420:	f7fd f83c 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_1_REG+1, &status_reg_temp_l);
 800e424:	1dbb      	adds	r3, r7, #6
 800e426:	4619      	mov	r1, r3
 800e428:	f240 2053 	movw	r0, #595	; 0x253
 800e42c:	f7fd f836 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_data_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e430:	79fb      	ldrb	r3, [r7, #7]
 800e432:	021b      	lsls	r3, r3, #8
 800e434:	b21a      	sxth	r2, r3
 800e436:	79bb      	ldrb	r3, [r7, #6]
 800e438:	b21b      	sxth	r3, r3
 800e43a:	4313      	orrs	r3, r2
 800e43c:	b21b      	sxth	r3, r3
 800e43e:	b29a      	uxth	r2, r3
 800e440:	4b0b      	ldr	r3, [pc, #44]	; (800e470 <read_bootloader_registers_no_rtos+0x614>)
 800e442:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PACKET_DATA_2_REG, &status_reg_temp_h);
 800e446:	1dfb      	adds	r3, r7, #7
 800e448:	4619      	mov	r1, r3
 800e44a:	f44f 7015 	mov.w	r0, #596	; 0x254
 800e44e:	f7fd f825 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_2_REG+1, &status_reg_temp_l);
 800e452:	1dbb      	adds	r3, r7, #6
 800e454:	4619      	mov	r1, r3
 800e456:	f240 2055 	movw	r0, #597	; 0x255
 800e45a:	f7fd f81f 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_data_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e45e:	79fb      	ldrb	r3, [r7, #7]
 800e460:	021b      	lsls	r3, r3, #8
 800e462:	b21a      	sxth	r2, r3
 800e464:	79bb      	ldrb	r3, [r7, #6]
 800e466:	b21b      	sxth	r3, r3
 800e468:	4313      	orrs	r3, r2
 800e46a:	b21b      	sxth	r3, r3
 800e46c:	e002      	b.n	800e474 <read_bootloader_registers_no_rtos+0x618>
 800e46e:	bf00      	nop
 800e470:	20009db4 	.word	0x20009db4
 800e474:	b29a      	uxth	r2, r3
 800e476:	4b1a      	ldr	r3, [pc, #104]	; (800e4e0 <read_bootloader_registers_no_rtos+0x684>)
 800e478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PACKET_DATA_3_REG, &status_reg_temp_h);
 800e47c:	1dfb      	adds	r3, r7, #7
 800e47e:	4619      	mov	r1, r3
 800e480:	f240 2056 	movw	r0, #598	; 0x256
 800e484:	f7fd f80a 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_3_REG+1, &status_reg_temp_l);
 800e488:	1dbb      	adds	r3, r7, #6
 800e48a:	4619      	mov	r1, r3
 800e48c:	f240 2057 	movw	r0, #599	; 0x257
 800e490:	f7fd f804 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_data_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e494:	79fb      	ldrb	r3, [r7, #7]
 800e496:	021b      	lsls	r3, r3, #8
 800e498:	b21a      	sxth	r2, r3
 800e49a:	79bb      	ldrb	r3, [r7, #6]
 800e49c:	b21b      	sxth	r3, r3
 800e49e:	4313      	orrs	r3, r2
 800e4a0:	b21b      	sxth	r3, r3
 800e4a2:	b29a      	uxth	r2, r3
 800e4a4:	4b0e      	ldr	r3, [pc, #56]	; (800e4e0 <read_bootloader_registers_no_rtos+0x684>)
 800e4a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*PACKET_DATA_4_REG, &status_reg_temp_h);
 800e4aa:	1dfb      	adds	r3, r7, #7
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e4b2:	f7fc fff3 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*PACKET_DATA_4_REG+1, &status_reg_temp_l);
 800e4b6:	1dbb      	adds	r3, r7, #6
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	f240 2059 	movw	r0, #601	; 0x259
 800e4be:	f7fc ffed 	bl	800b49c <fm25v02_read>
	bootloader_registers.packet_data_4_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e4c2:	79fb      	ldrb	r3, [r7, #7]
 800e4c4:	021b      	lsls	r3, r3, #8
 800e4c6:	b21a      	sxth	r2, r3
 800e4c8:	79bb      	ldrb	r3, [r7, #6]
 800e4ca:	b21b      	sxth	r3, r3
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	b21b      	sxth	r3, r3
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	4b03      	ldr	r3, [pc, #12]	; (800e4e0 <read_bootloader_registers_no_rtos+0x684>)
 800e4d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

}
 800e4d8:	bf00      	nop
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	20009db4 	.word	0x20009db4

0800e4e4 <read_change_boot_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти регистров бутлоадера без запуска операционной системы---------------

void read_change_boot_registers(void)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_3_REG, &status_reg_temp_h);
 800e4ea:	1dfb      	adds	r3, r7, #7
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	f7fc ffd4 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_3_REG+1, &status_reg_temp_l);
 800e4f4:	1dbb      	adds	r3, r7, #6
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	2001      	movs	r0, #1
 800e4fa:	f7fc ffcf 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_start_address_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e4fe:	79fb      	ldrb	r3, [r7, #7]
 800e500:	021b      	lsls	r3, r3, #8
 800e502:	b21a      	sxth	r2, r3
 800e504:	79bb      	ldrb	r3, [r7, #6]
 800e506:	b21b      	sxth	r3, r3
 800e508:	4313      	orrs	r3, r2
 800e50a:	b21b      	sxth	r3, r3
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	4b99      	ldr	r3, [pc, #612]	; (800e774 <read_change_boot_registers+0x290>)
 800e510:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_2_REG, &status_reg_temp_h);
 800e512:	1dfb      	adds	r3, r7, #7
 800e514:	4619      	mov	r1, r3
 800e516:	2002      	movs	r0, #2
 800e518:	f7fc ffc0 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_2_REG+1, &status_reg_temp_l);
 800e51c:	1dbb      	adds	r3, r7, #6
 800e51e:	4619      	mov	r1, r3
 800e520:	2003      	movs	r0, #3
 800e522:	f7fc ffbb 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_start_address_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e526:	79fb      	ldrb	r3, [r7, #7]
 800e528:	021b      	lsls	r3, r3, #8
 800e52a:	b21a      	sxth	r2, r3
 800e52c:	79bb      	ldrb	r3, [r7, #6]
 800e52e:	b21b      	sxth	r3, r3
 800e530:	4313      	orrs	r3, r2
 800e532:	b21b      	sxth	r3, r3
 800e534:	b29a      	uxth	r2, r3
 800e536:	4b8f      	ldr	r3, [pc, #572]	; (800e774 <read_change_boot_registers+0x290>)
 800e538:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_1_REG, &status_reg_temp_h);
 800e53a:	1dfb      	adds	r3, r7, #7
 800e53c:	4619      	mov	r1, r3
 800e53e:	2004      	movs	r0, #4
 800e540:	f7fc ffac 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_1_REG+1, &status_reg_temp_l);
 800e544:	1dbb      	adds	r3, r7, #6
 800e546:	4619      	mov	r1, r3
 800e548:	2005      	movs	r0, #5
 800e54a:	f7fc ffa7 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_start_address_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e54e:	79fb      	ldrb	r3, [r7, #7]
 800e550:	021b      	lsls	r3, r3, #8
 800e552:	b21a      	sxth	r2, r3
 800e554:	79bb      	ldrb	r3, [r7, #6]
 800e556:	b21b      	sxth	r3, r3
 800e558:	4313      	orrs	r3, r2
 800e55a:	b21b      	sxth	r3, r3
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	4b85      	ldr	r3, [pc, #532]	; (800e774 <read_change_boot_registers+0x290>)
 800e560:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_0_REG, &status_reg_temp_h);
 800e562:	1dfb      	adds	r3, r7, #7
 800e564:	4619      	mov	r1, r3
 800e566:	2006      	movs	r0, #6
 800e568:	f7fc ff98 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_START_ADDRESS_0_REG+1, &status_reg_temp_l);
 800e56c:	1dbb      	adds	r3, r7, #6
 800e56e:	4619      	mov	r1, r3
 800e570:	2007      	movs	r0, #7
 800e572:	f7fc ff93 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_start_address_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e576:	79fb      	ldrb	r3, [r7, #7]
 800e578:	021b      	lsls	r3, r3, #8
 800e57a:	b21a      	sxth	r2, r3
 800e57c:	79bb      	ldrb	r3, [r7, #6]
 800e57e:	b21b      	sxth	r3, r3
 800e580:	4313      	orrs	r3, r2
 800e582:	b21b      	sxth	r3, r3
 800e584:	b29a      	uxth	r2, r3
 800e586:	4b7b      	ldr	r3, [pc, #492]	; (800e774 <read_change_boot_registers+0x290>)
 800e588:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_3_REG, &status_reg_temp_h);
 800e58a:	1dfb      	adds	r3, r7, #7
 800e58c:	4619      	mov	r1, r3
 800e58e:	2008      	movs	r0, #8
 800e590:	f7fc ff84 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_3_REG+1, &status_reg_temp_l);
 800e594:	1dbb      	adds	r3, r7, #6
 800e596:	4619      	mov	r1, r3
 800e598:	2009      	movs	r0, #9
 800e59a:	f7fc ff7f 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_end_address_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e59e:	79fb      	ldrb	r3, [r7, #7]
 800e5a0:	021b      	lsls	r3, r3, #8
 800e5a2:	b21a      	sxth	r2, r3
 800e5a4:	79bb      	ldrb	r3, [r7, #6]
 800e5a6:	b21b      	sxth	r3, r3
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	b21b      	sxth	r3, r3
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	4b71      	ldr	r3, [pc, #452]	; (800e774 <read_change_boot_registers+0x290>)
 800e5b0:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_2_REG, &status_reg_temp_h);
 800e5b2:	1dfb      	adds	r3, r7, #7
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	200a      	movs	r0, #10
 800e5b8:	f7fc ff70 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_2_REG+1, &status_reg_temp_l);
 800e5bc:	1dbb      	adds	r3, r7, #6
 800e5be:	4619      	mov	r1, r3
 800e5c0:	200b      	movs	r0, #11
 800e5c2:	f7fc ff6b 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_end_address_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e5c6:	79fb      	ldrb	r3, [r7, #7]
 800e5c8:	021b      	lsls	r3, r3, #8
 800e5ca:	b21a      	sxth	r2, r3
 800e5cc:	79bb      	ldrb	r3, [r7, #6]
 800e5ce:	b21b      	sxth	r3, r3
 800e5d0:	4313      	orrs	r3, r2
 800e5d2:	b21b      	sxth	r3, r3
 800e5d4:	b29a      	uxth	r2, r3
 800e5d6:	4b67      	ldr	r3, [pc, #412]	; (800e774 <read_change_boot_registers+0x290>)
 800e5d8:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_1_REG, &status_reg_temp_h);
 800e5da:	1dfb      	adds	r3, r7, #7
 800e5dc:	4619      	mov	r1, r3
 800e5de:	200c      	movs	r0, #12
 800e5e0:	f7fc ff5c 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_1_REG+1, &status_reg_temp_l);
 800e5e4:	1dbb      	adds	r3, r7, #6
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	200d      	movs	r0, #13
 800e5ea:	f7fc ff57 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_end_address_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e5ee:	79fb      	ldrb	r3, [r7, #7]
 800e5f0:	021b      	lsls	r3, r3, #8
 800e5f2:	b21a      	sxth	r2, r3
 800e5f4:	79bb      	ldrb	r3, [r7, #6]
 800e5f6:	b21b      	sxth	r3, r3
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	b21b      	sxth	r3, r3
 800e5fc:	b29a      	uxth	r2, r3
 800e5fe:	4b5d      	ldr	r3, [pc, #372]	; (800e774 <read_change_boot_registers+0x290>)
 800e600:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_0_REG, &status_reg_temp_h);
 800e602:	1dfb      	adds	r3, r7, #7
 800e604:	4619      	mov	r1, r3
 800e606:	200e      	movs	r0, #14
 800e608:	f7fc ff48 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_END_ADDRESS_0_REG+1, &status_reg_temp_l);
 800e60c:	1dbb      	adds	r3, r7, #6
 800e60e:	4619      	mov	r1, r3
 800e610:	200f      	movs	r0, #15
 800e612:	f7fc ff43 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_end_address_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e616:	79fb      	ldrb	r3, [r7, #7]
 800e618:	021b      	lsls	r3, r3, #8
 800e61a:	b21a      	sxth	r2, r3
 800e61c:	79bb      	ldrb	r3, [r7, #6]
 800e61e:	b21b      	sxth	r3, r3
 800e620:	4313      	orrs	r3, r2
 800e622:	b21b      	sxth	r3, r3
 800e624:	b29a      	uxth	r2, r3
 800e626:	4b53      	ldr	r3, [pc, #332]	; (800e774 <read_change_boot_registers+0x290>)
 800e628:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*CHANGE_BOOT_CRC_HIGH_REG, &status_reg_temp_h);
 800e62a:	1dfb      	adds	r3, r7, #7
 800e62c:	4619      	mov	r1, r3
 800e62e:	2010      	movs	r0, #16
 800e630:	f7fc ff34 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_CRC_HIGH_REG+1, &status_reg_temp_l);
 800e634:	1dbb      	adds	r3, r7, #6
 800e636:	4619      	mov	r1, r3
 800e638:	2011      	movs	r0, #17
 800e63a:	f7fc ff2f 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_crc_high_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e63e:	79fb      	ldrb	r3, [r7, #7]
 800e640:	021b      	lsls	r3, r3, #8
 800e642:	b21a      	sxth	r2, r3
 800e644:	79bb      	ldrb	r3, [r7, #6]
 800e646:	b21b      	sxth	r3, r3
 800e648:	4313      	orrs	r3, r2
 800e64a:	b21b      	sxth	r3, r3
 800e64c:	b29a      	uxth	r2, r3
 800e64e:	4b49      	ldr	r3, [pc, #292]	; (800e774 <read_change_boot_registers+0x290>)
 800e650:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*CHANGE_BOOT_CRC_LOW_REG, &status_reg_temp_h);
 800e652:	1dfb      	adds	r3, r7, #7
 800e654:	4619      	mov	r1, r3
 800e656:	2012      	movs	r0, #18
 800e658:	f7fc ff20 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_CRC_LOW_REG+1, &status_reg_temp_l);
 800e65c:	1dbb      	adds	r3, r7, #6
 800e65e:	4619      	mov	r1, r3
 800e660:	2013      	movs	r0, #19
 800e662:	f7fc ff1b 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_crc_low_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e666:	79fb      	ldrb	r3, [r7, #7]
 800e668:	021b      	lsls	r3, r3, #8
 800e66a:	b21a      	sxth	r2, r3
 800e66c:	79bb      	ldrb	r3, [r7, #6]
 800e66e:	b21b      	sxth	r3, r3
 800e670:	4313      	orrs	r3, r2
 800e672:	b21b      	sxth	r3, r3
 800e674:	b29a      	uxth	r2, r3
 800e676:	4b3f      	ldr	r3, [pc, #252]	; (800e774 <read_change_boot_registers+0x290>)
 800e678:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_3_REG, &status_reg_temp_h);
 800e67a:	1dfb      	adds	r3, r7, #7
 800e67c:	4619      	mov	r1, r3
 800e67e:	2014      	movs	r0, #20
 800e680:	f7fc ff0c 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_3_REG+1, &status_reg_temp_l);
 800e684:	1dbb      	adds	r3, r7, #6
 800e686:	4619      	mov	r1, r3
 800e688:	2015      	movs	r0, #21
 800e68a:	f7fc ff07 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_3_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e68e:	79fb      	ldrb	r3, [r7, #7]
 800e690:	021b      	lsls	r3, r3, #8
 800e692:	b21a      	sxth	r2, r3
 800e694:	79bb      	ldrb	r3, [r7, #6]
 800e696:	b21b      	sxth	r3, r3
 800e698:	4313      	orrs	r3, r2
 800e69a:	b21b      	sxth	r3, r3
 800e69c:	b29a      	uxth	r2, r3
 800e69e:	4b35      	ldr	r3, [pc, #212]	; (800e774 <read_change_boot_registers+0x290>)
 800e6a0:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_2_REG, &status_reg_temp_h);
 800e6a2:	1dfb      	adds	r3, r7, #7
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	2016      	movs	r0, #22
 800e6a8:	f7fc fef8 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_2_REG+1, &status_reg_temp_l);
 800e6ac:	1dbb      	adds	r3, r7, #6
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	2017      	movs	r0, #23
 800e6b2:	f7fc fef3 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_2_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	021b      	lsls	r3, r3, #8
 800e6ba:	b21a      	sxth	r2, r3
 800e6bc:	79bb      	ldrb	r3, [r7, #6]
 800e6be:	b21b      	sxth	r3, r3
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	b21b      	sxth	r3, r3
 800e6c4:	b29a      	uxth	r2, r3
 800e6c6:	4b2b      	ldr	r3, [pc, #172]	; (800e774 <read_change_boot_registers+0x290>)
 800e6c8:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_1_REG, &status_reg_temp_h);
 800e6ca:	1dfb      	adds	r3, r7, #7
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	2018      	movs	r0, #24
 800e6d0:	f7fc fee4 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_1_REG+1, &status_reg_temp_l);
 800e6d4:	1dbb      	adds	r3, r7, #6
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	2019      	movs	r0, #25
 800e6da:	f7fc fedf 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_1_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e6de:	79fb      	ldrb	r3, [r7, #7]
 800e6e0:	021b      	lsls	r3, r3, #8
 800e6e2:	b21a      	sxth	r2, r3
 800e6e4:	79bb      	ldrb	r3, [r7, #6]
 800e6e6:	b21b      	sxth	r3, r3
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	b21b      	sxth	r3, r3
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	4b21      	ldr	r3, [pc, #132]	; (800e774 <read_change_boot_registers+0x290>)
 800e6f0:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_0_REG, &status_reg_temp_h);
 800e6f2:	1dfb      	adds	r3, r7, #7
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	201a      	movs	r0, #26
 800e6f8:	f7fc fed0 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_ADDRESS_TO_WRITE_0_REG+1, &status_reg_temp_l);
 800e6fc:	1dbb      	adds	r3, r7, #6
 800e6fe:	4619      	mov	r1, r3
 800e700:	201b      	movs	r0, #27
 800e702:	f7fc fecb 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_address_to_write_0_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e706:	79fb      	ldrb	r3, [r7, #7]
 800e708:	021b      	lsls	r3, r3, #8
 800e70a:	b21a      	sxth	r2, r3
 800e70c:	79bb      	ldrb	r3, [r7, #6]
 800e70e:	b21b      	sxth	r3, r3
 800e710:	4313      	orrs	r3, r2
 800e712:	b21b      	sxth	r3, r3
 800e714:	b29a      	uxth	r2, r3
 800e716:	4b17      	ldr	r3, [pc, #92]	; (800e774 <read_change_boot_registers+0x290>)
 800e718:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*CHANGE_BOOT_CRC_CORRECTNESS_REG, &status_reg_temp_h);
 800e71a:	1dfb      	adds	r3, r7, #7
 800e71c:	4619      	mov	r1, r3
 800e71e:	201c      	movs	r0, #28
 800e720:	f7fc febc 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_CRC_CORRECTNESS_REG+1, &status_reg_temp_l);
 800e724:	1dbb      	adds	r3, r7, #6
 800e726:	4619      	mov	r1, r3
 800e728:	201d      	movs	r0, #29
 800e72a:	f7fc feb7 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_crc_correctness_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e72e:	79fb      	ldrb	r3, [r7, #7]
 800e730:	021b      	lsls	r3, r3, #8
 800e732:	b21a      	sxth	r2, r3
 800e734:	79bb      	ldrb	r3, [r7, #6]
 800e736:	b21b      	sxth	r3, r3
 800e738:	4313      	orrs	r3, r2
 800e73a:	b21b      	sxth	r3, r3
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	4b0d      	ldr	r3, [pc, #52]	; (800e774 <read_change_boot_registers+0x290>)
 800e740:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*CHANGE_BOOT_WRITE_REG, &status_reg_temp_h);
 800e742:	1dfb      	adds	r3, r7, #7
 800e744:	4619      	mov	r1, r3
 800e746:	201e      	movs	r0, #30
 800e748:	f7fc fea8 	bl	800b49c <fm25v02_read>
	fm25v02_read(2*CHANGE_BOOT_WRITE_REG+1, &status_reg_temp_l);
 800e74c:	1dbb      	adds	r3, r7, #6
 800e74e:	4619      	mov	r1, r3
 800e750:	201f      	movs	r0, #31
 800e752:	f7fc fea3 	bl	800b49c <fm25v02_read>
	change_boot_registers.change_boot_write_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 800e756:	79fb      	ldrb	r3, [r7, #7]
 800e758:	021b      	lsls	r3, r3, #8
 800e75a:	b21a      	sxth	r2, r3
 800e75c:	79bb      	ldrb	r3, [r7, #6]
 800e75e:	b21b      	sxth	r3, r3
 800e760:	4313      	orrs	r3, r2
 800e762:	b21b      	sxth	r3, r3
 800e764:	b29a      	uxth	r2, r3
 800e766:	4b03      	ldr	r3, [pc, #12]	; (800e774 <read_change_boot_registers+0x290>)
 800e768:	83da      	strh	r2, [r3, #30]

}
 800e76a:	bf00      	nop
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	20009e00 	.word	0x20009e00

0800e778 <CRC16>:



//--------------------- Процедура расчета CRC16 -------------------------------------

 unsigned int CRC16( unsigned char * pucFrame, unsigned int usLen ){
 800e778:	b480      	push	{r7}
 800e77a:	b085      	sub	sp, #20
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
  unsigned char MB_Slave_ucCRCHi = 0xFF;
 800e782:	23ff      	movs	r3, #255	; 0xff
 800e784:	73fb      	strb	r3, [r7, #15]
  unsigned char MB_Slave_ucCRCLo = 0xFF;
 800e786:	23ff      	movs	r3, #255	; 0xff
 800e788:	73bb      	strb	r3, [r7, #14]
  int iIndex;
  //
  while( usLen-- ){
 800e78a:	e013      	b.n	800e7b4 <CRC16+0x3c>
    iIndex = MB_Slave_ucCRCLo ^ *( pucFrame++ );
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	1c5a      	adds	r2, r3, #1
 800e790:	607a      	str	r2, [r7, #4]
 800e792:	781a      	ldrb	r2, [r3, #0]
 800e794:	7bbb      	ldrb	r3, [r7, #14]
 800e796:	4053      	eors	r3, r2
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	60bb      	str	r3, [r7, #8]
    MB_Slave_ucCRCLo = MB_Slave_ucCRCHi ^ MB_Slave_aucCRCHi[iIndex];
 800e79c:	4a0d      	ldr	r2, [pc, #52]	; (800e7d4 <CRC16+0x5c>)
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	781a      	ldrb	r2, [r3, #0]
 800e7a4:	7bfb      	ldrb	r3, [r7, #15]
 800e7a6:	4053      	eors	r3, r2
 800e7a8:	73bb      	strb	r3, [r7, #14]
    MB_Slave_ucCRCHi = MB_Slave_aucCRCLo[iIndex];
 800e7aa:	4a0b      	ldr	r2, [pc, #44]	; (800e7d8 <CRC16+0x60>)
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	73fb      	strb	r3, [r7, #15]
  while( usLen-- ){
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	1e5a      	subs	r2, r3, #1
 800e7b8:	603a      	str	r2, [r7, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d1e6      	bne.n	800e78c <CRC16+0x14>
  }
  return MB_Slave_ucCRCHi << 8 | MB_Slave_ucCRCLo;
 800e7be:	7bfb      	ldrb	r3, [r7, #15]
 800e7c0:	021a      	lsls	r2, r3, #8
 800e7c2:	7bbb      	ldrb	r3, [r7, #14]
 800e7c4:	4313      	orrs	r3, r2
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3714      	adds	r7, #20
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	0800f4fc 	.word	0x0800f4fc
 800e7d8:	0800f5fc 	.word	0x0800f5fc

0800e7dc <__errno>:
 800e7dc:	4b01      	ldr	r3, [pc, #4]	; (800e7e4 <__errno+0x8>)
 800e7de:	6818      	ldr	r0, [r3, #0]
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	20000020 	.word	0x20000020

0800e7e8 <__libc_init_array>:
 800e7e8:	b570      	push	{r4, r5, r6, lr}
 800e7ea:	4d0d      	ldr	r5, [pc, #52]	; (800e820 <__libc_init_array+0x38>)
 800e7ec:	4c0d      	ldr	r4, [pc, #52]	; (800e824 <__libc_init_array+0x3c>)
 800e7ee:	1b64      	subs	r4, r4, r5
 800e7f0:	10a4      	asrs	r4, r4, #2
 800e7f2:	2600      	movs	r6, #0
 800e7f4:	42a6      	cmp	r6, r4
 800e7f6:	d109      	bne.n	800e80c <__libc_init_array+0x24>
 800e7f8:	4d0b      	ldr	r5, [pc, #44]	; (800e828 <__libc_init_array+0x40>)
 800e7fa:	4c0c      	ldr	r4, [pc, #48]	; (800e82c <__libc_init_array+0x44>)
 800e7fc:	f000 fcd0 	bl	800f1a0 <_init>
 800e800:	1b64      	subs	r4, r4, r5
 800e802:	10a4      	asrs	r4, r4, #2
 800e804:	2600      	movs	r6, #0
 800e806:	42a6      	cmp	r6, r4
 800e808:	d105      	bne.n	800e816 <__libc_init_array+0x2e>
 800e80a:	bd70      	pop	{r4, r5, r6, pc}
 800e80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e810:	4798      	blx	r3
 800e812:	3601      	adds	r6, #1
 800e814:	e7ee      	b.n	800e7f4 <__libc_init_array+0xc>
 800e816:	f855 3b04 	ldr.w	r3, [r5], #4
 800e81a:	4798      	blx	r3
 800e81c:	3601      	adds	r6, #1
 800e81e:	e7f2      	b.n	800e806 <__libc_init_array+0x1e>
 800e820:	0800f798 	.word	0x0800f798
 800e824:	0800f798 	.word	0x0800f798
 800e828:	0800f798 	.word	0x0800f798
 800e82c:	0800f79c 	.word	0x0800f79c

0800e830 <__retarget_lock_acquire_recursive>:
 800e830:	4770      	bx	lr

0800e832 <__retarget_lock_release_recursive>:
 800e832:	4770      	bx	lr

0800e834 <memcpy>:
 800e834:	440a      	add	r2, r1
 800e836:	4291      	cmp	r1, r2
 800e838:	f100 33ff 	add.w	r3, r0, #4294967295
 800e83c:	d100      	bne.n	800e840 <memcpy+0xc>
 800e83e:	4770      	bx	lr
 800e840:	b510      	push	{r4, lr}
 800e842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e84a:	4291      	cmp	r1, r2
 800e84c:	d1f9      	bne.n	800e842 <memcpy+0xe>
 800e84e:	bd10      	pop	{r4, pc}

0800e850 <memset>:
 800e850:	4402      	add	r2, r0
 800e852:	4603      	mov	r3, r0
 800e854:	4293      	cmp	r3, r2
 800e856:	d100      	bne.n	800e85a <memset+0xa>
 800e858:	4770      	bx	lr
 800e85a:	f803 1b01 	strb.w	r1, [r3], #1
 800e85e:	e7f9      	b.n	800e854 <memset+0x4>

0800e860 <_malloc_r>:
 800e860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e862:	1ccd      	adds	r5, r1, #3
 800e864:	f025 0503 	bic.w	r5, r5, #3
 800e868:	3508      	adds	r5, #8
 800e86a:	2d0c      	cmp	r5, #12
 800e86c:	bf38      	it	cc
 800e86e:	250c      	movcc	r5, #12
 800e870:	2d00      	cmp	r5, #0
 800e872:	4606      	mov	r6, r0
 800e874:	db01      	blt.n	800e87a <_malloc_r+0x1a>
 800e876:	42a9      	cmp	r1, r5
 800e878:	d903      	bls.n	800e882 <_malloc_r+0x22>
 800e87a:	230c      	movs	r3, #12
 800e87c:	6033      	str	r3, [r6, #0]
 800e87e:	2000      	movs	r0, #0
 800e880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e882:	f000 f8f9 	bl	800ea78 <__malloc_lock>
 800e886:	4921      	ldr	r1, [pc, #132]	; (800e90c <_malloc_r+0xac>)
 800e888:	680a      	ldr	r2, [r1, #0]
 800e88a:	4614      	mov	r4, r2
 800e88c:	b99c      	cbnz	r4, 800e8b6 <_malloc_r+0x56>
 800e88e:	4f20      	ldr	r7, [pc, #128]	; (800e910 <_malloc_r+0xb0>)
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	b923      	cbnz	r3, 800e89e <_malloc_r+0x3e>
 800e894:	4621      	mov	r1, r4
 800e896:	4630      	mov	r0, r6
 800e898:	f000 f8a6 	bl	800e9e8 <_sbrk_r>
 800e89c:	6038      	str	r0, [r7, #0]
 800e89e:	4629      	mov	r1, r5
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	f000 f8a1 	bl	800e9e8 <_sbrk_r>
 800e8a6:	1c43      	adds	r3, r0, #1
 800e8a8:	d123      	bne.n	800e8f2 <_malloc_r+0x92>
 800e8aa:	230c      	movs	r3, #12
 800e8ac:	6033      	str	r3, [r6, #0]
 800e8ae:	4630      	mov	r0, r6
 800e8b0:	f000 f8e8 	bl	800ea84 <__malloc_unlock>
 800e8b4:	e7e3      	b.n	800e87e <_malloc_r+0x1e>
 800e8b6:	6823      	ldr	r3, [r4, #0]
 800e8b8:	1b5b      	subs	r3, r3, r5
 800e8ba:	d417      	bmi.n	800e8ec <_malloc_r+0x8c>
 800e8bc:	2b0b      	cmp	r3, #11
 800e8be:	d903      	bls.n	800e8c8 <_malloc_r+0x68>
 800e8c0:	6023      	str	r3, [r4, #0]
 800e8c2:	441c      	add	r4, r3
 800e8c4:	6025      	str	r5, [r4, #0]
 800e8c6:	e004      	b.n	800e8d2 <_malloc_r+0x72>
 800e8c8:	6863      	ldr	r3, [r4, #4]
 800e8ca:	42a2      	cmp	r2, r4
 800e8cc:	bf0c      	ite	eq
 800e8ce:	600b      	streq	r3, [r1, #0]
 800e8d0:	6053      	strne	r3, [r2, #4]
 800e8d2:	4630      	mov	r0, r6
 800e8d4:	f000 f8d6 	bl	800ea84 <__malloc_unlock>
 800e8d8:	f104 000b 	add.w	r0, r4, #11
 800e8dc:	1d23      	adds	r3, r4, #4
 800e8de:	f020 0007 	bic.w	r0, r0, #7
 800e8e2:	1ac2      	subs	r2, r0, r3
 800e8e4:	d0cc      	beq.n	800e880 <_malloc_r+0x20>
 800e8e6:	1a1b      	subs	r3, r3, r0
 800e8e8:	50a3      	str	r3, [r4, r2]
 800e8ea:	e7c9      	b.n	800e880 <_malloc_r+0x20>
 800e8ec:	4622      	mov	r2, r4
 800e8ee:	6864      	ldr	r4, [r4, #4]
 800e8f0:	e7cc      	b.n	800e88c <_malloc_r+0x2c>
 800e8f2:	1cc4      	adds	r4, r0, #3
 800e8f4:	f024 0403 	bic.w	r4, r4, #3
 800e8f8:	42a0      	cmp	r0, r4
 800e8fa:	d0e3      	beq.n	800e8c4 <_malloc_r+0x64>
 800e8fc:	1a21      	subs	r1, r4, r0
 800e8fe:	4630      	mov	r0, r6
 800e900:	f000 f872 	bl	800e9e8 <_sbrk_r>
 800e904:	3001      	adds	r0, #1
 800e906:	d1dd      	bne.n	800e8c4 <_malloc_r+0x64>
 800e908:	e7cf      	b.n	800e8aa <_malloc_r+0x4a>
 800e90a:	bf00      	nop
 800e90c:	20007fa0 	.word	0x20007fa0
 800e910:	20007fa4 	.word	0x20007fa4

0800e914 <cleanup_glue>:
 800e914:	b538      	push	{r3, r4, r5, lr}
 800e916:	460c      	mov	r4, r1
 800e918:	6809      	ldr	r1, [r1, #0]
 800e91a:	4605      	mov	r5, r0
 800e91c:	b109      	cbz	r1, 800e922 <cleanup_glue+0xe>
 800e91e:	f7ff fff9 	bl	800e914 <cleanup_glue>
 800e922:	4621      	mov	r1, r4
 800e924:	4628      	mov	r0, r5
 800e926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e92a:	f000 b8b1 	b.w	800ea90 <_free_r>
	...

0800e930 <_reclaim_reent>:
 800e930:	4b2c      	ldr	r3, [pc, #176]	; (800e9e4 <_reclaim_reent+0xb4>)
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	4283      	cmp	r3, r0
 800e936:	b570      	push	{r4, r5, r6, lr}
 800e938:	4604      	mov	r4, r0
 800e93a:	d051      	beq.n	800e9e0 <_reclaim_reent+0xb0>
 800e93c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e93e:	b143      	cbz	r3, 800e952 <_reclaim_reent+0x22>
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d14a      	bne.n	800e9dc <_reclaim_reent+0xac>
 800e946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e948:	6819      	ldr	r1, [r3, #0]
 800e94a:	b111      	cbz	r1, 800e952 <_reclaim_reent+0x22>
 800e94c:	4620      	mov	r0, r4
 800e94e:	f000 f89f 	bl	800ea90 <_free_r>
 800e952:	6961      	ldr	r1, [r4, #20]
 800e954:	b111      	cbz	r1, 800e95c <_reclaim_reent+0x2c>
 800e956:	4620      	mov	r0, r4
 800e958:	f000 f89a 	bl	800ea90 <_free_r>
 800e95c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e95e:	b111      	cbz	r1, 800e966 <_reclaim_reent+0x36>
 800e960:	4620      	mov	r0, r4
 800e962:	f000 f895 	bl	800ea90 <_free_r>
 800e966:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e968:	b111      	cbz	r1, 800e970 <_reclaim_reent+0x40>
 800e96a:	4620      	mov	r0, r4
 800e96c:	f000 f890 	bl	800ea90 <_free_r>
 800e970:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e972:	b111      	cbz	r1, 800e97a <_reclaim_reent+0x4a>
 800e974:	4620      	mov	r0, r4
 800e976:	f000 f88b 	bl	800ea90 <_free_r>
 800e97a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e97c:	b111      	cbz	r1, 800e984 <_reclaim_reent+0x54>
 800e97e:	4620      	mov	r0, r4
 800e980:	f000 f886 	bl	800ea90 <_free_r>
 800e984:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e986:	b111      	cbz	r1, 800e98e <_reclaim_reent+0x5e>
 800e988:	4620      	mov	r0, r4
 800e98a:	f000 f881 	bl	800ea90 <_free_r>
 800e98e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e990:	b111      	cbz	r1, 800e998 <_reclaim_reent+0x68>
 800e992:	4620      	mov	r0, r4
 800e994:	f000 f87c 	bl	800ea90 <_free_r>
 800e998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e99a:	b111      	cbz	r1, 800e9a2 <_reclaim_reent+0x72>
 800e99c:	4620      	mov	r0, r4
 800e99e:	f000 f877 	bl	800ea90 <_free_r>
 800e9a2:	69a3      	ldr	r3, [r4, #24]
 800e9a4:	b1e3      	cbz	r3, 800e9e0 <_reclaim_reent+0xb0>
 800e9a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	4798      	blx	r3
 800e9ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e9ae:	b1b9      	cbz	r1, 800e9e0 <_reclaim_reent+0xb0>
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e9b6:	f7ff bfad 	b.w	800e914 <cleanup_glue>
 800e9ba:	5949      	ldr	r1, [r1, r5]
 800e9bc:	b941      	cbnz	r1, 800e9d0 <_reclaim_reent+0xa0>
 800e9be:	3504      	adds	r5, #4
 800e9c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9c2:	2d80      	cmp	r5, #128	; 0x80
 800e9c4:	68d9      	ldr	r1, [r3, #12]
 800e9c6:	d1f8      	bne.n	800e9ba <_reclaim_reent+0x8a>
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	f000 f861 	bl	800ea90 <_free_r>
 800e9ce:	e7ba      	b.n	800e946 <_reclaim_reent+0x16>
 800e9d0:	680e      	ldr	r6, [r1, #0]
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f000 f85c 	bl	800ea90 <_free_r>
 800e9d8:	4631      	mov	r1, r6
 800e9da:	e7ef      	b.n	800e9bc <_reclaim_reent+0x8c>
 800e9dc:	2500      	movs	r5, #0
 800e9de:	e7ef      	b.n	800e9c0 <_reclaim_reent+0x90>
 800e9e0:	bd70      	pop	{r4, r5, r6, pc}
 800e9e2:	bf00      	nop
 800e9e4:	20000020 	.word	0x20000020

0800e9e8 <_sbrk_r>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	4d06      	ldr	r5, [pc, #24]	; (800ea04 <_sbrk_r+0x1c>)
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	4608      	mov	r0, r1
 800e9f2:	602b      	str	r3, [r5, #0]
 800e9f4:	f7f2 fe52 	bl	800169c <_sbrk>
 800e9f8:	1c43      	adds	r3, r0, #1
 800e9fa:	d102      	bne.n	800ea02 <_sbrk_r+0x1a>
 800e9fc:	682b      	ldr	r3, [r5, #0]
 800e9fe:	b103      	cbz	r3, 800ea02 <_sbrk_r+0x1a>
 800ea00:	6023      	str	r3, [r4, #0]
 800ea02:	bd38      	pop	{r3, r4, r5, pc}
 800ea04:	20009f4c 	.word	0x20009f4c

0800ea08 <siprintf>:
 800ea08:	b40e      	push	{r1, r2, r3}
 800ea0a:	b500      	push	{lr}
 800ea0c:	b09c      	sub	sp, #112	; 0x70
 800ea0e:	ab1d      	add	r3, sp, #116	; 0x74
 800ea10:	9002      	str	r0, [sp, #8]
 800ea12:	9006      	str	r0, [sp, #24]
 800ea14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea18:	4809      	ldr	r0, [pc, #36]	; (800ea40 <siprintf+0x38>)
 800ea1a:	9107      	str	r1, [sp, #28]
 800ea1c:	9104      	str	r1, [sp, #16]
 800ea1e:	4909      	ldr	r1, [pc, #36]	; (800ea44 <siprintf+0x3c>)
 800ea20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea24:	9105      	str	r1, [sp, #20]
 800ea26:	6800      	ldr	r0, [r0, #0]
 800ea28:	9301      	str	r3, [sp, #4]
 800ea2a:	a902      	add	r1, sp, #8
 800ea2c:	f000 f8dc 	bl	800ebe8 <_svfiprintf_r>
 800ea30:	9b02      	ldr	r3, [sp, #8]
 800ea32:	2200      	movs	r2, #0
 800ea34:	701a      	strb	r2, [r3, #0]
 800ea36:	b01c      	add	sp, #112	; 0x70
 800ea38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea3c:	b003      	add	sp, #12
 800ea3e:	4770      	bx	lr
 800ea40:	20000020 	.word	0x20000020
 800ea44:	ffff0208 	.word	0xffff0208

0800ea48 <strstr>:
 800ea48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea4a:	780c      	ldrb	r4, [r1, #0]
 800ea4c:	b164      	cbz	r4, 800ea68 <strstr+0x20>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	781a      	ldrb	r2, [r3, #0]
 800ea52:	4618      	mov	r0, r3
 800ea54:	1c5e      	adds	r6, r3, #1
 800ea56:	b90a      	cbnz	r2, 800ea5c <strstr+0x14>
 800ea58:	4610      	mov	r0, r2
 800ea5a:	e005      	b.n	800ea68 <strstr+0x20>
 800ea5c:	4294      	cmp	r4, r2
 800ea5e:	d108      	bne.n	800ea72 <strstr+0x2a>
 800ea60:	460d      	mov	r5, r1
 800ea62:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800ea66:	b902      	cbnz	r2, 800ea6a <strstr+0x22>
 800ea68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea6a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800ea6e:	4297      	cmp	r7, r2
 800ea70:	d0f7      	beq.n	800ea62 <strstr+0x1a>
 800ea72:	4633      	mov	r3, r6
 800ea74:	e7ec      	b.n	800ea50 <strstr+0x8>
	...

0800ea78 <__malloc_lock>:
 800ea78:	4801      	ldr	r0, [pc, #4]	; (800ea80 <__malloc_lock+0x8>)
 800ea7a:	f7ff bed9 	b.w	800e830 <__retarget_lock_acquire_recursive>
 800ea7e:	bf00      	nop
 800ea80:	20009f44 	.word	0x20009f44

0800ea84 <__malloc_unlock>:
 800ea84:	4801      	ldr	r0, [pc, #4]	; (800ea8c <__malloc_unlock+0x8>)
 800ea86:	f7ff bed4 	b.w	800e832 <__retarget_lock_release_recursive>
 800ea8a:	bf00      	nop
 800ea8c:	20009f44 	.word	0x20009f44

0800ea90 <_free_r>:
 800ea90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea92:	2900      	cmp	r1, #0
 800ea94:	d048      	beq.n	800eb28 <_free_r+0x98>
 800ea96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea9a:	9001      	str	r0, [sp, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	f1a1 0404 	sub.w	r4, r1, #4
 800eaa2:	bfb8      	it	lt
 800eaa4:	18e4      	addlt	r4, r4, r3
 800eaa6:	f7ff ffe7 	bl	800ea78 <__malloc_lock>
 800eaaa:	4a20      	ldr	r2, [pc, #128]	; (800eb2c <_free_r+0x9c>)
 800eaac:	9801      	ldr	r0, [sp, #4]
 800eaae:	6813      	ldr	r3, [r2, #0]
 800eab0:	4615      	mov	r5, r2
 800eab2:	b933      	cbnz	r3, 800eac2 <_free_r+0x32>
 800eab4:	6063      	str	r3, [r4, #4]
 800eab6:	6014      	str	r4, [r2, #0]
 800eab8:	b003      	add	sp, #12
 800eaba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eabe:	f7ff bfe1 	b.w	800ea84 <__malloc_unlock>
 800eac2:	42a3      	cmp	r3, r4
 800eac4:	d90b      	bls.n	800eade <_free_r+0x4e>
 800eac6:	6821      	ldr	r1, [r4, #0]
 800eac8:	1862      	adds	r2, r4, r1
 800eaca:	4293      	cmp	r3, r2
 800eacc:	bf04      	itt	eq
 800eace:	681a      	ldreq	r2, [r3, #0]
 800ead0:	685b      	ldreq	r3, [r3, #4]
 800ead2:	6063      	str	r3, [r4, #4]
 800ead4:	bf04      	itt	eq
 800ead6:	1852      	addeq	r2, r2, r1
 800ead8:	6022      	streq	r2, [r4, #0]
 800eada:	602c      	str	r4, [r5, #0]
 800eadc:	e7ec      	b.n	800eab8 <_free_r+0x28>
 800eade:	461a      	mov	r2, r3
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	b10b      	cbz	r3, 800eae8 <_free_r+0x58>
 800eae4:	42a3      	cmp	r3, r4
 800eae6:	d9fa      	bls.n	800eade <_free_r+0x4e>
 800eae8:	6811      	ldr	r1, [r2, #0]
 800eaea:	1855      	adds	r5, r2, r1
 800eaec:	42a5      	cmp	r5, r4
 800eaee:	d10b      	bne.n	800eb08 <_free_r+0x78>
 800eaf0:	6824      	ldr	r4, [r4, #0]
 800eaf2:	4421      	add	r1, r4
 800eaf4:	1854      	adds	r4, r2, r1
 800eaf6:	42a3      	cmp	r3, r4
 800eaf8:	6011      	str	r1, [r2, #0]
 800eafa:	d1dd      	bne.n	800eab8 <_free_r+0x28>
 800eafc:	681c      	ldr	r4, [r3, #0]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	6053      	str	r3, [r2, #4]
 800eb02:	4421      	add	r1, r4
 800eb04:	6011      	str	r1, [r2, #0]
 800eb06:	e7d7      	b.n	800eab8 <_free_r+0x28>
 800eb08:	d902      	bls.n	800eb10 <_free_r+0x80>
 800eb0a:	230c      	movs	r3, #12
 800eb0c:	6003      	str	r3, [r0, #0]
 800eb0e:	e7d3      	b.n	800eab8 <_free_r+0x28>
 800eb10:	6825      	ldr	r5, [r4, #0]
 800eb12:	1961      	adds	r1, r4, r5
 800eb14:	428b      	cmp	r3, r1
 800eb16:	bf04      	itt	eq
 800eb18:	6819      	ldreq	r1, [r3, #0]
 800eb1a:	685b      	ldreq	r3, [r3, #4]
 800eb1c:	6063      	str	r3, [r4, #4]
 800eb1e:	bf04      	itt	eq
 800eb20:	1949      	addeq	r1, r1, r5
 800eb22:	6021      	streq	r1, [r4, #0]
 800eb24:	6054      	str	r4, [r2, #4]
 800eb26:	e7c7      	b.n	800eab8 <_free_r+0x28>
 800eb28:	b003      	add	sp, #12
 800eb2a:	bd30      	pop	{r4, r5, pc}
 800eb2c:	20007fa0 	.word	0x20007fa0

0800eb30 <__ssputs_r>:
 800eb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb34:	688e      	ldr	r6, [r1, #8]
 800eb36:	429e      	cmp	r6, r3
 800eb38:	4682      	mov	sl, r0
 800eb3a:	460c      	mov	r4, r1
 800eb3c:	4690      	mov	r8, r2
 800eb3e:	461f      	mov	r7, r3
 800eb40:	d838      	bhi.n	800ebb4 <__ssputs_r+0x84>
 800eb42:	898a      	ldrh	r2, [r1, #12]
 800eb44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eb48:	d032      	beq.n	800ebb0 <__ssputs_r+0x80>
 800eb4a:	6825      	ldr	r5, [r4, #0]
 800eb4c:	6909      	ldr	r1, [r1, #16]
 800eb4e:	eba5 0901 	sub.w	r9, r5, r1
 800eb52:	6965      	ldr	r5, [r4, #20]
 800eb54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eb58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	444b      	add	r3, r9
 800eb60:	106d      	asrs	r5, r5, #1
 800eb62:	429d      	cmp	r5, r3
 800eb64:	bf38      	it	cc
 800eb66:	461d      	movcc	r5, r3
 800eb68:	0553      	lsls	r3, r2, #21
 800eb6a:	d531      	bpl.n	800ebd0 <__ssputs_r+0xa0>
 800eb6c:	4629      	mov	r1, r5
 800eb6e:	f7ff fe77 	bl	800e860 <_malloc_r>
 800eb72:	4606      	mov	r6, r0
 800eb74:	b950      	cbnz	r0, 800eb8c <__ssputs_r+0x5c>
 800eb76:	230c      	movs	r3, #12
 800eb78:	f8ca 3000 	str.w	r3, [sl]
 800eb7c:	89a3      	ldrh	r3, [r4, #12]
 800eb7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb82:	81a3      	strh	r3, [r4, #12]
 800eb84:	f04f 30ff 	mov.w	r0, #4294967295
 800eb88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb8c:	6921      	ldr	r1, [r4, #16]
 800eb8e:	464a      	mov	r2, r9
 800eb90:	f7ff fe50 	bl	800e834 <memcpy>
 800eb94:	89a3      	ldrh	r3, [r4, #12]
 800eb96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eb9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb9e:	81a3      	strh	r3, [r4, #12]
 800eba0:	6126      	str	r6, [r4, #16]
 800eba2:	6165      	str	r5, [r4, #20]
 800eba4:	444e      	add	r6, r9
 800eba6:	eba5 0509 	sub.w	r5, r5, r9
 800ebaa:	6026      	str	r6, [r4, #0]
 800ebac:	60a5      	str	r5, [r4, #8]
 800ebae:	463e      	mov	r6, r7
 800ebb0:	42be      	cmp	r6, r7
 800ebb2:	d900      	bls.n	800ebb6 <__ssputs_r+0x86>
 800ebb4:	463e      	mov	r6, r7
 800ebb6:	4632      	mov	r2, r6
 800ebb8:	6820      	ldr	r0, [r4, #0]
 800ebba:	4641      	mov	r1, r8
 800ebbc:	f000 faa8 	bl	800f110 <memmove>
 800ebc0:	68a3      	ldr	r3, [r4, #8]
 800ebc2:	6822      	ldr	r2, [r4, #0]
 800ebc4:	1b9b      	subs	r3, r3, r6
 800ebc6:	4432      	add	r2, r6
 800ebc8:	60a3      	str	r3, [r4, #8]
 800ebca:	6022      	str	r2, [r4, #0]
 800ebcc:	2000      	movs	r0, #0
 800ebce:	e7db      	b.n	800eb88 <__ssputs_r+0x58>
 800ebd0:	462a      	mov	r2, r5
 800ebd2:	f000 fab7 	bl	800f144 <_realloc_r>
 800ebd6:	4606      	mov	r6, r0
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d1e1      	bne.n	800eba0 <__ssputs_r+0x70>
 800ebdc:	6921      	ldr	r1, [r4, #16]
 800ebde:	4650      	mov	r0, sl
 800ebe0:	f7ff ff56 	bl	800ea90 <_free_r>
 800ebe4:	e7c7      	b.n	800eb76 <__ssputs_r+0x46>
	...

0800ebe8 <_svfiprintf_r>:
 800ebe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebec:	4698      	mov	r8, r3
 800ebee:	898b      	ldrh	r3, [r1, #12]
 800ebf0:	061b      	lsls	r3, r3, #24
 800ebf2:	b09d      	sub	sp, #116	; 0x74
 800ebf4:	4607      	mov	r7, r0
 800ebf6:	460d      	mov	r5, r1
 800ebf8:	4614      	mov	r4, r2
 800ebfa:	d50e      	bpl.n	800ec1a <_svfiprintf_r+0x32>
 800ebfc:	690b      	ldr	r3, [r1, #16]
 800ebfe:	b963      	cbnz	r3, 800ec1a <_svfiprintf_r+0x32>
 800ec00:	2140      	movs	r1, #64	; 0x40
 800ec02:	f7ff fe2d 	bl	800e860 <_malloc_r>
 800ec06:	6028      	str	r0, [r5, #0]
 800ec08:	6128      	str	r0, [r5, #16]
 800ec0a:	b920      	cbnz	r0, 800ec16 <_svfiprintf_r+0x2e>
 800ec0c:	230c      	movs	r3, #12
 800ec0e:	603b      	str	r3, [r7, #0]
 800ec10:	f04f 30ff 	mov.w	r0, #4294967295
 800ec14:	e0d1      	b.n	800edba <_svfiprintf_r+0x1d2>
 800ec16:	2340      	movs	r3, #64	; 0x40
 800ec18:	616b      	str	r3, [r5, #20]
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ec1e:	2320      	movs	r3, #32
 800ec20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec28:	2330      	movs	r3, #48	; 0x30
 800ec2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800edd4 <_svfiprintf_r+0x1ec>
 800ec2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec32:	f04f 0901 	mov.w	r9, #1
 800ec36:	4623      	mov	r3, r4
 800ec38:	469a      	mov	sl, r3
 800ec3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec3e:	b10a      	cbz	r2, 800ec44 <_svfiprintf_r+0x5c>
 800ec40:	2a25      	cmp	r2, #37	; 0x25
 800ec42:	d1f9      	bne.n	800ec38 <_svfiprintf_r+0x50>
 800ec44:	ebba 0b04 	subs.w	fp, sl, r4
 800ec48:	d00b      	beq.n	800ec62 <_svfiprintf_r+0x7a>
 800ec4a:	465b      	mov	r3, fp
 800ec4c:	4622      	mov	r2, r4
 800ec4e:	4629      	mov	r1, r5
 800ec50:	4638      	mov	r0, r7
 800ec52:	f7ff ff6d 	bl	800eb30 <__ssputs_r>
 800ec56:	3001      	adds	r0, #1
 800ec58:	f000 80aa 	beq.w	800edb0 <_svfiprintf_r+0x1c8>
 800ec5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec5e:	445a      	add	r2, fp
 800ec60:	9209      	str	r2, [sp, #36]	; 0x24
 800ec62:	f89a 3000 	ldrb.w	r3, [sl]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f000 80a2 	beq.w	800edb0 <_svfiprintf_r+0x1c8>
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec76:	f10a 0a01 	add.w	sl, sl, #1
 800ec7a:	9304      	str	r3, [sp, #16]
 800ec7c:	9307      	str	r3, [sp, #28]
 800ec7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec82:	931a      	str	r3, [sp, #104]	; 0x68
 800ec84:	4654      	mov	r4, sl
 800ec86:	2205      	movs	r2, #5
 800ec88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec8c:	4851      	ldr	r0, [pc, #324]	; (800edd4 <_svfiprintf_r+0x1ec>)
 800ec8e:	f7f1 faa7 	bl	80001e0 <memchr>
 800ec92:	9a04      	ldr	r2, [sp, #16]
 800ec94:	b9d8      	cbnz	r0, 800ecce <_svfiprintf_r+0xe6>
 800ec96:	06d0      	lsls	r0, r2, #27
 800ec98:	bf44      	itt	mi
 800ec9a:	2320      	movmi	r3, #32
 800ec9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eca0:	0711      	lsls	r1, r2, #28
 800eca2:	bf44      	itt	mi
 800eca4:	232b      	movmi	r3, #43	; 0x2b
 800eca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecaa:	f89a 3000 	ldrb.w	r3, [sl]
 800ecae:	2b2a      	cmp	r3, #42	; 0x2a
 800ecb0:	d015      	beq.n	800ecde <_svfiprintf_r+0xf6>
 800ecb2:	9a07      	ldr	r2, [sp, #28]
 800ecb4:	4654      	mov	r4, sl
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	f04f 0c0a 	mov.w	ip, #10
 800ecbc:	4621      	mov	r1, r4
 800ecbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecc2:	3b30      	subs	r3, #48	; 0x30
 800ecc4:	2b09      	cmp	r3, #9
 800ecc6:	d94e      	bls.n	800ed66 <_svfiprintf_r+0x17e>
 800ecc8:	b1b0      	cbz	r0, 800ecf8 <_svfiprintf_r+0x110>
 800ecca:	9207      	str	r2, [sp, #28]
 800eccc:	e014      	b.n	800ecf8 <_svfiprintf_r+0x110>
 800ecce:	eba0 0308 	sub.w	r3, r0, r8
 800ecd2:	fa09 f303 	lsl.w	r3, r9, r3
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	9304      	str	r3, [sp, #16]
 800ecda:	46a2      	mov	sl, r4
 800ecdc:	e7d2      	b.n	800ec84 <_svfiprintf_r+0x9c>
 800ecde:	9b03      	ldr	r3, [sp, #12]
 800ece0:	1d19      	adds	r1, r3, #4
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	9103      	str	r1, [sp, #12]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	bfbb      	ittet	lt
 800ecea:	425b      	neglt	r3, r3
 800ecec:	f042 0202 	orrlt.w	r2, r2, #2
 800ecf0:	9307      	strge	r3, [sp, #28]
 800ecf2:	9307      	strlt	r3, [sp, #28]
 800ecf4:	bfb8      	it	lt
 800ecf6:	9204      	strlt	r2, [sp, #16]
 800ecf8:	7823      	ldrb	r3, [r4, #0]
 800ecfa:	2b2e      	cmp	r3, #46	; 0x2e
 800ecfc:	d10c      	bne.n	800ed18 <_svfiprintf_r+0x130>
 800ecfe:	7863      	ldrb	r3, [r4, #1]
 800ed00:	2b2a      	cmp	r3, #42	; 0x2a
 800ed02:	d135      	bne.n	800ed70 <_svfiprintf_r+0x188>
 800ed04:	9b03      	ldr	r3, [sp, #12]
 800ed06:	1d1a      	adds	r2, r3, #4
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	9203      	str	r2, [sp, #12]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	bfb8      	it	lt
 800ed10:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed14:	3402      	adds	r4, #2
 800ed16:	9305      	str	r3, [sp, #20]
 800ed18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ede4 <_svfiprintf_r+0x1fc>
 800ed1c:	7821      	ldrb	r1, [r4, #0]
 800ed1e:	2203      	movs	r2, #3
 800ed20:	4650      	mov	r0, sl
 800ed22:	f7f1 fa5d 	bl	80001e0 <memchr>
 800ed26:	b140      	cbz	r0, 800ed3a <_svfiprintf_r+0x152>
 800ed28:	2340      	movs	r3, #64	; 0x40
 800ed2a:	eba0 000a 	sub.w	r0, r0, sl
 800ed2e:	fa03 f000 	lsl.w	r0, r3, r0
 800ed32:	9b04      	ldr	r3, [sp, #16]
 800ed34:	4303      	orrs	r3, r0
 800ed36:	3401      	adds	r4, #1
 800ed38:	9304      	str	r3, [sp, #16]
 800ed3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed3e:	4826      	ldr	r0, [pc, #152]	; (800edd8 <_svfiprintf_r+0x1f0>)
 800ed40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed44:	2206      	movs	r2, #6
 800ed46:	f7f1 fa4b 	bl	80001e0 <memchr>
 800ed4a:	2800      	cmp	r0, #0
 800ed4c:	d038      	beq.n	800edc0 <_svfiprintf_r+0x1d8>
 800ed4e:	4b23      	ldr	r3, [pc, #140]	; (800eddc <_svfiprintf_r+0x1f4>)
 800ed50:	bb1b      	cbnz	r3, 800ed9a <_svfiprintf_r+0x1b2>
 800ed52:	9b03      	ldr	r3, [sp, #12]
 800ed54:	3307      	adds	r3, #7
 800ed56:	f023 0307 	bic.w	r3, r3, #7
 800ed5a:	3308      	adds	r3, #8
 800ed5c:	9303      	str	r3, [sp, #12]
 800ed5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed60:	4433      	add	r3, r6
 800ed62:	9309      	str	r3, [sp, #36]	; 0x24
 800ed64:	e767      	b.n	800ec36 <_svfiprintf_r+0x4e>
 800ed66:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed6a:	460c      	mov	r4, r1
 800ed6c:	2001      	movs	r0, #1
 800ed6e:	e7a5      	b.n	800ecbc <_svfiprintf_r+0xd4>
 800ed70:	2300      	movs	r3, #0
 800ed72:	3401      	adds	r4, #1
 800ed74:	9305      	str	r3, [sp, #20]
 800ed76:	4619      	mov	r1, r3
 800ed78:	f04f 0c0a 	mov.w	ip, #10
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed82:	3a30      	subs	r2, #48	; 0x30
 800ed84:	2a09      	cmp	r2, #9
 800ed86:	d903      	bls.n	800ed90 <_svfiprintf_r+0x1a8>
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d0c5      	beq.n	800ed18 <_svfiprintf_r+0x130>
 800ed8c:	9105      	str	r1, [sp, #20]
 800ed8e:	e7c3      	b.n	800ed18 <_svfiprintf_r+0x130>
 800ed90:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed94:	4604      	mov	r4, r0
 800ed96:	2301      	movs	r3, #1
 800ed98:	e7f0      	b.n	800ed7c <_svfiprintf_r+0x194>
 800ed9a:	ab03      	add	r3, sp, #12
 800ed9c:	9300      	str	r3, [sp, #0]
 800ed9e:	462a      	mov	r2, r5
 800eda0:	4b0f      	ldr	r3, [pc, #60]	; (800ede0 <_svfiprintf_r+0x1f8>)
 800eda2:	a904      	add	r1, sp, #16
 800eda4:	4638      	mov	r0, r7
 800eda6:	f3af 8000 	nop.w
 800edaa:	1c42      	adds	r2, r0, #1
 800edac:	4606      	mov	r6, r0
 800edae:	d1d6      	bne.n	800ed5e <_svfiprintf_r+0x176>
 800edb0:	89ab      	ldrh	r3, [r5, #12]
 800edb2:	065b      	lsls	r3, r3, #25
 800edb4:	f53f af2c 	bmi.w	800ec10 <_svfiprintf_r+0x28>
 800edb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800edba:	b01d      	add	sp, #116	; 0x74
 800edbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc0:	ab03      	add	r3, sp, #12
 800edc2:	9300      	str	r3, [sp, #0]
 800edc4:	462a      	mov	r2, r5
 800edc6:	4b06      	ldr	r3, [pc, #24]	; (800ede0 <_svfiprintf_r+0x1f8>)
 800edc8:	a904      	add	r1, sp, #16
 800edca:	4638      	mov	r0, r7
 800edcc:	f000 f87a 	bl	800eec4 <_printf_i>
 800edd0:	e7eb      	b.n	800edaa <_svfiprintf_r+0x1c2>
 800edd2:	bf00      	nop
 800edd4:	0800f75c 	.word	0x0800f75c
 800edd8:	0800f766 	.word	0x0800f766
 800eddc:	00000000 	.word	0x00000000
 800ede0:	0800eb31 	.word	0x0800eb31
 800ede4:	0800f762 	.word	0x0800f762

0800ede8 <_printf_common>:
 800ede8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edec:	4616      	mov	r6, r2
 800edee:	4699      	mov	r9, r3
 800edf0:	688a      	ldr	r2, [r1, #8]
 800edf2:	690b      	ldr	r3, [r1, #16]
 800edf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800edf8:	4293      	cmp	r3, r2
 800edfa:	bfb8      	it	lt
 800edfc:	4613      	movlt	r3, r2
 800edfe:	6033      	str	r3, [r6, #0]
 800ee00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee04:	4607      	mov	r7, r0
 800ee06:	460c      	mov	r4, r1
 800ee08:	b10a      	cbz	r2, 800ee0e <_printf_common+0x26>
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	6033      	str	r3, [r6, #0]
 800ee0e:	6823      	ldr	r3, [r4, #0]
 800ee10:	0699      	lsls	r1, r3, #26
 800ee12:	bf42      	ittt	mi
 800ee14:	6833      	ldrmi	r3, [r6, #0]
 800ee16:	3302      	addmi	r3, #2
 800ee18:	6033      	strmi	r3, [r6, #0]
 800ee1a:	6825      	ldr	r5, [r4, #0]
 800ee1c:	f015 0506 	ands.w	r5, r5, #6
 800ee20:	d106      	bne.n	800ee30 <_printf_common+0x48>
 800ee22:	f104 0a19 	add.w	sl, r4, #25
 800ee26:	68e3      	ldr	r3, [r4, #12]
 800ee28:	6832      	ldr	r2, [r6, #0]
 800ee2a:	1a9b      	subs	r3, r3, r2
 800ee2c:	42ab      	cmp	r3, r5
 800ee2e:	dc26      	bgt.n	800ee7e <_printf_common+0x96>
 800ee30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee34:	1e13      	subs	r3, r2, #0
 800ee36:	6822      	ldr	r2, [r4, #0]
 800ee38:	bf18      	it	ne
 800ee3a:	2301      	movne	r3, #1
 800ee3c:	0692      	lsls	r2, r2, #26
 800ee3e:	d42b      	bmi.n	800ee98 <_printf_common+0xb0>
 800ee40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee44:	4649      	mov	r1, r9
 800ee46:	4638      	mov	r0, r7
 800ee48:	47c0      	blx	r8
 800ee4a:	3001      	adds	r0, #1
 800ee4c:	d01e      	beq.n	800ee8c <_printf_common+0xa4>
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	68e5      	ldr	r5, [r4, #12]
 800ee52:	6832      	ldr	r2, [r6, #0]
 800ee54:	f003 0306 	and.w	r3, r3, #6
 800ee58:	2b04      	cmp	r3, #4
 800ee5a:	bf08      	it	eq
 800ee5c:	1aad      	subeq	r5, r5, r2
 800ee5e:	68a3      	ldr	r3, [r4, #8]
 800ee60:	6922      	ldr	r2, [r4, #16]
 800ee62:	bf0c      	ite	eq
 800ee64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee68:	2500      	movne	r5, #0
 800ee6a:	4293      	cmp	r3, r2
 800ee6c:	bfc4      	itt	gt
 800ee6e:	1a9b      	subgt	r3, r3, r2
 800ee70:	18ed      	addgt	r5, r5, r3
 800ee72:	2600      	movs	r6, #0
 800ee74:	341a      	adds	r4, #26
 800ee76:	42b5      	cmp	r5, r6
 800ee78:	d11a      	bne.n	800eeb0 <_printf_common+0xc8>
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	e008      	b.n	800ee90 <_printf_common+0xa8>
 800ee7e:	2301      	movs	r3, #1
 800ee80:	4652      	mov	r2, sl
 800ee82:	4649      	mov	r1, r9
 800ee84:	4638      	mov	r0, r7
 800ee86:	47c0      	blx	r8
 800ee88:	3001      	adds	r0, #1
 800ee8a:	d103      	bne.n	800ee94 <_printf_common+0xac>
 800ee8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee94:	3501      	adds	r5, #1
 800ee96:	e7c6      	b.n	800ee26 <_printf_common+0x3e>
 800ee98:	18e1      	adds	r1, r4, r3
 800ee9a:	1c5a      	adds	r2, r3, #1
 800ee9c:	2030      	movs	r0, #48	; 0x30
 800ee9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eea2:	4422      	add	r2, r4
 800eea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eeac:	3302      	adds	r3, #2
 800eeae:	e7c7      	b.n	800ee40 <_printf_common+0x58>
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	4622      	mov	r2, r4
 800eeb4:	4649      	mov	r1, r9
 800eeb6:	4638      	mov	r0, r7
 800eeb8:	47c0      	blx	r8
 800eeba:	3001      	adds	r0, #1
 800eebc:	d0e6      	beq.n	800ee8c <_printf_common+0xa4>
 800eebe:	3601      	adds	r6, #1
 800eec0:	e7d9      	b.n	800ee76 <_printf_common+0x8e>
	...

0800eec4 <_printf_i>:
 800eec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eec8:	460c      	mov	r4, r1
 800eeca:	4691      	mov	r9, r2
 800eecc:	7e27      	ldrb	r7, [r4, #24]
 800eece:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eed0:	2f78      	cmp	r7, #120	; 0x78
 800eed2:	4680      	mov	r8, r0
 800eed4:	469a      	mov	sl, r3
 800eed6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eeda:	d807      	bhi.n	800eeec <_printf_i+0x28>
 800eedc:	2f62      	cmp	r7, #98	; 0x62
 800eede:	d80a      	bhi.n	800eef6 <_printf_i+0x32>
 800eee0:	2f00      	cmp	r7, #0
 800eee2:	f000 80d8 	beq.w	800f096 <_printf_i+0x1d2>
 800eee6:	2f58      	cmp	r7, #88	; 0x58
 800eee8:	f000 80a3 	beq.w	800f032 <_printf_i+0x16e>
 800eeec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eef4:	e03a      	b.n	800ef6c <_printf_i+0xa8>
 800eef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eefa:	2b15      	cmp	r3, #21
 800eefc:	d8f6      	bhi.n	800eeec <_printf_i+0x28>
 800eefe:	a001      	add	r0, pc, #4	; (adr r0, 800ef04 <_printf_i+0x40>)
 800ef00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ef04:	0800ef5d 	.word	0x0800ef5d
 800ef08:	0800ef71 	.word	0x0800ef71
 800ef0c:	0800eeed 	.word	0x0800eeed
 800ef10:	0800eeed 	.word	0x0800eeed
 800ef14:	0800eeed 	.word	0x0800eeed
 800ef18:	0800eeed 	.word	0x0800eeed
 800ef1c:	0800ef71 	.word	0x0800ef71
 800ef20:	0800eeed 	.word	0x0800eeed
 800ef24:	0800eeed 	.word	0x0800eeed
 800ef28:	0800eeed 	.word	0x0800eeed
 800ef2c:	0800eeed 	.word	0x0800eeed
 800ef30:	0800f07d 	.word	0x0800f07d
 800ef34:	0800efa1 	.word	0x0800efa1
 800ef38:	0800f05f 	.word	0x0800f05f
 800ef3c:	0800eeed 	.word	0x0800eeed
 800ef40:	0800eeed 	.word	0x0800eeed
 800ef44:	0800f09f 	.word	0x0800f09f
 800ef48:	0800eeed 	.word	0x0800eeed
 800ef4c:	0800efa1 	.word	0x0800efa1
 800ef50:	0800eeed 	.word	0x0800eeed
 800ef54:	0800eeed 	.word	0x0800eeed
 800ef58:	0800f067 	.word	0x0800f067
 800ef5c:	680b      	ldr	r3, [r1, #0]
 800ef5e:	1d1a      	adds	r2, r3, #4
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	600a      	str	r2, [r1, #0]
 800ef64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ef68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e0a3      	b.n	800f0b8 <_printf_i+0x1f4>
 800ef70:	6825      	ldr	r5, [r4, #0]
 800ef72:	6808      	ldr	r0, [r1, #0]
 800ef74:	062e      	lsls	r6, r5, #24
 800ef76:	f100 0304 	add.w	r3, r0, #4
 800ef7a:	d50a      	bpl.n	800ef92 <_printf_i+0xce>
 800ef7c:	6805      	ldr	r5, [r0, #0]
 800ef7e:	600b      	str	r3, [r1, #0]
 800ef80:	2d00      	cmp	r5, #0
 800ef82:	da03      	bge.n	800ef8c <_printf_i+0xc8>
 800ef84:	232d      	movs	r3, #45	; 0x2d
 800ef86:	426d      	negs	r5, r5
 800ef88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef8c:	485e      	ldr	r0, [pc, #376]	; (800f108 <_printf_i+0x244>)
 800ef8e:	230a      	movs	r3, #10
 800ef90:	e019      	b.n	800efc6 <_printf_i+0x102>
 800ef92:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ef96:	6805      	ldr	r5, [r0, #0]
 800ef98:	600b      	str	r3, [r1, #0]
 800ef9a:	bf18      	it	ne
 800ef9c:	b22d      	sxthne	r5, r5
 800ef9e:	e7ef      	b.n	800ef80 <_printf_i+0xbc>
 800efa0:	680b      	ldr	r3, [r1, #0]
 800efa2:	6825      	ldr	r5, [r4, #0]
 800efa4:	1d18      	adds	r0, r3, #4
 800efa6:	6008      	str	r0, [r1, #0]
 800efa8:	0628      	lsls	r0, r5, #24
 800efaa:	d501      	bpl.n	800efb0 <_printf_i+0xec>
 800efac:	681d      	ldr	r5, [r3, #0]
 800efae:	e002      	b.n	800efb6 <_printf_i+0xf2>
 800efb0:	0669      	lsls	r1, r5, #25
 800efb2:	d5fb      	bpl.n	800efac <_printf_i+0xe8>
 800efb4:	881d      	ldrh	r5, [r3, #0]
 800efb6:	4854      	ldr	r0, [pc, #336]	; (800f108 <_printf_i+0x244>)
 800efb8:	2f6f      	cmp	r7, #111	; 0x6f
 800efba:	bf0c      	ite	eq
 800efbc:	2308      	moveq	r3, #8
 800efbe:	230a      	movne	r3, #10
 800efc0:	2100      	movs	r1, #0
 800efc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efc6:	6866      	ldr	r6, [r4, #4]
 800efc8:	60a6      	str	r6, [r4, #8]
 800efca:	2e00      	cmp	r6, #0
 800efcc:	bfa2      	ittt	ge
 800efce:	6821      	ldrge	r1, [r4, #0]
 800efd0:	f021 0104 	bicge.w	r1, r1, #4
 800efd4:	6021      	strge	r1, [r4, #0]
 800efd6:	b90d      	cbnz	r5, 800efdc <_printf_i+0x118>
 800efd8:	2e00      	cmp	r6, #0
 800efda:	d04d      	beq.n	800f078 <_printf_i+0x1b4>
 800efdc:	4616      	mov	r6, r2
 800efde:	fbb5 f1f3 	udiv	r1, r5, r3
 800efe2:	fb03 5711 	mls	r7, r3, r1, r5
 800efe6:	5dc7      	ldrb	r7, [r0, r7]
 800efe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800efec:	462f      	mov	r7, r5
 800efee:	42bb      	cmp	r3, r7
 800eff0:	460d      	mov	r5, r1
 800eff2:	d9f4      	bls.n	800efde <_printf_i+0x11a>
 800eff4:	2b08      	cmp	r3, #8
 800eff6:	d10b      	bne.n	800f010 <_printf_i+0x14c>
 800eff8:	6823      	ldr	r3, [r4, #0]
 800effa:	07df      	lsls	r7, r3, #31
 800effc:	d508      	bpl.n	800f010 <_printf_i+0x14c>
 800effe:	6923      	ldr	r3, [r4, #16]
 800f000:	6861      	ldr	r1, [r4, #4]
 800f002:	4299      	cmp	r1, r3
 800f004:	bfde      	ittt	le
 800f006:	2330      	movle	r3, #48	; 0x30
 800f008:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f00c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f010:	1b92      	subs	r2, r2, r6
 800f012:	6122      	str	r2, [r4, #16]
 800f014:	f8cd a000 	str.w	sl, [sp]
 800f018:	464b      	mov	r3, r9
 800f01a:	aa03      	add	r2, sp, #12
 800f01c:	4621      	mov	r1, r4
 800f01e:	4640      	mov	r0, r8
 800f020:	f7ff fee2 	bl	800ede8 <_printf_common>
 800f024:	3001      	adds	r0, #1
 800f026:	d14c      	bne.n	800f0c2 <_printf_i+0x1fe>
 800f028:	f04f 30ff 	mov.w	r0, #4294967295
 800f02c:	b004      	add	sp, #16
 800f02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f032:	4835      	ldr	r0, [pc, #212]	; (800f108 <_printf_i+0x244>)
 800f034:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f038:	6823      	ldr	r3, [r4, #0]
 800f03a:	680e      	ldr	r6, [r1, #0]
 800f03c:	061f      	lsls	r7, r3, #24
 800f03e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f042:	600e      	str	r6, [r1, #0]
 800f044:	d514      	bpl.n	800f070 <_printf_i+0x1ac>
 800f046:	07d9      	lsls	r1, r3, #31
 800f048:	bf44      	itt	mi
 800f04a:	f043 0320 	orrmi.w	r3, r3, #32
 800f04e:	6023      	strmi	r3, [r4, #0]
 800f050:	b91d      	cbnz	r5, 800f05a <_printf_i+0x196>
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	f023 0320 	bic.w	r3, r3, #32
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	2310      	movs	r3, #16
 800f05c:	e7b0      	b.n	800efc0 <_printf_i+0xfc>
 800f05e:	6823      	ldr	r3, [r4, #0]
 800f060:	f043 0320 	orr.w	r3, r3, #32
 800f064:	6023      	str	r3, [r4, #0]
 800f066:	2378      	movs	r3, #120	; 0x78
 800f068:	4828      	ldr	r0, [pc, #160]	; (800f10c <_printf_i+0x248>)
 800f06a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f06e:	e7e3      	b.n	800f038 <_printf_i+0x174>
 800f070:	065e      	lsls	r6, r3, #25
 800f072:	bf48      	it	mi
 800f074:	b2ad      	uxthmi	r5, r5
 800f076:	e7e6      	b.n	800f046 <_printf_i+0x182>
 800f078:	4616      	mov	r6, r2
 800f07a:	e7bb      	b.n	800eff4 <_printf_i+0x130>
 800f07c:	680b      	ldr	r3, [r1, #0]
 800f07e:	6826      	ldr	r6, [r4, #0]
 800f080:	6960      	ldr	r0, [r4, #20]
 800f082:	1d1d      	adds	r5, r3, #4
 800f084:	600d      	str	r5, [r1, #0]
 800f086:	0635      	lsls	r5, r6, #24
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	d501      	bpl.n	800f090 <_printf_i+0x1cc>
 800f08c:	6018      	str	r0, [r3, #0]
 800f08e:	e002      	b.n	800f096 <_printf_i+0x1d2>
 800f090:	0671      	lsls	r1, r6, #25
 800f092:	d5fb      	bpl.n	800f08c <_printf_i+0x1c8>
 800f094:	8018      	strh	r0, [r3, #0]
 800f096:	2300      	movs	r3, #0
 800f098:	6123      	str	r3, [r4, #16]
 800f09a:	4616      	mov	r6, r2
 800f09c:	e7ba      	b.n	800f014 <_printf_i+0x150>
 800f09e:	680b      	ldr	r3, [r1, #0]
 800f0a0:	1d1a      	adds	r2, r3, #4
 800f0a2:	600a      	str	r2, [r1, #0]
 800f0a4:	681e      	ldr	r6, [r3, #0]
 800f0a6:	6862      	ldr	r2, [r4, #4]
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	f7f1 f898 	bl	80001e0 <memchr>
 800f0b0:	b108      	cbz	r0, 800f0b6 <_printf_i+0x1f2>
 800f0b2:	1b80      	subs	r0, r0, r6
 800f0b4:	6060      	str	r0, [r4, #4]
 800f0b6:	6863      	ldr	r3, [r4, #4]
 800f0b8:	6123      	str	r3, [r4, #16]
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0c0:	e7a8      	b.n	800f014 <_printf_i+0x150>
 800f0c2:	6923      	ldr	r3, [r4, #16]
 800f0c4:	4632      	mov	r2, r6
 800f0c6:	4649      	mov	r1, r9
 800f0c8:	4640      	mov	r0, r8
 800f0ca:	47d0      	blx	sl
 800f0cc:	3001      	adds	r0, #1
 800f0ce:	d0ab      	beq.n	800f028 <_printf_i+0x164>
 800f0d0:	6823      	ldr	r3, [r4, #0]
 800f0d2:	079b      	lsls	r3, r3, #30
 800f0d4:	d413      	bmi.n	800f0fe <_printf_i+0x23a>
 800f0d6:	68e0      	ldr	r0, [r4, #12]
 800f0d8:	9b03      	ldr	r3, [sp, #12]
 800f0da:	4298      	cmp	r0, r3
 800f0dc:	bfb8      	it	lt
 800f0de:	4618      	movlt	r0, r3
 800f0e0:	e7a4      	b.n	800f02c <_printf_i+0x168>
 800f0e2:	2301      	movs	r3, #1
 800f0e4:	4632      	mov	r2, r6
 800f0e6:	4649      	mov	r1, r9
 800f0e8:	4640      	mov	r0, r8
 800f0ea:	47d0      	blx	sl
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	d09b      	beq.n	800f028 <_printf_i+0x164>
 800f0f0:	3501      	adds	r5, #1
 800f0f2:	68e3      	ldr	r3, [r4, #12]
 800f0f4:	9903      	ldr	r1, [sp, #12]
 800f0f6:	1a5b      	subs	r3, r3, r1
 800f0f8:	42ab      	cmp	r3, r5
 800f0fa:	dcf2      	bgt.n	800f0e2 <_printf_i+0x21e>
 800f0fc:	e7eb      	b.n	800f0d6 <_printf_i+0x212>
 800f0fe:	2500      	movs	r5, #0
 800f100:	f104 0619 	add.w	r6, r4, #25
 800f104:	e7f5      	b.n	800f0f2 <_printf_i+0x22e>
 800f106:	bf00      	nop
 800f108:	0800f76d 	.word	0x0800f76d
 800f10c:	0800f77e 	.word	0x0800f77e

0800f110 <memmove>:
 800f110:	4288      	cmp	r0, r1
 800f112:	b510      	push	{r4, lr}
 800f114:	eb01 0402 	add.w	r4, r1, r2
 800f118:	d902      	bls.n	800f120 <memmove+0x10>
 800f11a:	4284      	cmp	r4, r0
 800f11c:	4623      	mov	r3, r4
 800f11e:	d807      	bhi.n	800f130 <memmove+0x20>
 800f120:	1e43      	subs	r3, r0, #1
 800f122:	42a1      	cmp	r1, r4
 800f124:	d008      	beq.n	800f138 <memmove+0x28>
 800f126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f12a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f12e:	e7f8      	b.n	800f122 <memmove+0x12>
 800f130:	4402      	add	r2, r0
 800f132:	4601      	mov	r1, r0
 800f134:	428a      	cmp	r2, r1
 800f136:	d100      	bne.n	800f13a <memmove+0x2a>
 800f138:	bd10      	pop	{r4, pc}
 800f13a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f13e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f142:	e7f7      	b.n	800f134 <memmove+0x24>

0800f144 <_realloc_r>:
 800f144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f146:	4607      	mov	r7, r0
 800f148:	4614      	mov	r4, r2
 800f14a:	460e      	mov	r6, r1
 800f14c:	b921      	cbnz	r1, 800f158 <_realloc_r+0x14>
 800f14e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f152:	4611      	mov	r1, r2
 800f154:	f7ff bb84 	b.w	800e860 <_malloc_r>
 800f158:	b922      	cbnz	r2, 800f164 <_realloc_r+0x20>
 800f15a:	f7ff fc99 	bl	800ea90 <_free_r>
 800f15e:	4625      	mov	r5, r4
 800f160:	4628      	mov	r0, r5
 800f162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f164:	f000 f814 	bl	800f190 <_malloc_usable_size_r>
 800f168:	42a0      	cmp	r0, r4
 800f16a:	d20f      	bcs.n	800f18c <_realloc_r+0x48>
 800f16c:	4621      	mov	r1, r4
 800f16e:	4638      	mov	r0, r7
 800f170:	f7ff fb76 	bl	800e860 <_malloc_r>
 800f174:	4605      	mov	r5, r0
 800f176:	2800      	cmp	r0, #0
 800f178:	d0f2      	beq.n	800f160 <_realloc_r+0x1c>
 800f17a:	4631      	mov	r1, r6
 800f17c:	4622      	mov	r2, r4
 800f17e:	f7ff fb59 	bl	800e834 <memcpy>
 800f182:	4631      	mov	r1, r6
 800f184:	4638      	mov	r0, r7
 800f186:	f7ff fc83 	bl	800ea90 <_free_r>
 800f18a:	e7e9      	b.n	800f160 <_realloc_r+0x1c>
 800f18c:	4635      	mov	r5, r6
 800f18e:	e7e7      	b.n	800f160 <_realloc_r+0x1c>

0800f190 <_malloc_usable_size_r>:
 800f190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f194:	1f18      	subs	r0, r3, #4
 800f196:	2b00      	cmp	r3, #0
 800f198:	bfbc      	itt	lt
 800f19a:	580b      	ldrlt	r3, [r1, r0]
 800f19c:	18c0      	addlt	r0, r0, r3
 800f19e:	4770      	bx	lr

0800f1a0 <_init>:
 800f1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a2:	bf00      	nop
 800f1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1a6:	bc08      	pop	{r3}
 800f1a8:	469e      	mov	lr, r3
 800f1aa:	4770      	bx	lr

0800f1ac <_fini>:
 800f1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ae:	bf00      	nop
 800f1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1b2:	bc08      	pop	{r3}
 800f1b4:	469e      	mov	lr, r3
 800f1b6:	4770      	bx	lr
